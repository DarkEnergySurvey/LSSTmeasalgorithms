/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AffineTransform swig_types[0]
#define SWIGTYPE_p_AlgorithmList swig_types[1]
#define SWIGTYPE_p_AmpSet swig_types[2]
#define SWIGTYPE_p_Array swig_types[3]
#define SWIGTYPE_p_BoolArray swig_types[4]
#define SWIGTYPE_p_Builder swig_types[5]
#define SWIGTYPE_p_CandidateList swig_types[6]
#define SWIGTYPE_p_Catalog swig_types[7]
#define SWIGTYPE_p_CellList swig_types[8]
#define SWIGTYPE_p_CoeffT swig_types[9]
#define SWIGTYPE_p_ColumnView swig_types[10]
#define SWIGTYPE_p_ConstArray swig_types[11]
#define SWIGTYPE_p_ConstCatalog swig_types[12]
#define SWIGTYPE_p_ConstDictPtr swig_types[13]
#define SWIGTYPE_p_ConstPolicyPtrArray swig_types[14]
#define SWIGTYPE_p_ConstPtr swig_types[15]
#define SWIGTYPE_p_DetectorSet swig_types[16]
#define SWIGTYPE_p_DictPtr swig_types[17]
#define SWIGTYPE_p_DoubleArray swig_types[18]
#define SWIGTYPE_p_EigenVector swig_types[19]
#define SWIGTYPE_p_Element swig_types[20]
#define SWIGTYPE_p_Ellipticity swig_types[21]
#define SWIGTYPE_p_ErrKey swig_types[22]
#define SWIGTYPE_p_ErrValue swig_types[23]
#define SWIGTYPE_p_Exposure swig_types[24]
#define SWIGTYPE_p_Extent swig_types[25]
#define SWIGTYPE_p_FilePtr swig_types[26]
#define SWIGTYPE_p_FilePtrArray swig_types[27]
#define SWIGTYPE_p_FootprintList swig_types[28]
#define SWIGTYPE_p_Function1Ptr swig_types[29]
#define SWIGTYPE_p_Function2Ptr swig_types[30]
#define SWIGTYPE_p_Image swig_types[31]
#define SWIGTYPE_p_ImageConstPtr swig_types[32]
#define SWIGTYPE_p_ImageList swig_types[33]
#define SWIGTYPE_p_ImagePtr swig_types[34]
#define SWIGTYPE_p_ImageT swig_types[35]
#define SWIGTYPE_p_IntArray swig_types[36]
#define SWIGTYPE_p_IntT swig_types[37]
#define SWIGTYPE_p_InternalPixelT swig_types[38]
#define SWIGTYPE_p_Iterator swig_types[39]
#define SWIGTYPE_p_Jacobian swig_types[40]
#define SWIGTYPE_p_KernelFunction swig_types[41]
#define SWIGTYPE_p_KernelFunctionPtr swig_types[42]
#define SWIGTYPE_p_KeyTuple swig_types[43]
#define SWIGTYPE_p_List swig_types[44]
#define SWIGTYPE_p_Mask swig_types[45]
#define SWIGTYPE_p_MaskPixel swig_types[46]
#define SWIGTYPE_p_MaskPlaneDict swig_types[47]
#define SWIGTYPE_p_MaskPtr swig_types[48]
#define SWIGTYPE_p_MaskedImageT swig_types[49]
#define SWIGTYPE_p_Matrix swig_types[50]
#define SWIGTYPE_p_MeasKey swig_types[51]
#define SWIGTYPE_p_MeasValue swig_types[52]
#define SWIGTYPE_p_NullSpatialFunction swig_types[53]
#define SWIGTYPE_p_OutPixelT swig_types[54]
#define SWIGTYPE_p_ParameterVector swig_types[55]
#define SWIGTYPE_p_PeakList swig_types[56]
#define SWIGTYPE_p_Pixel swig_types[57]
#define SWIGTYPE_p_PixelConstReference swig_types[58]
#define SWIGTYPE_p_PixelReference swig_types[59]
#define SWIGTYPE_p_PixelT swig_types[60]
#define SWIGTYPE_p_Point swig_types[61]
#define SWIGTYPE_p_Point2D swig_types[62]
#define SWIGTYPE_p_PointD swig_types[63]
#define SWIGTYPE_p_Policy swig_types[64]
#define SWIGTYPE_p_PolicyPtrArray swig_types[65]
#define SWIGTYPE_p_ProductDerivativeMatrix swig_types[66]
#define SWIGTYPE_p_PsfCandidateList swig_types[67]
#define SWIGTYPE_p_PsfCandidateT swig_types[68]
#define SWIGTYPE_p_Ptr swig_types[69]
#define SWIGTYPE_p_PtrList swig_types[70]
#define SWIGTYPE_p_Quadrupole swig_types[71]
#define SWIGTYPE_p_Radius swig_types[72]
#define SWIGTYPE_p_Record swig_types[73]
#define SWIGTYPE_p_Shapelet swig_types[74]
#define SWIGTYPE_p_ShapeletCovariance swig_types[75]
#define SWIGTYPE_p_ShapeletVector swig_types[76]
#define SWIGTYPE_p_SinglePixel swig_types[77]
#define SWIGTYPE_p_Source swig_types[78]
#define SWIGTYPE_p_SourceCatalog swig_types[79]
#define SWIGTYPE_p_SourceRecord swig_types[80]
#define SWIGTYPE_p_SourceTable swig_types[81]
#define SWIGTYPE_p_SpanList swig_types[82]
#define SWIGTYPE_p_SpatialCellSet swig_types[83]
#define SWIGTYPE_p_SpatialFunction swig_types[84]
#define SWIGTYPE_p_SpatialFunctionPtr swig_types[85]
#define SWIGTYPE_p_StreamPtr swig_types[86]
#define SWIGTYPE_p_StringArray swig_types[87]
#define SWIGTYPE_p_Table swig_types[88]
#define SWIGTYPE_p_TransformDerivativeMatrix swig_types[89]
#define SWIGTYPE_p_Value swig_types[90]
#define SWIGTYPE_p_Variance swig_types[91]
#define SWIGTYPE_p_VariancePtr swig_types[92]
#define SWIGTYPE_p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t swig_types[93]
#define SWIGTYPE_p_Wcs swig_types[94]
#define SWIGTYPE_p_afw__geom__ellipses__Axes swig_types[95]
#define SWIGTYPE_p_afw__geom__ellipses__Ellipse swig_types[96]
#define SWIGTYPE_p_afw__image__ExposureT_PixelT_t swig_types[97]
#define SWIGTYPE_p_afw__table__SourceRecord swig_types[98]
#define SWIGTYPE_p_allocator_type swig_types[99]
#define SWIGTYPE_p_argument_type swig_types[100]
#define SWIGTYPE_p_base swig_types[101]
#define SWIGTYPE_p_bool swig_types[102]
#define SWIGTYPE_p_boost__shared_ptrT_Eigen__MatrixXd_const_t swig_types[103]
#define SWIGTYPE_p_boost__shared_ptrT_afw__image__Wcs_const_t swig_types[104]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t swig_types[105]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t swig_types[106]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t swig_types[107]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t swig_types[108]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t swig_types[109]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t swig_types[110]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t swig_types[111]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t swig_types[112]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t swig_types[113]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t swig_types[114]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t swig_types[115]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__Coord_t swig_types[116]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t swig_types[117]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t swig_types[118]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t swig_types[119]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t swig_types[120]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t swig_types[121]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t swig_types[122]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t swig_types[123]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[124]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[125]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Peak_t swig_types[126]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t swig_types[127]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t swig_types[128]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t swig_types[129]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t swig_types[130]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t swig_types[131]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t swig_types[132]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t swig_types[133]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__Span_t swig_types[134]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t swig_types[135]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t swig_types[136]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t swig_types[137]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t swig_types[138]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t swig_types[139]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t swig_types[140]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t swig_types[141]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t swig_types[142]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t swig_types[143]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t swig_types[144]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t swig_types[145]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t swig_types[146]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t swig_types[147]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t swig_types[148]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t swig_types[149]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t swig_types[150]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t swig_types[151]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Calib_t swig_types[152]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t swig_types[153]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t swig_types[154]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t swig_types[155]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t swig_types[156]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t swig_types[157]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t swig_types[158]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DefectBase_t swig_types[159]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t swig_types[160]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[161]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[162]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[163]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[164]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[165]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t swig_types[166]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t swig_types[167]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t swig_types[168]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t swig_types[169]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t swig_types[170]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t swig_types[171]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t swig_types[172]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t swig_types[173]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t swig_types[174]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t swig_types[175]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t swig_types[176]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t swig_types[177]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t swig_types[178]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[179]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[180]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[181]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[182]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t swig_types[183]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t swig_types[184]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t swig_types[185]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t swig_types[186]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t swig_types[187]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t swig_types[188]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Background_t swig_types[189]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t swig_types[190]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t swig_types[191]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t swig_types[192]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t swig_types[193]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t swig_types[194]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t swig_types[195]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t swig_types[196]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t swig_types[197]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t swig_types[198]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t swig_types[199]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t swig_types[200]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t swig_types[201]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t swig_types[202]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t swig_types[203]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t swig_types[204]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t swig_types[205]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t swig_types[206]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t swig_types[207]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t swig_types[208]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t swig_types[209]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t swig_types[210]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t swig_types[211]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t swig_types[212]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t swig_types[213]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t swig_types[214]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Interpolate_t swig_types[215]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t swig_types[216]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t swig_types[217]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t swig_types[218]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t swig_types[219]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t swig_types[220]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t swig_types[221]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t swig_types[222]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t swig_types[223]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t swig_types[224]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t swig_types[225]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t swig_types[226]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t swig_types[227]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t swig_types[228]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t swig_types[229]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t swig_types[230]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t swig_types[231]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t swig_types[232]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t swig_types[233]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t swig_types[234]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t swig_types[235]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t swig_types[236]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t swig_types[237]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t swig_types[238]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t swig_types[239]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t swig_types[240]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t swig_types[241]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t swig_types[242]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t swig_types[243]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t swig_types[244]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t swig_types[245]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t swig_types[246]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t swig_types[247]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__IdFactory_t swig_types[248]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t swig_types[249]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t swig_types[250]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t swig_types[251]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t swig_types[252]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceTable_t swig_types[253]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t swig_types[254]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t swig_types[255]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t swig_types[256]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t swig_types[257]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t swig_types[258]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t swig_types[259]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t swig_types[260]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t swig_types[261]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t swig_types[262]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t swig_types[263]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t swig_types[264]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t swig_types[265]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t swig_types[266]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t swig_types[267]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t swig_types[268]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t swig_types[269]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t swig_types[270]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t swig_types[271]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t swig_types[272]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t swig_types[273]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t swig_types[274]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t swig_types[275]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t swig_types[276]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Citizen_t swig_types[277]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t swig_types[278]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t swig_types[279]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertySet_t swig_types[280]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t swig_types[281]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t swig_types[282]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t swig_types[283]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t swig_types[284]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t swig_types[285]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t swig_types[286]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t swig_types[287]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t swig_types[288]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t swig_types[289]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t swig_types[290]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t swig_types[291]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t swig_types[292]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t swig_types[293]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t swig_types[294]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t swig_types[295]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t swig_types[296]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t swig_types[297]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t swig_types[298]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t swig_types[299]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t swig_types[300]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t swig_types[301]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t swig_types[302]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t swig_types[303]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t swig_types[304]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t swig_types[305]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t swig_types[306]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t swig_types[307]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t swig_types[308]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t swig_types[309]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t swig_types[310]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t swig_types[311]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t swig_types[312]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t swig_types[313]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t swig_types[314]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t swig_types[315]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t swig_types[316]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t swig_types[317]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t swig_types[318]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t swig_types[319]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t swig_types[320]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t swig_types[321]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t swig_types[322]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t swig_types[323]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t swig_types[324]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t swig_types[325]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t swig_types[326]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t swig_types[327]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t swig_types[328]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t swig_types[329]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t swig_types[330]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Definition_t swig_types[331]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t swig_types[332]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t swig_types[333]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t swig_types[334]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t swig_types[335]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t swig_types[336]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t swig_types[337]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t swig_types[338]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t swig_types[339]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t swig_types[340]
#define SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t swig_types[341]
#define SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t swig_types[342]
#define SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t swig_types[343]
#define SWIGTYPE_p_char swig_types[344]
#define SWIGTYPE_p_char_type swig_types[345]
#define SWIGTYPE_p_const_iterator swig_types[346]
#define SWIGTYPE_p_const_reference swig_types[347]
#define SWIGTYPE_p_const_reverse_iterator swig_types[348]
#define SWIGTYPE_p_const_x_iterator swig_types[349]
#define SWIGTYPE_p_const_xy_locator swig_types[350]
#define SWIGTYPE_p_const_y_iterator swig_types[351]
#define SWIGTYPE_p_difference_type swig_types[352]
#define SWIGTYPE_p_double swig_types[353]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[354]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[355]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[356]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[357]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[358]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[359]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[360]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[361]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[362]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[363]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[364]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[365]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[366]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[367]
#define SWIGTYPE_p_fast_iterator swig_types[368]
#define SWIGTYPE_p_first_type swig_types[369]
#define SWIGTYPE_p_float swig_types[370]
#define SWIGTYPE_p_fmtflags swig_types[371]
#define SWIGTYPE_p_image_category swig_types[372]
#define SWIGTYPE_p_int swig_types[373]
#define SWIGTYPE_p_int_type swig_types[374]
#define SWIGTYPE_p_iostate swig_types[375]
#define SWIGTYPE_p_iterator swig_types[376]
#define SWIGTYPE_p_kernel_fill_factor swig_types[377]
#define SWIGTYPE_p_key_type swig_types[378]
#define SWIGTYPE_p_long swig_types[379]
#define SWIGTYPE_p_long_double swig_types[380]
#define SWIGTYPE_p_long_long swig_types[381]
#define SWIGTYPE_p_lsst__afw__cameraGeom__Amp swig_types[382]
#define SWIGTYPE_p_lsst__afw__cameraGeom__Camera swig_types[383]
#define SWIGTYPE_p_lsst__afw__cameraGeom__Ccd swig_types[384]
#define SWIGTYPE_p_lsst__afw__cameraGeom__Detector swig_types[385]
#define SWIGTYPE_p_lsst__afw__cameraGeom__DetectorMosaic swig_types[386]
#define SWIGTYPE_p_lsst__afw__cameraGeom__DetectorXYTransform swig_types[387]
#define SWIGTYPE_p_lsst__afw__cameraGeom__Raft swig_types[388]
#define SWIGTYPE_p_lsst__afw__coord__Coord swig_types[389]
#define SWIGTYPE_p_lsst__afw__coord__EclipticCoord swig_types[390]
#define SWIGTYPE_p_lsst__afw__coord__Fk5Coord swig_types[391]
#define SWIGTYPE_p_lsst__afw__coord__GalacticCoord swig_types[392]
#define SWIGTYPE_p_lsst__afw__coord__IcrsCoord swig_types[393]
#define SWIGTYPE_p_lsst__afw__coord__TopocentricCoord swig_types[394]
#define SWIGTYPE_p_lsst__afw__detection__Footprint swig_types[395]
#define SWIGTYPE_p_lsst__afw__detection__FootprintSet swig_types[396]
#define SWIGTYPE_p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t swig_types[397]
#define SWIGTYPE_p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t swig_types[398]
#define SWIGTYPE_p_lsst__afw__detection__Peak swig_types[399]
#define SWIGTYPE_p_lsst__afw__detection__Psf swig_types[400]
#define SWIGTYPE_p_lsst__afw__fits__FitsError swig_types[401]
#define SWIGTYPE_p_lsst__afw__fits__FitsTypeError swig_types[402]
#define SWIGTYPE_p_lsst__afw__fits__MemFileManager swig_types[403]
#define SWIGTYPE_p_lsst__afw__geom__Angle swig_types[404]
#define SWIGTYPE_p_lsst__afw__geom__Box2D swig_types[405]
#define SWIGTYPE_p_lsst__afw__geom__Box2I swig_types[406]
#define SWIGTYPE_p_lsst__afw__geom__CoordinateExprT_2_t swig_types[407]
#define SWIGTYPE_p_lsst__afw__geom__CoordinateExprT_3_t swig_types[408]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_double_2_t swig_types[409]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_double_3_t swig_types[410]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t swig_types[411]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_int_3_t swig_types[412]
#define SWIGTYPE_p_lsst__afw__geom__IdentityXYTransform swig_types[413]
#define SWIGTYPE_p_lsst__afw__geom__InvertedXYTransform swig_types[414]
#define SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t swig_types[415]
#define SWIGTYPE_p_lsst__afw__geom__PointT_double_3_t swig_types[416]
#define SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t swig_types[417]
#define SWIGTYPE_p_lsst__afw__geom__PointT_int_3_t swig_types[418]
#define SWIGTYPE_p_lsst__afw__geom__RadialXYTransform swig_types[419]
#define SWIGTYPE_p_lsst__afw__geom__Span swig_types[420]
#define SWIGTYPE_p_lsst__afw__geom__XYTransform swig_types[421]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t swig_types[422]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t swig_types[423]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t swig_types[424]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t swig_types[425]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t swig_types[426]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t swig_types[427]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t swig_types[428]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t swig_types[429]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t swig_types[430]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t swig_types[431]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t swig_types[432]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t swig_types[433]
#define SWIGTYPE_p_lsst__afw__image__Calib swig_types[434]
#define SWIGTYPE_p_lsst__afw__image__CoaddInputs swig_types[435]
#define SWIGTYPE_p_lsst__afw__image__DecoratedImageT_double_t swig_types[436]
#define SWIGTYPE_p_lsst__afw__image__DecoratedImageT_float_t swig_types[437]
#define SWIGTYPE_p_lsst__afw__image__DecoratedImageT_int_t swig_types[438]
#define SWIGTYPE_p_lsst__afw__image__DecoratedImageT_unsigned_long_t swig_types[439]
#define SWIGTYPE_p_lsst__afw__image__DecoratedImageT_unsigned_short_t swig_types[440]
#define SWIGTYPE_p_lsst__afw__image__DefectBase swig_types[441]
#define SWIGTYPE_p_lsst__afw__image__ExposureT_double_unsigned_short_float_t swig_types[442]
#define SWIGTYPE_p_lsst__afw__image__ExposureT_float_unsigned_short_float_t swig_types[443]
#define SWIGTYPE_p_lsst__afw__image__ExposureT_int_unsigned_short_float_t swig_types[444]
#define SWIGTYPE_p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t swig_types[445]
#define SWIGTYPE_p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t swig_types[446]
#define SWIGTYPE_p_lsst__afw__image__ImageBaseT_double_t swig_types[447]
#define SWIGTYPE_p_lsst__afw__image__ImageBaseT_float_t swig_types[448]
#define SWIGTYPE_p_lsst__afw__image__ImageBaseT_int_t swig_types[449]
#define SWIGTYPE_p_lsst__afw__image__ImageBaseT_unsigned_long_t swig_types[450]
#define SWIGTYPE_p_lsst__afw__image__ImageBaseT_unsigned_short_t swig_types[451]
#define SWIGTYPE_p_lsst__afw__image__ImageSliceT_double_t swig_types[452]
#define SWIGTYPE_p_lsst__afw__image__ImageSliceT_float_t swig_types[453]
#define SWIGTYPE_p_lsst__afw__image__ImageT_double_t swig_types[454]
#define SWIGTYPE_p_lsst__afw__image__ImageT_float_t swig_types[455]
#define SWIGTYPE_p_lsst__afw__image__ImageT_int_t swig_types[456]
#define SWIGTYPE_p_lsst__afw__image__ImageT_unsigned_long_t swig_types[457]
#define SWIGTYPE_p_lsst__afw__image__ImageT_unsigned_short_t swig_types[458]
#define SWIGTYPE_p_lsst__afw__image__MaskT_unsigned_short_t swig_types[459]
#define SWIGTYPE_p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t swig_types[460]
#define SWIGTYPE_p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t swig_types[461]
#define SWIGTYPE_p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t swig_types[462]
#define SWIGTYPE_p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t swig_types[463]
#define SWIGTYPE_p_lsst__afw__image__TanWcs swig_types[464]
#define SWIGTYPE_p_lsst__afw__image__Wcs swig_types[465]
#define SWIGTYPE_p_lsst__afw__image__XYTransformFromWcsPair swig_types[466]
#define SWIGTYPE_p_lsst__afw__math__AnalyticKernel swig_types[467]
#define SWIGTYPE_p_lsst__afw__math__Background swig_types[468]
#define SWIGTYPE_p_lsst__afw__math__BackgroundMI swig_types[469]
#define SWIGTYPE_p_lsst__afw__math__BasePolynomialFunction2T_double_t swig_types[470]
#define SWIGTYPE_p_lsst__afw__math__BasePolynomialFunction2T_float_t swig_types[471]
#define SWIGTYPE_p_lsst__afw__math__BilinearWarpingKernel swig_types[472]
#define SWIGTYPE_p_lsst__afw__math__Chebyshev1Function1T_double_t swig_types[473]
#define SWIGTYPE_p_lsst__afw__math__Chebyshev1Function1T_float_t swig_types[474]
#define SWIGTYPE_p_lsst__afw__math__Chebyshev1Function2T_double_t swig_types[475]
#define SWIGTYPE_p_lsst__afw__math__Chebyshev1Function2T_float_t swig_types[476]
#define SWIGTYPE_p_lsst__afw__math__CovariogramT_double_t swig_types[477]
#define SWIGTYPE_p_lsst__afw__math__DeltaFunctionKernel swig_types[478]
#define SWIGTYPE_p_lsst__afw__math__DoubleGaussianFunction2T_double_t swig_types[479]
#define SWIGTYPE_p_lsst__afw__math__DoubleGaussianFunction2T_float_t swig_types[480]
#define SWIGTYPE_p_lsst__afw__math__FixedKernel swig_types[481]
#define SWIGTYPE_p_lsst__afw__math__Function1T_double_t swig_types[482]
#define SWIGTYPE_p_lsst__afw__math__Function1T_float_t swig_types[483]
#define SWIGTYPE_p_lsst__afw__math__Function2T_double_t swig_types[484]
#define SWIGTYPE_p_lsst__afw__math__Function2T_float_t swig_types[485]
#define SWIGTYPE_p_lsst__afw__math__FunctionT_double_t swig_types[486]
#define SWIGTYPE_p_lsst__afw__math__FunctionT_float_t swig_types[487]
#define SWIGTYPE_p_lsst__afw__math__GaussianFunction1T_double_t swig_types[488]
#define SWIGTYPE_p_lsst__afw__math__GaussianFunction1T_float_t swig_types[489]
#define SWIGTYPE_p_lsst__afw__math__GaussianFunction2T_double_t swig_types[490]
#define SWIGTYPE_p_lsst__afw__math__GaussianFunction2T_float_t swig_types[491]
#define SWIGTYPE_p_lsst__afw__math__IntegerDeltaFunction2T_double_t swig_types[492]
#define SWIGTYPE_p_lsst__afw__math__IntegerDeltaFunction2T_float_t swig_types[493]
#define SWIGTYPE_p_lsst__afw__math__Kernel swig_types[494]
#define SWIGTYPE_p_lsst__afw__math__LanczosFunction1T_double_t swig_types[495]
#define SWIGTYPE_p_lsst__afw__math__LanczosFunction1T_float_t swig_types[496]
#define SWIGTYPE_p_lsst__afw__math__LanczosFunction2T_double_t swig_types[497]
#define SWIGTYPE_p_lsst__afw__math__LanczosFunction2T_float_t swig_types[498]
#define SWIGTYPE_p_lsst__afw__math__LanczosWarpingKernel swig_types[499]
#define SWIGTYPE_p_lsst__afw__math__LinearCombinationKernel swig_types[500]
#define SWIGTYPE_p_lsst__afw__math__NearestWarpingKernel swig_types[501]
#define SWIGTYPE_p_lsst__afw__math__NeuralNetCovariogramT_double_t swig_types[502]
#define SWIGTYPE_p_lsst__afw__math__NullFunction1T_double_t swig_types[503]
#define SWIGTYPE_p_lsst__afw__math__NullFunction1T_float_t swig_types[504]
#define SWIGTYPE_p_lsst__afw__math__NullFunction2T_double_t swig_types[505]
#define SWIGTYPE_p_lsst__afw__math__NullFunction2T_float_t swig_types[506]
#define SWIGTYPE_p_lsst__afw__math__PolynomialFunction1T_double_t swig_types[507]
#define SWIGTYPE_p_lsst__afw__math__PolynomialFunction1T_float_t swig_types[508]
#define SWIGTYPE_p_lsst__afw__math__PolynomialFunction2T_double_t swig_types[509]
#define SWIGTYPE_p_lsst__afw__math__PolynomialFunction2T_float_t swig_types[510]
#define SWIGTYPE_p_lsst__afw__math__SeparableKernel swig_types[511]
#define SWIGTYPE_p_lsst__afw__math__SpatialCellCandidate swig_types[512]
#define SWIGTYPE_p_lsst__afw__math__SpatialCellImageCandidateT_double_t swig_types[513]
#define SWIGTYPE_p_lsst__afw__math__SpatialCellImageCandidateT_float_t swig_types[514]
#define SWIGTYPE_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t swig_types[515]
#define SWIGTYPE_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t swig_types[516]
#define SWIGTYPE_p_lsst__afw__math__SpatialCellSet swig_types[517]
#define SWIGTYPE_p_lsst__afw__math__SquaredExpCovariogramT_double_t swig_types[518]
#define SWIGTYPE_p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t swig_types[519]
#define SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t swig_types[520]
#define SWIGTYPE_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t swig_types[521]
#define SWIGTYPE_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t swig_types[522]
#define SWIGTYPE_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t swig_types[523]
#define SWIGTYPE_p_lsst__afw__table__Schema swig_types[524]
#define SWIGTYPE_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t swig_types[525]
#define SWIGTYPE_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t swig_types[526]
#define SWIGTYPE_p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t swig_types[527]
#define SWIGTYPE_p_lsst__afw__table__io__MalformedArchiveError swig_types[528]
#define SWIGTYPE_p_lsst__afw__table__io__Persistable swig_types[529]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t swig_types[530]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t swig_types[531]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t swig_types[532]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t swig_types[533]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t swig_types[534]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t swig_types[535]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t swig_types[536]
#define SWIGTYPE_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t swig_types[537]
#define SWIGTYPE_p_lsst__afw__table__io__PersistenceError swig_types[538]
#define SWIGTYPE_p_lsst__daf__base__Citizen swig_types[539]
#define SWIGTYPE_p_lsst__daf__base__Persistable swig_types[540]
#define SWIGTYPE_p_lsst__daf__base__PropertyList swig_types[541]
#define SWIGTYPE_p_lsst__daf__base__PropertySet swig_types[542]
#define SWIGTYPE_p_lsst__daf__base__TypeMismatchException swig_types[543]
#define SWIGTYPE_p_lsst__daf__persistence__DbStorage swig_types[544]
#define SWIGTYPE_p_lsst__daf__persistence__DbTsvStorage swig_types[545]
#define SWIGTYPE_p_lsst__daf__persistence__LogicalLocation swig_types[546]
#define SWIGTYPE_p_lsst__daf__persistence__Persistence swig_types[547]
#define SWIGTYPE_p_lsst__daf__persistence__Storage swig_types[548]
#define SWIGTYPE_p_lsst__meas__algorithms__Algorithm swig_types[549]
#define SWIGTYPE_p_lsst__meas__algorithms__AlgorithmControl swig_types[550]
#define SWIGTYPE_p_lsst__meas__algorithms__ApertureFluxControl swig_types[551]
#define SWIGTYPE_p_lsst__meas__algorithms__CentroidAlgorithm swig_types[552]
#define SWIGTYPE_p_lsst__meas__algorithms__CentroidControl swig_types[553]
#define SWIGTYPE_p_lsst__meas__algorithms__ClassificationControl swig_types[554]
#define SWIGTYPE_p_lsst__meas__algorithms__CoaddPsf swig_types[555]
#define SWIGTYPE_p_lsst__meas__algorithms__CorrectFluxesControl swig_types[556]
#define SWIGTYPE_p_lsst__meas__algorithms__Defect swig_types[557]
#define SWIGTYPE_p_lsst__meas__algorithms__DoubleGaussianPsf swig_types[558]
#define SWIGTYPE_p_lsst__meas__algorithms__EllipticalApertureFluxControl swig_types[559]
#define SWIGTYPE_p_lsst__meas__algorithms__FluxAlgorithm swig_types[560]
#define SWIGTYPE_p_lsst__meas__algorithms__FluxControl swig_types[561]
#define SWIGTYPE_p_lsst__meas__algorithms__GaussianCentroidControl swig_types[562]
#define SWIGTYPE_p_lsst__meas__algorithms__GaussianFluxControl swig_types[563]
#define SWIGTYPE_p_lsst__meas__algorithms__ImagePsf swig_types[564]
#define SWIGTYPE_p_lsst__meas__algorithms__KernelPsf swig_types[565]
#define SWIGTYPE_p_lsst__meas__algorithms__LocalShapeletKernel swig_types[566]
#define SWIGTYPE_p_lsst__meas__algorithms__MeasureSources swig_types[567]
#define SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder swig_types[568]
#define SWIGTYPE_p_lsst__meas__algorithms__NaiveCentroidControl swig_types[569]
#define SWIGTYPE_p_lsst__meas__algorithms__NaiveFluxControl swig_types[570]
#define SWIGTYPE_p_lsst__meas__algorithms__PcaPsf swig_types[571]
#define SWIGTYPE_p_lsst__meas__algorithms__PeakLikelihoodFluxControl swig_types[572]
#define SWIGTYPE_p_lsst__meas__algorithms__PixelFlagControl swig_types[573]
#define SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes swig_types[574]
#define SWIGTYPE_p_lsst__meas__algorithms__PsfCandidateT_float_t swig_types[575]
#define SWIGTYPE_p_lsst__meas__algorithms__PsfFluxControl swig_types[576]
#define SWIGTYPE_p_lsst__meas__algorithms__RecordCentroidControl swig_types[577]
#define SWIGTYPE_p_lsst__meas__algorithms__SdssCentroidControl swig_types[578]
#define SWIGTYPE_p_lsst__meas__algorithms__SdssShapeControl swig_types[579]
#define SWIGTYPE_p_lsst__meas__algorithms__ShapeAlgorithm swig_types[580]
#define SWIGTYPE_p_lsst__meas__algorithms__ShapeControl swig_types[581]
#define SWIGTYPE_p_lsst__meas__algorithms__Shapelet swig_types[582]
#define SWIGTYPE_p_lsst__meas__algorithms__ShapeletInterpolation swig_types[583]
#define SWIGTYPE_p_lsst__meas__algorithms__ShapeletKernel swig_types[584]
#define SWIGTYPE_p_lsst__meas__algorithms__ShapeletPsfCandidate swig_types[585]
#define SWIGTYPE_p_lsst__meas__algorithms__SincFluxControl swig_types[586]
#define SWIGTYPE_p_lsst__meas__algorithms__SingleGaussianPsf swig_types[587]
#define SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector swig_types[588]
#define SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList swig_types[589]
#define SWIGTYPE_p_lsst__meas__algorithms__SkyCoordControl swig_types[590]
#define SWIGTYPE_p_lsst__meas__algorithms__WarpedPsf swig_types[591]
#define SWIGTYPE_p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t swig_types[592]
#define SWIGTYPE_p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t swig_types[593]
#define SWIGTYPE_p_lsst__meas__algorithms__shapelet__BVec swig_types[594]
#define SWIGTYPE_p_lsst__pex__exceptions__DomainErrorException swig_types[595]
#define SWIGTYPE_p_lsst__pex__exceptions__InvalidParameterException swig_types[596]
#define SWIGTYPE_p_lsst__pex__exceptions__IoErrorException swig_types[597]
#define SWIGTYPE_p_lsst__pex__exceptions__LengthErrorException swig_types[598]
#define SWIGTYPE_p_lsst__pex__exceptions__LogicErrorException swig_types[599]
#define SWIGTYPE_p_lsst__pex__exceptions__MemoryException swig_types[600]
#define SWIGTYPE_p_lsst__pex__exceptions__NotFoundException swig_types[601]
#define SWIGTYPE_p_lsst__pex__exceptions__OutOfRangeException swig_types[602]
#define SWIGTYPE_p_lsst__pex__exceptions__OverflowErrorException swig_types[603]
#define SWIGTYPE_p_lsst__pex__exceptions__RangeErrorException swig_types[604]
#define SWIGTYPE_p_lsst__pex__exceptions__RuntimeErrorException swig_types[605]
#define SWIGTYPE_p_lsst__pex__exceptions__TimeoutException swig_types[606]
#define SWIGTYPE_p_lsst__pex__exceptions__UnderflowErrorException swig_types[607]
#define SWIGTYPE_p_lsst__pex__logging__LogRec swig_types[608]
#define SWIGTYPE_p_lsst__pex__policy__BadNameError swig_types[609]
#define SWIGTYPE_p_lsst__pex__policy__DefaultPolicyFile swig_types[610]
#define SWIGTYPE_p_lsst__pex__policy__Definition swig_types[611]
#define SWIGTYPE_p_lsst__pex__policy__Dictionary swig_types[612]
#define SWIGTYPE_p_lsst__pex__policy__DictionaryError swig_types[613]
#define SWIGTYPE_p_lsst__pex__policy__EOFError swig_types[614]
#define SWIGTYPE_p_lsst__pex__policy__FormatSyntaxError swig_types[615]
#define SWIGTYPE_p_lsst__pex__policy__NameNotFound swig_types[616]
#define SWIGTYPE_p_lsst__pex__policy__ParserError swig_types[617]
#define SWIGTYPE_p_lsst__pex__policy__Policy swig_types[618]
#define SWIGTYPE_p_lsst__pex__policy__PolicyDestination swig_types[619]
#define SWIGTYPE_p_lsst__pex__policy__PolicyFile swig_types[620]
#define SWIGTYPE_p_lsst__pex__policy__PolicySource swig_types[621]
#define SWIGTYPE_p_lsst__pex__policy__PolicyStreamDestination swig_types[622]
#define SWIGTYPE_p_lsst__pex__policy__PolicyString swig_types[623]
#define SWIGTYPE_p_lsst__pex__policy__PolicyStringDestination swig_types[624]
#define SWIGTYPE_p_lsst__pex__policy__SyntaxError swig_types[625]
#define SWIGTYPE_p_lsst__pex__policy__TypeError swig_types[626]
#define SWIGTYPE_p_lsst__pex__policy__UnsupportedSyntax swig_types[627]
#define SWIGTYPE_p_lsst__pex__policy__UrnPolicyFile swig_types[628]
#define SWIGTYPE_p_lsst__pex__policy__ValidationError swig_types[629]
#define SWIGTYPE_p_mapped_type swig_types[630]
#define SWIGTYPE_p_memId swig_types[631]
#define SWIGTYPE_p_off_type swig_types[632]
#define SWIGTYPE_p_openmode swig_types[633]
#define SWIGTYPE_p_p_PyObject swig_types[634]
#define SWIGTYPE_p_p_void swig_types[635]
#define SWIGTYPE_p_pos_type swig_types[636]
#define SWIGTYPE_p_reference swig_types[637]
#define SWIGTYPE_p_result_type swig_types[638]
#define SWIGTYPE_p_reverse_iterator swig_types[639]
#define SWIGTYPE_p_second_type swig_types[640]
#define SWIGTYPE_p_seekdir swig_types[641]
#define SWIGTYPE_p_short swig_types[642]
#define SWIGTYPE_p_signed_char swig_types[643]
#define SWIGTYPE_p_size_t swig_types[644]
#define SWIGTYPE_p_size_type swig_types[645]
#define SWIGTYPE_p_state_type swig_types[646]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t swig_types[647]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[648]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[649]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[650]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[651]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[652]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[653]
#define SWIGTYPE_p_std__invalid_argument swig_types[654]
#define SWIGTYPE_p_std__ios_base swig_types[655]
#define SWIGTYPE_p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t swig_types[656]
#define SWIGTYPE_p_std__locale swig_types[657]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t swig_types[658]
#define SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t swig_types[659]
#define SWIGTYPE_p_std__pairT_bool_double_t swig_types[660]
#define SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t swig_types[661]
#define SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[662]
#define SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t swig_types[663]
#define SWIGTYPE_p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t swig_types[664]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[665]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t swig_types[666]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t swig_types[667]
#define SWIGTYPE_p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t swig_types[668]
#define SWIGTYPE_p_streamoff swig_types[669]
#define SWIGTYPE_p_streampos swig_types[670]
#define SWIGTYPE_p_streamsize swig_types[671]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[672]
#define SWIGTYPE_p_traits_type swig_types[673]
#define SWIGTYPE_p_unsigned_char swig_types[674]
#define SWIGTYPE_p_unsigned_int swig_types[675]
#define SWIGTYPE_p_unsigned_long swig_types[676]
#define SWIGTYPE_p_unsigned_long_long swig_types[677]
#define SWIGTYPE_p_unsigned_short swig_types[678]
#define SWIGTYPE_p_value_type swig_types[679]
#define SWIGTYPE_p_x_iterator swig_types[680]
#define SWIGTYPE_p_xy_locator swig_types[681]
#define SWIGTYPE_p_xy_x_iterator swig_types[682]
#define SWIGTYPE_p_xy_y_iterator swig_types[683]
#define SWIGTYPE_p_y_iterator swig_types[684]
static swig_type_info *swig_types[686];
static swig_module_info swig_module = {swig_types, 685, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _algorithmsLib.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__algorithmsLib

#else
#  define SWIG_init    init_algorithmsLib

#endif
#define SWIG_name    "_algorithmsLib"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#   include <exception>
#   include <list>
#   include <map>
#   include <boost/cstdint.hpp>
#   include <boost/shared_ptr.hpp>
#   include "lsst/pex/logging.h"
#   include "lsst/pex/logging/BlockTimingLog.h"
#   include "lsst/pex/logging/DualLog.h"
#   include "lsst/pex/logging/ScreenLog.h"
#   include "lsst/afw.h"
#   include "lsst/afw/detection/Peak.h"
#   include "lsst/afw/detection/Psf.h"
#   include "lsst/afw/geom/ellipses.h"
#   include "lsst/meas/algorithms.h"

#   define PY_ARRAY_UNIQUE_SYMBOL LSST_MEAS_ALGORITHMS_NUMPY_ARRAY_API
#   include "numpy/arrayobject.h"
#   include "ndarray/swig.h"
#   include "ndarray/swig/eigen.h"

#ifdef __clang__
#pragma clang diagnostic ignored "-Warray-bounds"
#endif


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenarete code using -DSWIGWORDSIZE32"
#endif


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <list>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <set>


#include <vector>


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}




#include <new>
#include "lsst/pex/exceptions/Exception.h"
#include "lsst/pex/exceptions/Runtime.h"


static void raiseLsstException(lsst::pex::exceptions::Exception& ex) {
    PyObject* pyex = 0;
    swig_type_info* tinfo = SWIG_TypeQuery(ex.getType());
    if (tinfo != 0) {
	lsst::pex::exceptions::Exception* e = ex.clone();
        pyex = SWIG_NewPointerObj(static_cast<void*>(e), tinfo,
            SWIG_POINTER_OWN);
    } else {
        PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(ex.what()));
	return;
    }

    PyObject* pyexbase = PyExc_RuntimeError;
    PyObject* module = PyImport_AddModule("lsst.pex.exceptions");
    if (module != 0) {
        // this call returns a "new reference"; we're responsible for decrementing the reference count
        // when we're done with it
        pyexbase = PyObject_GetAttrString(module, "LsstCppException");
        if (pyexbase == 0) {
            pyexbase = PyExc_RuntimeError;
            Py_INCREF(pyexbase); // so ownership is same as if we use LsstCppException
        }
    }

    PyErr_SetObject(pyexbase, pyex);
    // PyErr_SetObject doesn't "steal" ownership of its arguments, so we have to decrement
    // the count on the references we still own.
    Py_DECREF(pyex);
    Py_DECREF(pyexbase);
}



namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v = InputSeq()) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#define SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


    boost::shared_ptr<lsst::meas::algorithms::PsfCandidate<float>  > 
        cast_PsfCandidateF(boost::shared_ptr<lsst::afw::math::SpatialCellCandidate  >  candidate) {
        return boost::shared_dynamic_cast<lsst::meas::algorithms::PsfCandidate<float> >(candidate);
    }


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >"; }
    };
  }


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >" "," "std::vector< double,std::allocator< double > >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<boost::shared_ptr< lsst::afw::math::Kernel > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< lsst::afw::math::Kernel >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< lsst::afw::math::Kernel >, std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< lsst::afw::math::Kernel >" "," "std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::pair<std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::vector< double,std::allocator< double > >" "," "std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > >" " >";
	  }
	};
      }
    

namespace swig {
  template <> struct traits<bool > {
    typedef value_category category;
    static const char* type_name() { return"bool"; }
  };  
  template <>  struct traits_asval<bool > {   
    typedef bool value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_bool (obj, val);
    }
  };
  template <>  struct traits_from<bool > {
    typedef bool value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_bool  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair<bool,double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "bool" "," "double" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::pair<double,double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "double" "," "double" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::pair<boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "boost::shared_ptr< lsst::afw::math::Kernel >" "," "std::pair< double,double >" " >";
	  }
	};
      }
    

#include "lsst/meas/algorithms/SingleGaussianPsf.h"
#include "lsst/meas/algorithms/PcaPsf.h"

SWIGINTERN boost::shared_ptr< lsst::meas::algorithms::ImagePsf > lsst_meas_algorithms_ImagePsf_swigConvert(boost::shared_ptr< lsst::daf::base::Persistable > const &ptr){
            return boost::dynamic_pointer_cast<lsst::meas::algorithms::ImagePsf >(ptr);
        }
SWIGINTERN boost::shared_ptr< lsst::meas::algorithms::KernelPsf > lsst_meas_algorithms_KernelPsf_swigConvert(boost::shared_ptr< lsst::daf::base::Persistable > const &ptr){
            return boost::dynamic_pointer_cast<lsst::meas::algorithms::KernelPsf >(ptr);
        }
SWIGINTERN boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > lsst_meas_algorithms_SingleGaussianPsf_swigConvert(boost::shared_ptr< lsst::daf::base::Persistable > const &ptr){
            return boost::dynamic_pointer_cast<lsst::meas::algorithms::SingleGaussianPsf >(ptr);
        }
SWIGINTERN boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > lsst_meas_algorithms_DoubleGaussianPsf_swigConvert(boost::shared_ptr< lsst::daf::base::Persistable > const &ptr){
            return boost::dynamic_pointer_cast<lsst::meas::algorithms::DoubleGaussianPsf >(ptr);
        }
SWIGINTERN boost::shared_ptr< lsst::meas::algorithms::PcaPsf > lsst_meas_algorithms_PcaPsf_swigConvert(boost::shared_ptr< lsst::daf::base::Persistable > const &ptr){
            return boost::dynamic_pointer_cast<lsst::meas::algorithms::PcaPsf >(ptr);
        }

#include "lsst/meas/algorithms/WarpedPsf.h"


#include "lsst/afw/math/Kernel.h"
#include "lsst/meas/algorithms/CoaddPsf.h"

SWIGINTERN boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > lsst_meas_algorithms_CoaddPsf_swigConvert(boost::shared_ptr< lsst::daf::base::Persistable > const &ptr){
            return boost::dynamic_pointer_cast<lsst::meas::algorithms::CoaddPsf >(ptr);
        }

SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/home/felipe/work/LSSTstack/lsst.rhel6.x86_64/Linux64/external/swig/2.0.4+3/share/swig/2.0.4/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  namespace swig {
    template <>  struct traits<boost::shared_ptr<lsst::afw::detection::Footprint> > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr<lsst::afw::detection::Footprint>"; }
    };
  }


                namespace swig {
                    template <>  struct traits<std::vector<boost::shared_ptr<lsst::afw::detection::Footprint>, std::allocator< boost::shared_ptr< lsst::afw::detection::Footprint > > > > {
                        typedef pointer_category category;
                        static const char* type_name() {
                            return "std::vector<""boost::shared_ptr<lsst::afw::detection::Footprint>" " >";
                        }
                    };
                }
            

  namespace swig {
    template <>  struct traits<boost::shared_ptr< lsst::meas::algorithms::Defect > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< lsst::meas::algorithms::Defect >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >, std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< lsst::meas::algorithms::Defect >" "," "std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg__iterator(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____nonzero__(std::vector< lsst::meas::algorithms::Defect::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____bool__(std::vector< lsst::meas::algorithms::Defect::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____len__(std::vector< lsst::meas::algorithms::Defect::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg__pop(std::vector< lsst::meas::algorithms::Defect::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____getslice__(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type i,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setslice____SWIG_0(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type i,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type j,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &v=std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____delslice__(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type i,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____delitem____SWIG_0(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____getitem____SWIG_0(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setitem____SWIG_0(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setitem____SWIG_1(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____delitem____SWIG_1(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____getitem____SWIG_1(std::vector< lsst::meas::algorithms::Defect::Ptr > const *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setitem____SWIG_2(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type i,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg__append(std::vector< lsst::meas::algorithms::Defect::Ptr > *self,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &x){
      self->push_back(x);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_register_callback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_flags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_flags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::flags() const\n"
    "    std::ios_base::flags(std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_setf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_setf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::setf(std::ios_base::fmtflags)\n"
    "    std::ios_base::setf(std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_unsetf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_precision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_precision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::precision() const\n"
    "    std::ios_base::precision(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_width",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::width() const\n"
    "    std::ios_base::width(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_sync_with_stdio",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_sync_with_stdio")) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_getloc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_xalloc")) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_iword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (long *) &(arg1)->iword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_pword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (void **) &(arg1)->pword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdstate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_clear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::clear(std::ios_base::iostate)\n"
    "    std::basic_ios< char >::clear()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_setstate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_good",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_eof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_bad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_exceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_exceptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::exceptions() const\n"
    "    std::basic_ios< char >::exceptions(std::ios_base::iostate)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_tie",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_tie",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::tie() const\n"
    "    std::basic_ios< char >::tie(std::basic_ostream< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdbuf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_rdbuf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::rdbuf() const\n"
    "    std::basic_ios< char >::rdbuf(std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_copyfmt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  result = (std::basic_ios< char > *) &(arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::fill() const\n"
    "    std::basic_ios< char >::fill(std::basic_ios< char >::char_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_narrow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_widen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<((void const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->put(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->flush();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_tellp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_seekp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_seekp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::pos_type)\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_gcount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::get()\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type &)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_getline",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_getline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_ignore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_ignore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::ignore(std::streamsize,std::basic_istream< char >::int_type)\n"
    "    std::basic_istream< char >::ignore(std::streamsize)\n"
    "    std::basic_istream< char >::ignore()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_peek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->read(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_readsome",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_putback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->putback(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_unget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->unget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_sync",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_tellg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_seekg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_seekg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::pos_type)\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:endl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PsfAttributes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::detection::Psf const > arg1 ;
  int arg2 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::PsfAttributes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PsfAttributes",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PsfAttributes" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::detection::Psf const >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PsfAttributes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PsfAttributes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (lsst::meas::algorithms::PsfAttributes *)new lsst::meas::algorithms::PsfAttributes(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PsfAttributes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::detection::Psf const > arg1 ;
  lsst::afw::geom::Point2I *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::PsfAttributes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PsfAttributes",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PsfAttributes" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::detection::Psf const >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1);
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PsfAttributes" "', argument " "2"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PsfAttributes" "', argument " "2"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Point2I * >(argp2);
  {
    try {
      result = (lsst::meas::algorithms::PsfAttributes *)new lsst::meas::algorithms::PsfAttributes(arg1,(lsst::afw::geom::Point2I const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PsfAttributes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PsfAttributes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PsfAttributes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PsfAttributes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::PsfAttributes::PsfAttributes(boost::shared_ptr< lsst::afw::detection::Psf const >,int const,int const)\n"
    "    lsst::meas::algorithms::PsfAttributes::PsfAttributes(boost::shared_ptr< lsst::afw::detection::Psf const >,lsst::afw::geom::Point2I const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PsfAttributes_computeGaussianWidth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfAttributes *arg1 = (lsst::meas::algorithms::PsfAttributes *) 0 ;
  lsst::meas::algorithms::PsfAttributes::Method arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PsfAttributes_computeGaussianWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfAttributes_computeGaussianWidth" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfAttributes const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::PsfAttributes * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PsfAttributes_computeGaussianWidth" "', argument " "2"" of type '" "lsst::meas::algorithms::PsfAttributes::Method""'");
  } 
  arg2 = static_cast< lsst::meas::algorithms::PsfAttributes::Method >(val2);
  {
    try {
      result = (double)((lsst::meas::algorithms::PsfAttributes const *)arg1)->computeGaussianWidth(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfAttributes_computeGaussianWidth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfAttributes *arg1 = (lsst::meas::algorithms::PsfAttributes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfAttributes_computeGaussianWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfAttributes_computeGaussianWidth" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfAttributes const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::PsfAttributes * >(argp1);
  {
    try {
      result = (double)((lsst::meas::algorithms::PsfAttributes const *)arg1)->computeGaussianWidth();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfAttributes_computeGaussianWidth(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PsfAttributes_computeGaussianWidth__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PsfAttributes_computeGaussianWidth__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PsfAttributes_computeGaussianWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::PsfAttributes::computeGaussianWidth(lsst::meas::algorithms::PsfAttributes::Method) const\n"
    "    lsst::meas::algorithms::PsfAttributes::computeGaussianWidth() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PsfAttributes_computeEffectiveArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfAttributes *arg1 = (lsst::meas::algorithms::PsfAttributes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfAttributes_computeEffectiveArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfAttributes_computeEffectiveArea" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfAttributes const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::PsfAttributes * >(argp1);
  {
    try {
      result = (double)((lsst::meas::algorithms::PsfAttributes const *)arg1)->computeEffectiveArea();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PsfAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfAttributes *arg1 = (lsst::meas::algorithms::PsfAttributes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PsfAttributes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PsfAttributes" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfAttributes *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::PsfAttributes * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PsfAttributes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__meas__algorithms__PsfAttributes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PsfCandidateF_getXCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getXCenter",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getXCenter" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (float)((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getXCenter();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getYCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getYCenter",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getYCenter" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (float)((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getYCenter();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PsfCandidateF__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::table::SourceRecord > *arg1 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared1 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::PsfCandidate< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PsfCandidateF",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PsfCandidateF" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::table::SourceRecord > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1) : &tempshared1;
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PsfCandidateF" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > * >(argp2);
  }
  {
    try {
      result = (lsst::meas::algorithms::PsfCandidate< float > *)new lsst::meas::algorithms::PsfCandidate< float >((boost::shared_ptr< lsst::afw::table::SourceRecord > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PsfCandidateF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::table::SourceRecord > *arg1 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared1 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::PsfCandidate< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_PsfCandidateF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PsfCandidateF" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::table::SourceRecord > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1) : &tempshared1;
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PsfCandidateF" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PsfCandidateF" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PsfCandidateF" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (lsst::meas::algorithms::PsfCandidate< float > *)new lsst::meas::algorithms::PsfCandidate< float >((boost::shared_ptr< lsst::afw::table::SourceRecord > const &)*arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PsfCandidateF(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PsfCandidateF__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_PsfCandidateF__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PsfCandidateF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::PsfCandidate< float >::PsfCandidate(boost::shared_ptr< lsst::afw::table::SourceRecord > const &,boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const >)\n"
    "    lsst::meas::algorithms::PsfCandidate< float >::PsfCandidate(boost::shared_ptr< lsst::afw::table::SourceRecord > const &,boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const >,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PsfCandidateF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PsfCandidateF",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PsfCandidateF" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getCandidateRating(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getCandidateRating",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getCandidateRating" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getCandidateRating();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getSource",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getSource" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getSource();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::SourceRecord > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::SourceRecord >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getAmplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getAmplitude",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getAmplitude" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getAmplitude();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_setAmplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PsfCandidateF_setAmplitude",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_setAmplitude" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PsfCandidateF_setAmplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmplitude(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getVar",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getVar" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getVar();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_setVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PsfCandidateF_setVar",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_setVar" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PsfCandidateF_setVar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVar(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getMaskedImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_getMaskedImage",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getMaskedImage" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getMaskedImage();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getMaskedImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PsfCandidateF_getMaskedImage",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getMaskedImage" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PsfCandidateF_getMaskedImage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PsfCandidateF_getMaskedImage" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getMaskedImage(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getMaskedImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PsfCandidateF_getMaskedImage__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PsfCandidateF_getMaskedImage__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PsfCandidateF_getMaskedImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::PsfCandidate< float >::getMaskedImage() const\n"
    "    lsst::meas::algorithms::PsfCandidate< float >::getMaskedImage(int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getOffsetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfCandidate< float > *arg1 = (lsst::meas::algorithms::PsfCandidate< float > *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > const > *smartarg1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PsfCandidateF_getOffsetImage",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PsfCandidateF_getOffsetImage" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfCandidate< float > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PsfCandidate<float> > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfCandidate< float > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PsfCandidateF_getOffsetImage" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PsfCandidateF_getOffsetImage" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((lsst::meas::algorithms::PsfCandidate< float > const *)arg1)->getOffsetImage(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > *smartresult = result ? new boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_getBorderWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PsfCandidateF_getBorderWidth")) SWIG_fail;
  {
    try {
      result = (int)lsst::meas::algorithms::PsfCandidate< float >::SWIGTEMPLATEDISAMBIGUATOR getBorderWidth();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PsfCandidateF_setBorderWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PsfCandidateF_setBorderWidth",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PsfCandidateF_setBorderWidth" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      lsst::meas::algorithms::PsfCandidate< float >::SWIGTEMPLATEDISAMBIGUATOR setBorderWidth(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PsfCandidateF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makePsfCandidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::table::SourceRecord > *arg1 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared1 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:makePsfCandidate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "makePsfCandidate" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::table::SourceRecord > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::afw::table::SourceRecord > * >(argp1) : &tempshared1;
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "makePsfCandidate" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > * >(argp2);
  }
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR makePsfCandidate< float >((boost::shared_ptr< lsst::afw::table::SourceRecord > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cast_PsfCandidateF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::math::SpatialCellCandidate > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cast_PsfCandidateF",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cast_PsfCandidateF" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::math::SpatialCellCandidate > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::SpatialCellCandidate > * >(argp1);
  }
  {
    try {
      result = cast_PsfCandidateF(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PsfCandidate<float> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Psf_vector_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pair_Psf_vector_double")) SWIG_fail;
  {
    try {
      result = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *)new std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Psf_vector_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > arg1 ;
  std::vector< double,std::allocator< double > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_pair_Psf_vector_double",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_Psf_vector_double" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp1);
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_pair_Psf_vector_double" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *)new std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Psf_vector_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pair_Psf_vector_double",&obj0)) SWIG_fail;
  {
    std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > *ptr = (std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_Psf_vector_double" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_Psf_vector_double" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *)new std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > >((std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Psf_vector_double(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pair_Psf_vector_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pair_Psf_vector_double__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_pair_Psf_vector_double__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pair_Psf_vector_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > >::pair()\n"
    "    std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > >::pair(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > >)\n"
    "    std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > >::pair(std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pair_Psf_vector_double_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *arg1 = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *) 0 ;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_Psf_vector_double_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Psf_vector_double_first_set" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_Psf_vector_double_first_set" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_Psf_vector_double_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *arg1 = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_Psf_vector_double_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Psf_vector_double_first_get" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > * >(argp1);
  result = (boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *) & ((arg1)->first);
  {
    boost::shared_ptr<  lsst::afw::math::LinearCombinationKernel > *smartresult = *result ? new boost::shared_ptr<  lsst::afw::math::LinearCombinationKernel >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_Psf_vector_double_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *arg1 = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_Psf_vector_double_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Psf_vector_double_second_set" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_Psf_vector_double_second_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_Psf_vector_double_second_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_Psf_vector_double_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *arg1 = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_Psf_vector_double_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Psf_vector_double_second_get" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > * >(argp1);
  result = (std::vector< double,std::allocator< double > > *) & ((arg1)->second);
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pair_Psf_vector_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *arg1 = (std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pair_Psf_vector_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_Psf_vector_double" "', argument " "1"" of type '" "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pair_Psf_vector_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pair_vector_double_KernelList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pair_vector_double_KernelList")) SWIG_fail;
  {
    try {
      result = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *)new std::pair< std::vector< double >,lsst::afw::math::KernelList >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_vector_double_KernelList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > arg1 ;
  std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_pair_vector_double_KernelList",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_pair_vector_double_KernelList" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_pair_vector_double_KernelList" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *)new std::pair< std::vector< double >,lsst::afw::math::KernelList >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_vector_double_KernelList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double,std::allocator< double > >,lsst::afw::math::KernelList > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pair_vector_double_KernelList",&obj0)) SWIG_fail;
  {
    std::pair<std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > *ptr = (std::pair<std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_vector_double_KernelList" "', argument " "1"" of type '" "std::pair< std::vector< double,std::allocator< double > >,lsst::afw::math::KernelList > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_vector_double_KernelList" "', argument " "1"" of type '" "std::pair< std::vector< double,std::allocator< double > >,lsst::afw::math::KernelList > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *)new std::pair< std::vector< double >,lsst::afw::math::KernelList >((std::pair< std::vector< double,std::allocator< double > >,lsst::afw::math::KernelList > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_vector_double_KernelList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pair_vector_double_KernelList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pair_vector_double_KernelList__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_pair_vector_double_KernelList__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pair_vector_double_KernelList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< std::vector< double >,lsst::afw::math::KernelList >::pair()\n"
    "    std::pair< std::vector< double >,lsst::afw::math::KernelList >::pair(std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > >)\n"
    "    std::pair< std::vector< double >,lsst::afw::math::KernelList >::pair(std::pair< std::vector< double,std::allocator< double > >,lsst::afw::math::KernelList > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pair_vector_double_KernelList_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *arg1 = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_vector_double_KernelList_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_vector_double_KernelList_first_set" "', argument " "1"" of type '" "std::pair< std::vector< double >,lsst::afw::math::KernelList > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::vector< double >,lsst::afw::math::KernelList > * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_vector_double_KernelList_first_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_vector_double_KernelList_first_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_vector_double_KernelList_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *arg1 = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_vector_double_KernelList_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_vector_double_KernelList_first_get" "', argument " "1"" of type '" "std::pair< std::vector< double >,lsst::afw::math::KernelList > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::vector< double >,lsst::afw::math::KernelList > * >(argp1);
  result = (std::vector< double,std::allocator< double > > *) & ((arg1)->first);
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_vector_double_KernelList_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *arg1 = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_vector_double_KernelList_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_vector_double_KernelList_second_set" "', argument " "1"" of type '" "std::pair< std::vector< double >,lsst::afw::math::KernelList > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::vector< double >,lsst::afw::math::KernelList > * >(argp1);
  {
    std::vector<boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_vector_double_KernelList_second_set" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_vector_double_KernelList_second_set" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_vector_double_KernelList_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *arg1 = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_vector_double_KernelList_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_vector_double_KernelList_second_get" "', argument " "1"" of type '" "std::pair< std::vector< double >,lsst::afw::math::KernelList > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::vector< double >,lsst::afw::math::KernelList > * >(argp1);
  result = (std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *) & ((arg1)->second);
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pair_vector_double_KernelList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::vector< double >,lsst::afw::math::KernelList > *arg1 = (std::pair< std::vector< double >,lsst::afw::math::KernelList > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pair_vector_double_KernelList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_vector_double_KernelList" "', argument " "1"" of type '" "std::pair< std::vector< double >,lsst::afw::math::KernelList > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::vector< double >,lsst::afw::math::KernelList > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pair_vector_double_KernelList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pair_bool_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pair_bool_double")) SWIG_fail;
  {
    try {
      result = (std::pair< bool,double > *)new std::pair< bool,double >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_bool_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  double arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< bool,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_pair_bool_double",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pair_bool_double" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_pair_bool_double" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (std::pair< bool,double > *)new std::pair< bool,double >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_bool_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< bool,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pair_bool_double",&obj0)) SWIG_fail;
  {
    std::pair<bool,double > *ptr = (std::pair<bool,double > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_bool_double" "', argument " "1"" of type '" "std::pair< bool,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_bool_double" "', argument " "1"" of type '" "std::pair< bool,double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::pair< bool,double > *)new std::pair< bool,double >((std::pair< bool,double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_bool_double(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pair_bool_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<bool,double >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pair_bool_double__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    _v = PyBool_Check(argv[0]) ? 1 : 0;
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_pair_bool_double__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pair_bool_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< bool,double >::pair()\n"
    "    std::pair< bool,double >::pair(bool,double)\n"
    "    std::pair< bool,double >::pair(std::pair< bool,double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pair_bool_double_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_bool_double_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_double_first_set" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pair_bool_double_first_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_bool_double_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_bool_double_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_double_first_get" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  result = (bool) ((arg1)->first);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_bool_double_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_bool_double_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_double_second_set" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pair_bool_double_second_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_bool_double_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_bool_double_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_double_second_get" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  result = (double) ((arg1)->second);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pair_bool_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pair_bool_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_bool_double" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pair_bool_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_bool_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pair_Kernel_double_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pair_Kernel_double_double")) SWIG_fail;
  {
    try {
      result = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *)new std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Kernel_double_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::math::Kernel > arg1 ;
  std::pair< double,double > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_pair_Kernel_double_double",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_Kernel_double_double" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::math::Kernel >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::math::Kernel > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::Kernel > * >(argp1);
  }
  {
    std::pair<double,double > *ptr = (std::pair<double,double > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_pair_Kernel_double_double" "', argument " "2"" of type '" "std::pair< double,double >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *)new std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Kernel_double_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pair_Kernel_double_double",&obj0)) SWIG_fail;
  {
    std::pair<boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double > > *ptr = (std::pair<boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_Kernel_double_double" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_Kernel_double_double" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *)new std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > >((std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_Kernel_double_double(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pair_Kernel_double_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pair_Kernel_double_double__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair<double,double >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_pair_Kernel_double_double__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pair_Kernel_double_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > >::pair()\n"
    "    std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > >::pair(boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double >)\n"
    "    std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > >::pair(std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pair_Kernel_double_double_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *arg1 = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *) 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_Kernel_double_double_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Kernel_double_double_first_set" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_Kernel_double_double_first_set" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::math::Kernel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< boost::shared_ptr< lsst::afw::math::Kernel > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::Kernel > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< boost::shared_ptr< lsst::afw::math::Kernel > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_Kernel_double_double_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *arg1 = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_Kernel_double_double_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Kernel_double_double_first_get" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > * >(argp1);
  result = (boost::shared_ptr< lsst::afw::math::Kernel > *) & ((arg1)->first);
  {
    boost::shared_ptr<  lsst::afw::math::Kernel > *smartresult = *result ? new boost::shared_ptr<  lsst::afw::math::Kernel >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_Kernel_double_double_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *arg1 = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *) 0 ;
  std::pair< double,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_Kernel_double_double_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Kernel_double_double_second_set" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > * >(argp1);
  {
    std::pair<double,double > *ptr = (std::pair<double,double > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_Kernel_double_double_second_set" "', argument " "2"" of type '" "std::pair< double,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_Kernel_double_double_second_set" "', argument " "2"" of type '" "std::pair< double,double > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_Kernel_double_double_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *arg1 = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::pair< double,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_Kernel_double_double_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_Kernel_double_double_second_get" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > * >(argp1);
  result = (std::pair< double,double > *) & ((arg1)->second);
  resultobj = swig::from(static_cast< std::pair<double,double > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pair_Kernel_double_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *arg1 = (std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pair_Kernel_double_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_Kernel_double_double" "', argument " "1"" of type '" "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pair_Kernel_double_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_createKernelFromPsfCandidates__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::SpatialCellSet *arg1 = 0 ;
  lsst::afw::geom::Extent2I *arg2 = 0 ;
  lsst::afw::geom::Point2I *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:createKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Extent2I * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::afw::geom::Point2I * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createKernelFromPsfCandidates" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "createKernelFromPsfCandidates" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "createKernelFromPsfCandidates" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "createKernelFromPsfCandidates" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "createKernelFromPsfCandidates" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR createKernelFromPsfCandidates< float >((lsst::afw::math::SpatialCellSet const &)*arg1,(lsst::afw::geom::Extent< int,2 > const &)*arg2,(lsst::afw::geom::Point< int,2 > const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_createKernelFromPsfCandidates__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::SpatialCellSet *arg1 = 0 ;
  lsst::afw::geom::Extent2I *arg2 = 0 ;
  lsst::afw::geom::Point2I *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:createKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Extent2I * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::afw::geom::Point2I * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createKernelFromPsfCandidates" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "createKernelFromPsfCandidates" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "createKernelFromPsfCandidates" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "createKernelFromPsfCandidates" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR createKernelFromPsfCandidates< float >((lsst::afw::math::SpatialCellSet const &)*arg1,(lsst::afw::geom::Extent< int,2 > const &)*arg2,(lsst::afw::geom::Point< int,2 > const &)*arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_createKernelFromPsfCandidates__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::SpatialCellSet *arg1 = 0 ;
  lsst::afw::geom::Extent2I *arg2 = 0 ;
  lsst::afw::geom::Point2I *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:createKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Extent2I * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::afw::geom::Point2I * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createKernelFromPsfCandidates" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "createKernelFromPsfCandidates" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "createKernelFromPsfCandidates" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR createKernelFromPsfCandidates< float >((lsst::afw::math::SpatialCellSet const &)*arg1,(lsst::afw::geom::Extent< int,2 > const &)*arg2,(lsst::afw::geom::Point< int,2 > const &)*arg3,arg4,arg5,arg6,arg7);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_createKernelFromPsfCandidates__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::SpatialCellSet *arg1 = 0 ;
  lsst::afw::geom::Extent2I *arg2 = 0 ;
  lsst::afw::geom::Point2I *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:createKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::geom::Extent2I const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Extent2I * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createKernelFromPsfCandidates" "', argument " "3"" of type '" "lsst::afw::geom::Point2I const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::afw::geom::Point2I * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createKernelFromPsfCandidates" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "createKernelFromPsfCandidates" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR createKernelFromPsfCandidates< float >((lsst::afw::math::SpatialCellSet const &)*arg1,(lsst::afw::geom::Extent< int,2 > const &)*arg2,(lsst::afw::geom::Point< int,2 > const &)*arg3,arg4,arg5,arg6);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_createKernelFromPsfCandidates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_createKernelFromPsfCandidates__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_createKernelFromPsfCandidates__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  _v = PyBool_Check(argv[7]) ? 1 : 0;
                  if (_v) {
                    return _wrap_createKernelFromPsfCandidates__SWIG_5(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  _v = PyBool_Check(argv[7]) ? 1 : 0;
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_createKernelFromPsfCandidates__SWIG_4(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'createKernelFromPsfCandidates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::createKernelFromPsfCandidates< float >(lsst::afw::math::SpatialCellSet const &,lsst::afw::geom::Extent2I const &,lsst::afw::geom::Point2I const &,int const,int const,int const,int const,bool const,int const)\n"
    "    lsst::meas::algorithms::createKernelFromPsfCandidates< float >(lsst::afw::math::SpatialCellSet const &,lsst::afw::geom::Extent2I const &,lsst::afw::geom::Point2I const &,int const,int const,int const,int const,bool const)\n"
    "    lsst::meas::algorithms::createKernelFromPsfCandidates< float >(lsst::afw::math::SpatialCellSet const &,lsst::afw::geom::Extent2I const &,lsst::afw::geom::Point2I const &,int const,int const,int const,int const)\n"
    "    lsst::meas::algorithms::createKernelFromPsfCandidates< float >(lsst::afw::math::SpatialCellSet const &,lsst::afw::geom::Extent2I const &,lsst::afw::geom::Point2I const &,int const,int const,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3,arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3,arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = (lsst::afw::math::Kernel *) 0 ;
  lsst::afw::math::SpatialCellSet *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel > tempshared1 ;
  boost::shared_ptr< lsst::afw::math::Kernel > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::pair< bool,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fitSpatialKernelFromPsfCandidates",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::Kernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "2"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitSpatialKernelFromPsfCandidates" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitSpatialKernelFromPsfCandidates< float >(arg1,(lsst::afw::math::SpatialCellSet const &)*arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<bool,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitSpatialKernelFromPsfCandidates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_15(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_14(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_13(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fitSpatialKernelFromPsfCandidates__SWIG_12(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fitSpatialKernelFromPsfCandidates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,int const,double const,double const)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,int const,double const)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,int const)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,bool const,int const,double const,double const)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,bool const,int const,double const)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,bool const,int const)\n"
    "    lsst::meas::algorithms::fitSpatialKernelFromPsfCandidates< float >(lsst::afw::math::Kernel *,lsst::afw::math::SpatialCellSet const &,bool const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_countPsfCandidates__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::SpatialCellSet *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:countPsfCandidates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "countPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "countPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "countPsfCandidates" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR countPsfCandidates< float >((lsst::afw::math::SpatialCellSet const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_countPsfCandidates__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::SpatialCellSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:countPsfCandidates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__math__SpatialCellSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "countPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "countPsfCandidates" "', argument " "1"" of type '" "lsst::afw::math::SpatialCellSet const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::math::SpatialCellSet * >(argp1);
  {
    try {
      result = (int)lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR countPsfCandidates< float >((lsst::afw::math::SpatialCellSet const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_countPsfCandidates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_countPsfCandidates__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__math__SpatialCellSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_countPsfCandidates__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'countPsfCandidates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::countPsfCandidates< float >(lsst::afw::math::SpatialCellSet const &,int const)\n"
    "    lsst::meas::algorithms::countPsfCandidates< float >(lsst::afw::math::SpatialCellSet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_subtractPsf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::detection::Psf *arg1 = 0 ;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg2 = (lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > tempshared2 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *smartarg2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:subtractPsf",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subtractPsf" "', argument " "1"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "subtractPsf" "', argument " "1"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp1);
      arg1 = const_cast< lsst::afw::detection::Psf * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::detection::Psf * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "subtractPsf" "', argument " "2"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared2.get());
    } else {
      smartarg2 = reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >((smartarg2 ? smartarg2->get() : 0));
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "subtractPsf" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "subtractPsf" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "subtractPsf" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR subtractPsf< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >((lsst::afw::detection::Psf const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_subtractPsf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::detection::Psf *arg1 = 0 ;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg2 = (lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > tempshared2 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *smartarg2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:subtractPsf",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subtractPsf" "', argument " "1"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "subtractPsf" "', argument " "1"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp1);
      arg1 = const_cast< lsst::afw::detection::Psf * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::detection::Psf * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "subtractPsf" "', argument " "2"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared2.get());
    } else {
      smartarg2 = reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >((smartarg2 ? smartarg2->get() : 0));
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "subtractPsf" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "subtractPsf" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR subtractPsf< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >((lsst::afw::detection::Psf const &)*arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_subtractPsf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_subtractPsf__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_subtractPsf__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'subtractPsf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::subtractPsf< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(lsst::afw::detection::Psf const &,lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *,double,double,double)\n"
    "    lsst::meas::algorithms::subtractPsf< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(lsst::afw::detection::Psf const &,lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fitKernelParamsToImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::LinearCombinationKernel *arg1 = 0 ;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg2 = 0 ;
  lsst::afw::geom::Point2D *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::pair< std::vector< double,std::allocator< double > >,lsst::afw::math::KernelList > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fitKernelParamsToImage",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitKernelParamsToImage" "', argument " "1"" of type '" "lsst::afw::math::LinearCombinationKernel const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitKernelParamsToImage" "', argument " "1"" of type '" "lsst::afw::math::LinearCombinationKernel const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::LinearCombinationKernel * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::math::LinearCombinationKernel * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitKernelParamsToImage" "', argument " "2"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitKernelParamsToImage" "', argument " "2"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitKernelParamsToImage" "', argument " "3"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitKernelParamsToImage" "', argument " "3"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp3);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitKernelParamsToImage< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >((lsst::afw::math::LinearCombinationKernel const &)*arg1,(lsst::afw::image::MaskedImage< float,unsigned short,float > const &)*arg2,(lsst::afw::geom::Point< double,2 > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fitKernelToImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::LinearCombinationKernel *arg1 = 0 ;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg2 = 0 ;
  lsst::afw::geom::Point2D *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fitKernelToImage",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitKernelToImage" "', argument " "1"" of type '" "lsst::afw::math::LinearCombinationKernel const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitKernelToImage" "', argument " "1"" of type '" "lsst::afw::math::LinearCombinationKernel const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::LinearCombinationKernel * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::math::LinearCombinationKernel * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitKernelToImage" "', argument " "2"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitKernelToImage" "', argument " "2"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitKernelToImage" "', argument " "3"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitKernelToImage" "', argument " "3"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp3);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR fitKernelToImage< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >((lsst::afw::math::LinearCombinationKernel const &)*arg1,(lsst::afw::image::MaskedImage< float,unsigned short,float > const &)*arg2,(lsst::afw::geom::Point< double,2 > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImagePsfPersistableFacade_readFits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImagePsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ImagePsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImagePsfPersistableFacade_readFits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImagePsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ImagePsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImagePsfPersistableFacade_readFits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImagePsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ImagePsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImagePsfPersistableFacade_readFits__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImagePsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImagePsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ImagePsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImagePsfPersistableFacade_readFits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ImagePsfPersistableFacade_readFits__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ImagePsfPersistableFacade_readFits__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImagePsfPersistableFacade_readFits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImagePsfPersistableFacade_readFits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImagePsfPersistableFacade_readFits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::readFits(std::string const &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::readFits(std::string const &)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::readFits(lsst::afw::fits::MemFileManager &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >::readFits(lsst::afw::fits::MemFileManager &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ImagePsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImagePsfPersistableFacade")) SWIG_fail;
  {
    try {
      result = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *)new lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImagePsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *arg1 = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > tempshared1 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImagePsfPersistableFacade",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImagePsfPersistableFacade" "', argument " "1"" of type '" "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImagePsfPersistableFacade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_KernelPsfPersistableFacade_readFits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KernelPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsfPersistableFacade_readFits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsfPersistableFacade_readFits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KernelPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsfPersistableFacade_readFits__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KernelPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsfPersistableFacade_readFits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KernelPsfPersistableFacade_readFits__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KernelPsfPersistableFacade_readFits__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KernelPsfPersistableFacade_readFits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KernelPsfPersistableFacade_readFits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KernelPsfPersistableFacade_readFits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::readFits(std::string const &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::readFits(std::string const &)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::readFits(lsst::afw::fits::MemFileManager &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >::readFits(lsst::afw::fits::MemFileManager &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_KernelPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KernelPsfPersistableFacade")) SWIG_fail;
  {
    try {
      result = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *)new lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KernelPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *arg1 = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > tempshared1 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KernelPsfPersistableFacade",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KernelPsfPersistableFacade" "', argument " "1"" of type '" "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KernelPsfPersistableFacade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SingleGaussianPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SingleGaussianPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SingleGaussianPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SingleGaussianPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SingleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsfPersistableFacade_readFits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SingleGaussianPsfPersistableFacade_readFits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SingleGaussianPsfPersistableFacade_readFits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::readFits(std::string const &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::readFits(std::string const &)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::readFits(lsst::afw::fits::MemFileManager &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >::readFits(lsst::afw::fits::MemFileManager &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SingleGaussianPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SingleGaussianPsfPersistableFacade")) SWIG_fail;
  {
    try {
      result = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *)new lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SingleGaussianPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *arg1 = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > tempshared1 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SingleGaussianPsfPersistableFacade",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SingleGaussianPsfPersistableFacade" "', argument " "1"" of type '" "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SingleGaussianPsfPersistableFacade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleGaussianPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleGaussianPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleGaussianPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsfPersistableFacade_readFits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleGaussianPsfPersistableFacade_readFits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleGaussianPsfPersistableFacade_readFits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::readFits(std::string const &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::readFits(std::string const &)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::readFits(lsst::afw::fits::MemFileManager &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >::readFits(lsst::afw::fits::MemFileManager &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DoubleGaussianPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoubleGaussianPsfPersistableFacade")) SWIG_fail;
  {
    try {
      result = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *)new lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleGaussianPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *arg1 = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > tempshared1 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleGaussianPsfPersistableFacade",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleGaussianPsfPersistableFacade" "', argument " "1"" of type '" "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleGaussianPsfPersistableFacade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PcaPsfPersistableFacade_readFits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PcaPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PcaPsfPersistableFacade_readFits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PcaPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PcaPsfPersistableFacade_readFits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PcaPsfPersistableFacade_readFits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PcaPsfPersistableFacade_readFits__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::fits::MemFileManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PcaPsfPersistableFacade_readFits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__fits__MemFileManager,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PcaPsfPersistableFacade_readFits" "', argument " "1"" of type '" "lsst::afw::fits::MemFileManager &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::fits::MemFileManager * >(argp1);
  {
    try {
      result = lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::SWIGTEMPLATEDISAMBIGUATOR readFits(*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PcaPsfPersistableFacade_readFits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PcaPsfPersistableFacade_readFits__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PcaPsfPersistableFacade_readFits__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__fits__MemFileManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PcaPsfPersistableFacade_readFits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PcaPsfPersistableFacade_readFits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PcaPsfPersistableFacade_readFits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::readFits(std::string const &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::readFits(std::string const &)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::readFits(lsst::afw::fits::MemFileManager &,int)\n"
    "    lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >::readFits(lsst::afw::fits::MemFileManager &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PcaPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PcaPsfPersistableFacade")) SWIG_fail;
  {
    try {
      result = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *)new lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PcaPsfPersistableFacade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *arg1 = (lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > tempshared1 ;
  boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PcaPsfPersistableFacade",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PcaPsfPersistableFacade" "', argument " "1"" of type '" "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > * >(argp1);
      arg1 = const_cast< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PcaPsfPersistableFacade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ImagePsf_swigConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::daf::base::Persistable > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::daf::base::Persistable > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImagePsf_swigConvert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImagePsf_swigConvert" "', argument " "1"" of type '" "boost::shared_ptr< lsst::daf::base::Persistable > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_meas_algorithms_ImagePsf_swigConvert((boost::shared_ptr< lsst::daf::base::Persistable > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ImagePsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImagePsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ImagePsf *arg1 = (lsst::meas::algorithms::ImagePsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImagePsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImagePsf" "', argument " "1"" of type '" "lsst::meas::algorithms::ImagePsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ImagePsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ImagePsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ImagePsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImagePsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KernelPsf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = 0 ;
  lsst::afw::geom::Point2D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::KernelPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KernelPsf",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KernelPsf" "', argument " "1"" of type '" "lsst::afw::math::Kernel const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KernelPsf" "', argument " "1"" of type '" "lsst::afw::math::Kernel const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::math::Kernel * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::math::Kernel > * >(argp1)->get());
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KernelPsf" "', argument " "2"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KernelPsf" "', argument " "2"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp2);
  {
    try {
      result = (lsst::meas::algorithms::KernelPsf *)new lsst::meas::algorithms::KernelPsf((lsst::afw::math::Kernel const &)*arg1,(lsst::afw::geom::Point2D const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KernelPsf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::math::Kernel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::KernelPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KernelPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KernelPsf" "', argument " "1"" of type '" "lsst::afw::math::Kernel const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KernelPsf" "', argument " "1"" of type '" "lsst::afw::math::Kernel const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::math::Kernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::math::Kernel > * >(argp1);
      arg1 = const_cast< lsst::afw::math::Kernel * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::math::Kernel * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::math::Kernel > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::KernelPsf *)new lsst::meas::algorithms::KernelPsf((lsst::afw::math::Kernel const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KernelPsf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KernelPsf__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_KernelPsf__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KernelPsf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::KernelPsf::KernelPsf(lsst::afw::math::Kernel const &,lsst::afw::geom::Point2D const &)\n"
    "    lsst::meas::algorithms::KernelPsf::KernelPsf(lsst::afw::math::Kernel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KernelPsf_getKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::KernelPsf *arg1 = (lsst::meas::algorithms::KernelPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::math::Kernel const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsf_getKernel",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsf_getKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::KernelPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::KernelPsf const *)arg1)->getKernel();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::math::Kernel > *smartresult = result ? new boost::shared_ptr< const lsst::afw::math::Kernel >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsf_getAveragePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::KernelPsf *arg1 = (lsst::meas::algorithms::KernelPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::Point2D result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsf_getAveragePosition",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsf_getAveragePosition" "', argument " "1"" of type '" "lsst::meas::algorithms::KernelPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::KernelPsf const *)arg1)->getAveragePosition();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::Point2D(static_cast< const lsst::afw::geom::Point2D& >(result))), SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsf_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::KernelPsf *arg1 = (lsst::meas::algorithms::KernelPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsf_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsf_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::KernelPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::KernelPsf const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr<  lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsf_isPersistable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::KernelPsf *arg1 = (lsst::meas::algorithms::KernelPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsf_isPersistable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsf_isPersistable" "', argument " "1"" of type '" "lsst::meas::algorithms::KernelPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((lsst::meas::algorithms::KernelPsf const *)arg1)->isPersistable();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KernelPsf_swigConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::daf::base::Persistable > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::daf::base::Persistable > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KernelPsf_swigConvert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KernelPsf_swigConvert" "', argument " "1"" of type '" "boost::shared_ptr< lsst::daf::base::Persistable > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_meas_algorithms_KernelPsf_swigConvert((boost::shared_ptr< lsst::daf::base::Persistable > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::KernelPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KernelPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::KernelPsf *arg1 = (lsst::meas::algorithms::KernelPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KernelPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KernelPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::KernelPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::KernelPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::KernelPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KernelPsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SingleGaussianPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::SingleGaussianPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SingleGaussianPsf",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SingleGaussianPsf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SingleGaussianPsf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SingleGaussianPsf" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::meas::algorithms::SingleGaussianPsf *)new lsst::meas::algorithms::SingleGaussianPsf(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsf_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SingleGaussianPsf *arg1 = (lsst::meas::algorithms::SingleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SingleGaussianPsf_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsf_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::SingleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::SingleGaussianPsf const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr<  lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsf_getSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SingleGaussianPsf *arg1 = (lsst::meas::algorithms::SingleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SingleGaussianPsf_getSigma",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsf_getSigma" "', argument " "1"" of type '" "lsst::meas::algorithms::SingleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::SingleGaussianPsf const *)arg1)->getSigma();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsf_isPersistable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SingleGaussianPsf *arg1 = (lsst::meas::algorithms::SingleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SingleGaussianPsf_isPersistable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsf_isPersistable" "', argument " "1"" of type '" "lsst::meas::algorithms::SingleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((lsst::meas::algorithms::SingleGaussianPsf const *)arg1)->isPersistable();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingleGaussianPsf_swigConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::daf::base::Persistable > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::daf::base::Persistable > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SingleGaussianPsf_swigConvert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingleGaussianPsf_swigConvert" "', argument " "1"" of type '" "boost::shared_ptr< lsst::daf::base::Persistable > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_meas_algorithms_SingleGaussianPsf_swigConvert((boost::shared_ptr< lsst::daf::base::Persistable > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SingleGaussianPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SingleGaussianPsf *arg1 = (lsst::meas::algorithms::SingleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SingleGaussianPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SingleGaussianPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::SingleGaussianPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SingleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SingleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SingleGaussianPsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DoubleGaussianPsf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  lsst::meas::algorithms::DoubleGaussianPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DoubleGaussianPsf",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleGaussianPsf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleGaussianPsf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DoubleGaussianPsf" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DoubleGaussianPsf" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DoubleGaussianPsf" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (lsst::meas::algorithms::DoubleGaussianPsf *)new lsst::meas::algorithms::DoubleGaussianPsf(arg1,arg2,arg3,arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleGaussianPsf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::DoubleGaussianPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DoubleGaussianPsf",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleGaussianPsf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleGaussianPsf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DoubleGaussianPsf" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DoubleGaussianPsf" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (lsst::meas::algorithms::DoubleGaussianPsf *)new lsst::meas::algorithms::DoubleGaussianPsf(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleGaussianPsf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::DoubleGaussianPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DoubleGaussianPsf",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleGaussianPsf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleGaussianPsf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DoubleGaussianPsf" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::meas::algorithms::DoubleGaussianPsf *)new lsst::meas::algorithms::DoubleGaussianPsf(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleGaussianPsf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DoubleGaussianPsf__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DoubleGaussianPsf__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DoubleGaussianPsf__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DoubleGaussianPsf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::DoubleGaussianPsf::DoubleGaussianPsf(int,int,double,double,double)\n"
    "    lsst::meas::algorithms::DoubleGaussianPsf::DoubleGaussianPsf(int,int,double,double)\n"
    "    lsst::meas::algorithms::DoubleGaussianPsf::DoubleGaussianPsf(int,int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsf_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::DoubleGaussianPsf *arg1 = (lsst::meas::algorithms::DoubleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsf_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsf_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::DoubleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::DoubleGaussianPsf const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr<  lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsf_getSigma1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::DoubleGaussianPsf *arg1 = (lsst::meas::algorithms::DoubleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsf_getSigma1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsf_getSigma1" "', argument " "1"" of type '" "lsst::meas::algorithms::DoubleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::DoubleGaussianPsf const *)arg1)->getSigma1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsf_getSigma2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::DoubleGaussianPsf *arg1 = (lsst::meas::algorithms::DoubleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsf_getSigma2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsf_getSigma2" "', argument " "1"" of type '" "lsst::meas::algorithms::DoubleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::DoubleGaussianPsf const *)arg1)->getSigma2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsf_getB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::DoubleGaussianPsf *arg1 = (lsst::meas::algorithms::DoubleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsf_getB",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsf_getB" "', argument " "1"" of type '" "lsst::meas::algorithms::DoubleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::DoubleGaussianPsf const *)arg1)->getB();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsf_isPersistable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::DoubleGaussianPsf *arg1 = (lsst::meas::algorithms::DoubleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsf_isPersistable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsf_isPersistable" "', argument " "1"" of type '" "lsst::meas::algorithms::DoubleGaussianPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((lsst::meas::algorithms::DoubleGaussianPsf const *)arg1)->isPersistable();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGaussianPsf_swigConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::daf::base::Persistable > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::daf::base::Persistable > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleGaussianPsf_swigConvert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleGaussianPsf_swigConvert" "', argument " "1"" of type '" "boost::shared_ptr< lsst::daf::base::Persistable > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_meas_algorithms_DoubleGaussianPsf_swigConvert((boost::shared_ptr< lsst::daf::base::Persistable > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleGaussianPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::DoubleGaussianPsf *arg1 = (lsst::meas::algorithms::DoubleGaussianPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleGaussianPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleGaussianPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::DoubleGaussianPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::DoubleGaussianPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::DoubleGaussianPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleGaussianPsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PcaPsf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > arg1 ;
  lsst::afw::geom::Point2D *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::PcaPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PcaPsf",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PcaPsf" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp1);
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PcaPsf" "', argument " "2"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PcaPsf" "', argument " "2"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp2);
  {
    try {
      result = (lsst::meas::algorithms::PcaPsf *)new lsst::meas::algorithms::PcaPsf(arg1,(lsst::afw::geom::Point2D const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PcaPsf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::PcaPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PcaPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PcaPsf" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > * >(argp1);
  }
  {
    try {
      result = (lsst::meas::algorithms::PcaPsf *)new lsst::meas::algorithms::PcaPsf(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PcaPsf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PcaPsf__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PcaPsf__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PcaPsf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::PcaPsf::PcaPsf(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,lsst::afw::geom::Point2D const &)\n"
    "    lsst::meas::algorithms::PcaPsf::PcaPsf(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PcaPsf_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PcaPsf *arg1 = (lsst::meas::algorithms::PcaPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PcaPsf_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsf_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::PcaPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PcaPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PcaPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PcaPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PcaPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PcaPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::PcaPsf const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr<  lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PcaPsf_getKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PcaPsf *arg1 = (lsst::meas::algorithms::PcaPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::math::LinearCombinationKernel const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PcaPsf_getKernel",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsf_getKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::PcaPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PcaPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PcaPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PcaPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PcaPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PcaPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::PcaPsf const *)arg1)->getKernel();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel > *smartresult = result ? new boost::shared_ptr< const lsst::afw::math::LinearCombinationKernel >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PcaPsf_swigConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::daf::base::Persistable > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::daf::base::Persistable > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PcaPsf_swigConvert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PcaPsf_swigConvert" "', argument " "1"" of type '" "boost::shared_ptr< lsst::daf::base::Persistable > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_meas_algorithms_PcaPsf_swigConvert((boost::shared_ptr< lsst::daf::base::Persistable > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PcaPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PcaPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PcaPsf *arg1 = (lsst::meas::algorithms::PcaPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PcaPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PcaPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::PcaPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PcaPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PcaPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PcaPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PcaPsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WarpedPsf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::detection::Psf const > arg1 ;
  boost::shared_ptr< lsst::afw::geom::XYTransform const > arg2 ;
  SwigValueWrapper< boost::shared_ptr< lsst::afw::math::WarpingControl const > > arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::WarpedPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_WarpedPsf",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpedPsf" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::detection::Psf const >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_WarpedPsf" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::geom::XYTransform const >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2);
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_WarpedPsf" "', argument " "3"" of type '" "boost::shared_ptr< lsst::afw::math::WarpingControl const >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WarpedPsf" "', argument " "3"" of type '" "boost::shared_ptr< lsst::afw::math::WarpingControl const >""'");
    } else {
      boost::shared_ptr< lsst::afw::math::WarpingControl const > * temp = reinterpret_cast< boost::shared_ptr< lsst::afw::math::WarpingControl const > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::WarpedPsf *)new lsst::meas::algorithms::WarpedPsf(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WarpedPsf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::detection::Psf const > arg1 ;
  boost::shared_ptr< lsst::afw::geom::XYTransform const > arg2 ;
  std::string *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::WarpedPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_WarpedPsf",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpedPsf" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::detection::Psf const >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_WarpedPsf" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::geom::XYTransform const >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2);
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_WarpedPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WarpedPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WarpedPsf" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (lsst::meas::algorithms::WarpedPsf *)new lsst::meas::algorithms::WarpedPsf(arg1,arg2,(std::string const &)*arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WarpedPsf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::detection::Psf const > arg1 ;
  boost::shared_ptr< lsst::afw::geom::XYTransform const > arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::WarpedPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_WarpedPsf",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpedPsf" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::detection::Psf const >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_WarpedPsf" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::geom::XYTransform const >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2);
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_WarpedPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WarpedPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (lsst::meas::algorithms::WarpedPsf *)new lsst::meas::algorithms::WarpedPsf(arg1,arg2,(std::string const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WarpedPsf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::detection::Psf const > arg1 ;
  boost::shared_ptr< lsst::afw::geom::XYTransform const > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::WarpedPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_WarpedPsf",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpedPsf" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::detection::Psf const >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::detection::Psf const > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_WarpedPsf" "', argument " "2"" of type '" "boost::shared_ptr< lsst::afw::geom::XYTransform const >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::XYTransform const > * >(argp2);
  }
  {
    try {
      result = (lsst::meas::algorithms::WarpedPsf *)new lsst::meas::algorithms::WarpedPsf(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WarpedPsf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_WarpedPsf__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_WarpedPsf__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_WarpedPsf__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_WarpedPsf__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WarpedPsf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::WarpedPsf::WarpedPsf(boost::shared_ptr< lsst::afw::detection::Psf const >,boost::shared_ptr< lsst::afw::geom::XYTransform const >,boost::shared_ptr< lsst::afw::math::WarpingControl const >)\n"
    "    lsst::meas::algorithms::WarpedPsf::WarpedPsf(boost::shared_ptr< lsst::afw::detection::Psf const >,boost::shared_ptr< lsst::afw::geom::XYTransform const >,std::string const &,unsigned int)\n"
    "    lsst::meas::algorithms::WarpedPsf::WarpedPsf(boost::shared_ptr< lsst::afw::detection::Psf const >,boost::shared_ptr< lsst::afw::geom::XYTransform const >,std::string const &)\n"
    "    lsst::meas::algorithms::WarpedPsf::WarpedPsf(boost::shared_ptr< lsst::afw::detection::Psf const >,boost::shared_ptr< lsst::afw::geom::XYTransform const >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WarpedPsf_getAveragePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::WarpedPsf *arg1 = (lsst::meas::algorithms::WarpedPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::WarpedPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::WarpedPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::Point2D result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedPsf_getAveragePosition",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedPsf_getAveragePosition" "', argument " "1"" of type '" "lsst::meas::algorithms::WarpedPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::WarpedPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::WarpedPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::WarpedPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::WarpedPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::WarpedPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::WarpedPsf const *)arg1)->getAveragePosition();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::Point2D(static_cast< const lsst::afw::geom::Point2D& >(result))), SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedPsf_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::WarpedPsf *arg1 = (lsst::meas::algorithms::WarpedPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::WarpedPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::WarpedPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedPsf_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedPsf_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::WarpedPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::WarpedPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::WarpedPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::WarpedPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::WarpedPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::WarpedPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::WarpedPsf const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr<  lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WarpedPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::WarpedPsf *arg1 = (lsst::meas::algorithms::WarpedPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WarpedPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WarpedPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::WarpedPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::WarpedPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::WarpedPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::WarpedPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WarpedPsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CoaddPsf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::ExposureCatalog *arg1 = 0 ;
  lsst::afw::image::Wcs *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > tempshared2 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  lsst::meas::algorithms::CoaddPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_CoaddPsf",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::table::ExposureCatalog * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      arg2 = const_cast< lsst::afw::image::Wcs * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::image::Wcs * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2)->get());
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CoaddPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CoaddPsf" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CoaddPsf" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (lsst::meas::algorithms::CoaddPsf *)new lsst::meas::algorithms::CoaddPsf((lsst::afw::table::ExposureCatalog const &)*arg1,(lsst::afw::image::Wcs const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoaddPsf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::ExposureCatalog *arg1 = 0 ;
  lsst::afw::image::Wcs *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > tempshared2 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::CoaddPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_CoaddPsf",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::table::ExposureCatalog * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      arg2 = const_cast< lsst::afw::image::Wcs * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::image::Wcs * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2)->get());
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CoaddPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CoaddPsf" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (lsst::meas::algorithms::CoaddPsf *)new lsst::meas::algorithms::CoaddPsf((lsst::afw::table::ExposureCatalog const &)*arg1,(lsst::afw::image::Wcs const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoaddPsf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::ExposureCatalog *arg1 = 0 ;
  lsst::afw::image::Wcs *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > tempshared2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::CoaddPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CoaddPsf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::table::ExposureCatalog * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      arg2 = const_cast< lsst::afw::image::Wcs * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::image::Wcs * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2)->get());
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CoaddPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (lsst::meas::algorithms::CoaddPsf *)new lsst::meas::algorithms::CoaddPsf((lsst::afw::table::ExposureCatalog const &)*arg1,(lsst::afw::image::Wcs const &)*arg2,(std::string const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoaddPsf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::table::ExposureCatalog *arg1 = 0 ;
  lsst::afw::image::Wcs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::CoaddPsf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CoaddPsf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "1"" of type '" "lsst::afw::table::ExposureCatalog const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::table::ExposureCatalog * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoaddPsf" "', argument " "2"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2);
      arg2 = const_cast< lsst::afw::image::Wcs * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::image::Wcs * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp2)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::CoaddPsf *)new lsst::meas::algorithms::CoaddPsf((lsst::afw::table::ExposureCatalog const &)*arg1,(lsst::afw::image::Wcs const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoaddPsf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CoaddPsf__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_CoaddPsf__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_CoaddPsf__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_CoaddPsf__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CoaddPsf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::CoaddPsf::CoaddPsf(lsst::afw::table::ExposureCatalog const &,lsst::afw::image::Wcs const &,std::string const &,std::string const &,unsigned int)\n"
    "    lsst::meas::algorithms::CoaddPsf::CoaddPsf(lsst::afw::table::ExposureCatalog const &,lsst::afw::image::Wcs const &,std::string const &,std::string const &)\n"
    "    lsst::meas::algorithms::CoaddPsf::CoaddPsf(lsst::afw::table::ExposureCatalog const &,lsst::afw::image::Wcs const &,std::string const &)\n"
    "    lsst::meas::algorithms::CoaddPsf::CoaddPsf(lsst::afw::table::ExposureCatalog const &,lsst::afw::image::Wcs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoaddPsf_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::CoaddPsf const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr<  lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getAveragePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::Point2D result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoaddPsf_getAveragePosition",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getAveragePosition" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::CoaddPsf const *)arg1)->getAveragePosition();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::Point2D(static_cast< const lsst::afw::geom::Point2D& >(result))), SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getCoaddWcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoaddPsf_getCoaddWcs",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getCoaddWcs" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->getCoaddWcs();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::Wcs > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::Wcs >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getComponentCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoaddPsf_getComponentCount",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getComponentCount" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::CoaddPsf const *)arg1)->getComponentCount();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoaddPsf_getPsf",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoaddPsf_getPsf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getPsf(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::detection::Psf > *smartresult = result ? new boost::shared_ptr< const lsst::afw::detection::Psf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getWcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoaddPsf_getWcs",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getWcs" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoaddPsf_getWcs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getWcs(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::Wcs > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::Wcs >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoaddPsf_getWeight",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getWeight" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoaddPsf_getWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getWeight(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::table::RecordId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoaddPsf_getId",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getId" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoaddPsf_getId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (lsst::afw::table::RecordId)(arg1)->getId(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_getBBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::Box2I result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoaddPsf_getBBox",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_getBBox" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoaddPsf_getBBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getBBox(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::Box2I(static_cast< const lsst::afw::geom::Box2I& >(result))), SWIGTYPE_p_lsst__afw__geom__Box2I, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_isPersistable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoaddPsf_isPersistable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_isPersistable" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((lsst::meas::algorithms::CoaddPsf const *)arg1)->isPersistable();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoaddPsf_swigConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::daf::base::Persistable > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::daf::base::Persistable > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoaddPsf_swigConvert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoaddPsf_swigConvert" "', argument " "1"" of type '" "boost::shared_ptr< lsst::daf::base::Persistable > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::Persistable > * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_meas_algorithms_CoaddPsf_swigConvert((boost::shared_ptr< lsst::daf::base::Persistable > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CoaddPsf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CoaddPsf *arg1 = (lsst::meas::algorithms::CoaddPsf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CoaddPsf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CoaddPsf" "', argument " "1"" of type '" "lsst::meas::algorithms::CoaddPsf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CoaddPsf > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CoaddPsf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CoaddPsf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Shapelet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::Shapelet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Shapelet",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Shapelet" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Shapelet" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::meas::algorithms::Shapelet *)new lsst::meas::algorithms::Shapelet(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Shapelet >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shapelet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  lsst::meas::algorithms::Shapelet::ShapeletVector *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  lsst::meas::algorithms::Shapelet::ShapeletVector val3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::Shapelet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Shapelet",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Shapelet" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Shapelet" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    ndarray::PyPtr tmp(obj2,true);
    if (!ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::fromPythonStage1(tmp)) return NULL;
    if (!ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::fromPythonStage2(tmp, val3)) return NULL;
    arg3 = &val3;
  }
  {
    try {
      result = (lsst::meas::algorithms::Shapelet *)new lsst::meas::algorithms::Shapelet(arg1,arg2,(lsst::meas::algorithms::Shapelet::ShapeletVector const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Shapelet >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shapelet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  lsst::meas::algorithms::Shapelet::ShapeletVector *arg3 = 0 ;
  lsst::meas::algorithms::Shapelet::ShapeletCovariance *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  lsst::meas::algorithms::Shapelet::ShapeletVector val3 ;
  lsst::meas::algorithms::Shapelet::ShapeletCovariance val4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::Shapelet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Shapelet",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Shapelet" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Shapelet" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    ndarray::PyPtr tmp(obj2,true);
    if (!ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::fromPythonStage1(tmp)) return NULL;
    if (!ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::fromPythonStage2(tmp, val3)) return NULL;
    arg3 = &val3;
  }
  {
    ndarray::PyPtr tmp(obj3,true);
    if (!ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletCovariance >::fromPythonStage1(tmp)) return NULL;
    if (!ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletCovariance >::fromPythonStage2(tmp, val4)) return NULL;
    arg4 = &val4;
  }
  {
    try {
      result = (lsst::meas::algorithms::Shapelet *)new lsst::meas::algorithms::Shapelet(arg1,arg2,(lsst::meas::algorithms::Shapelet::ShapeletVector const &)*arg3,(lsst::meas::algorithms::Shapelet::ShapeletCovariance const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Shapelet >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Shapelet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Shapelet",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shapelet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::Shapelet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shapelet",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Shapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Shapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::Shapelet *)new lsst::meas::algorithms::Shapelet((lsst::meas::algorithms::Shapelet const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Shapelet >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_getOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_getOrder",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_getOrder" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::Shapelet const *)arg1)->getOrder();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_getSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_getSigma",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_getSigma" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::Shapelet const *)arg1)->getSigma();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_size",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_size" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::Shapelet const *)arg1)->size();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_getValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::Shapelet::ShapeletVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_getValues",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_getValues" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::Shapelet::ShapeletVector *) &((lsst::meas::algorithms::Shapelet const *)arg1)->getValues();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::toPython(*result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_hasCovariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_hasCovariance",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_hasCovariance" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((lsst::meas::algorithms::Shapelet const *)arg1)->hasCovariance();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_getCovariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< Eigen::MatrixXd const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_getCovariance",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_getCovariance" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::Shapelet const *)arg1)->getCovariance();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new boost::shared_ptr< lsst::meas::algorithms::Shapelet::ShapeletCovariance const >(static_cast< const boost::shared_ptr< lsst::meas::algorithms::Shapelet::ShapeletCovariance const >& >(result))), SWIGTYPE_p_boost__shared_ptrT_Eigen__MatrixXd_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_setSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shapelet_setSigma",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_setSigma" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shapelet_setSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSigma(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_getPQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Shapelet_getPQ",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_getPQ" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shapelet_getPQ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shapelet_getPQ" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->getPQ(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_evaluateAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  lsst::meas::algorithms::Shapelet::PointD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shapelet_evaluateAt",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_evaluateAt" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shapelet_evaluateAt" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_evaluateAt" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::meas::algorithms::Shapelet::PointD * >(argp2);
  {
    try {
      result = (double)(arg1)->evaluateAt((lsst::meas::algorithms::Shapelet::PointD const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_evaluateAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Shapelet_evaluateAt",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_evaluateAt" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shapelet_evaluateAt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shapelet_evaluateAt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->evaluateAt(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_evaluateAt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Shapelet_evaluateAt__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Shapelet_evaluateAt__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shapelet_evaluateAt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::Shapelet::evaluateAt(lsst::meas::algorithms::Shapelet::PointD const &)\n"
    "    lsst::meas::algorithms::Shapelet::evaluateAt(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shapelet_measureFromImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  lsst::meas::algorithms::Shapelet::Source *arg2 = 0 ;
  lsst::meas::algorithms::Shapelet::PointD *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  lsst::meas::algorithms::Shapelet::Exposure *arg7 = 0 ;
  lsst::meas::algorithms::Shapelet::MaskPixel arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared7 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Shapelet_measureFromImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_measureFromImage" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shapelet_measureFromImage" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::Source const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_measureFromImage" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::Source const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::Shapelet::Source * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::Shapelet::Source * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Shapelet_measureFromImage" "', argument " "3"" of type '" "lsst::meas::algorithms::Shapelet::PointD const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_measureFromImage" "', argument " "3"" of type '" "lsst::meas::algorithms::Shapelet::PointD const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::meas::algorithms::Shapelet::PointD * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Shapelet_measureFromImage" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Shapelet_measureFromImage" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Shapelet_measureFromImage" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    int newmem = 0;
    res7 = SWIG_ConvertPtrAndOwn(obj6, &argp7, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Shapelet_measureFromImage" "', argument " "7"" of type '" "lsst::meas::algorithms::Shapelet::Exposure const &""'"); 
    }
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_measureFromImage" "', argument " "7"" of type '" "lsst::meas::algorithms::Shapelet::Exposure const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared7 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp7);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp7);
      arg7 = const_cast< lsst::meas::algorithms::Shapelet::Exposure * >(tempshared7.get());
    } else {
      arg7 = const_cast< lsst::meas::algorithms::Shapelet::Exposure * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp7)->get());
    }
  }
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Shapelet_measureFromImage" "', argument " "8"" of type '" "lsst::meas::algorithms::Shapelet::MaskPixel""'");
  } 
  arg8 = static_cast< lsst::meas::algorithms::Shapelet::MaskPixel >(val8);
  {
    try {
      result = (bool)(arg1)->measureFromImage((lsst::meas::algorithms::Shapelet::Source const &)*arg2,(lsst::meas::algorithms::Shapelet::PointD const &)*arg3,arg4,arg5,arg6,(lsst::meas::algorithms::Shapelet::Exposure const &)*arg7,arg8);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_measureFromImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  lsst::meas::algorithms::Shapelet::Source *arg2 = 0 ;
  lsst::meas::algorithms::Shapelet::PointD *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  lsst::meas::algorithms::Shapelet::Exposure *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Shapelet_measureFromImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_measureFromImage" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shapelet_measureFromImage" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::Source const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_measureFromImage" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::Source const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::Shapelet::Source * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::Shapelet::Source * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Shapelet_measureFromImage" "', argument " "3"" of type '" "lsst::meas::algorithms::Shapelet::PointD const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_measureFromImage" "', argument " "3"" of type '" "lsst::meas::algorithms::Shapelet::PointD const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::meas::algorithms::Shapelet::PointD * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Shapelet_measureFromImage" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Shapelet_measureFromImage" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Shapelet_measureFromImage" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    int newmem = 0;
    res7 = SWIG_ConvertPtrAndOwn(obj6, &argp7, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Shapelet_measureFromImage" "', argument " "7"" of type '" "lsst::meas::algorithms::Shapelet::Exposure const &""'"); 
    }
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shapelet_measureFromImage" "', argument " "7"" of type '" "lsst::meas::algorithms::Shapelet::Exposure const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared7 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp7);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp7);
      arg7 = const_cast< lsst::meas::algorithms::Shapelet::Exposure * >(tempshared7.get());
    } else {
      arg7 = const_cast< lsst::meas::algorithms::Shapelet::Exposure * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp7)->get());
    }
  }
  {
    try {
      result = (bool)(arg1)->measureFromImage((lsst::meas::algorithms::Shapelet::Source const &)*arg2,(lsst::meas::algorithms::Shapelet::PointD const &)*arg3,arg4,arg5,arg6,(lsst::meas::algorithms::Shapelet::Exposure const &)*arg7);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_measureFromImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          _v = PyBool_Check(argv[3]) ? 1 : 0;
          if (_v) {
            _v = PyBool_Check(argv[4]) ? 1 : 0;
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Shapelet_measureFromImage__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          _v = PyBool_Check(argv[3]) ? 1 : 0;
          if (_v) {
            _v = PyBool_Check(argv[4]) ? 1 : 0;
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Shapelet_measureFromImage__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shapelet_measureFromImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::Shapelet::measureFromImage(lsst::meas::algorithms::Shapelet::Source const &,lsst::meas::algorithms::Shapelet::PointD const &,bool,bool,double,lsst::meas::algorithms::Shapelet::Exposure const &,lsst::meas::algorithms::Shapelet::MaskPixel const)\n"
    "    lsst::meas::algorithms::Shapelet::measureFromImage(lsst::meas::algorithms::Shapelet::Source const &,lsst::meas::algorithms::Shapelet::PointD const &,bool,bool,double,lsst::meas::algorithms::Shapelet::Exposure const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Shapelet__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::shapelet::BVec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::Shapelet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shapelet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__meas__algorithms__shapelet__BVec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Shapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::shapelet::BVec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Shapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::shapelet::BVec const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::shapelet::BVec * >(argp1);
  {
    try {
      result = (lsst::meas::algorithms::Shapelet *)new lsst::meas::algorithms::Shapelet((lsst::meas::algorithms::shapelet::BVec const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Shapelet >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shapelet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Shapelet__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__meas__algorithms__shapelet__BVec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Shapelet__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Shapelet__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          ndarray::PyPtr tmp(argv[2],true);
          _v = ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::fromPythonStage1(tmp);
          if (!(_v)) PyErr_Clear();
        }
        if (_v) {
          return _wrap_new_Shapelet__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          ndarray::PyPtr tmp(argv[2],true);
          _v = ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletVector >::fromPythonStage1(tmp);
          if (!(_v)) PyErr_Clear();
        }
        if (_v) {
          {
            ndarray::PyPtr tmp(argv[3],true);
            _v = ndarray::PyConverter< lsst::meas::algorithms::Shapelet::ShapeletCovariance >::fromPythonStage1(tmp);
            if (!(_v)) PyErr_Clear();
          }
          if (_v) {
            return _wrap_new_Shapelet__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Shapelet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::Shapelet::Shapelet(int,double)\n"
    "    lsst::meas::algorithms::Shapelet::Shapelet(int,double,lsst::meas::algorithms::Shapelet::ShapeletVector const &)\n"
    "    lsst::meas::algorithms::Shapelet::Shapelet(int,double,lsst::meas::algorithms::Shapelet::ShapeletVector const &,lsst::meas::algorithms::Shapelet::ShapeletCovariance const &)\n"
    "    lsst::meas::algorithms::Shapelet::Shapelet(lsst::meas::algorithms::Shapelet const &)\n"
    "    lsst::meas::algorithms::Shapelet::Shapelet(lsst::meas::algorithms::shapelet::BVec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shapelet_viewAsBVec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::shapelet::BVec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_viewAsBVec",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_viewAsBVec" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::shapelet::BVec *) &((lsst::meas::algorithms::Shapelet const *)arg1)->viewAsBVec();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__shapelet__BVec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_viewAsBVec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet *arg1 = (lsst::meas::algorithms::Shapelet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Shapelet > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::shapelet::BVec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shapelet_viewAsBVec",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shapelet_viewAsBVec" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Shapelet > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Shapelet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::shapelet::BVec *) &(arg1)->viewAsBVec();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__shapelet__BVec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shapelet_viewAsBVec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Shapelet_viewAsBVec__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Shapelet_viewAsBVec__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shapelet_viewAsBVec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::Shapelet::viewAsBVec() const\n"
    "    lsst::meas::algorithms::Shapelet::viewAsBVec()\n");
  return 0;
}


SWIGINTERN PyObject *Shapelet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::Wcs *arg1 = 0 ;
  lsst::afw::geom::PointD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Eigen::Matrix2d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getJacobian",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getJacobian" "', argument " "1"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJacobian" "', argument " "1"" of type '" "lsst::afw::image::Wcs const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp1);
      arg1 = const_cast< lsst::afw::image::Wcs * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::Wcs * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Wcs > * >(argp1)->get());
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getJacobian" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJacobian" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::PointD * >(argp2);
  {
    try {
      result = lsst::meas::algorithms::getJacobian((lsst::afw::image::Wcs const &)*arg1,(lsst::afw::geom::Point< double,2 > const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = ndarray::PyConverter< Eigen::Matrix2d >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeletInterpolation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation::Policy *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::pex::policy::Policy const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::ShapeletInterpolation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapeletInterpolation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeletInterpolation" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::Policy const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapeletInterpolation" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::Policy const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation::Policy * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation::Policy * >(reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::ShapeletInterpolation *)new lsst::meas::algorithms::ShapeletInterpolation((lsst::meas::algorithms::ShapeletInterpolation::Policy const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShapeletInterpolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeletInterpolation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeletInterpolation" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeletInterpolation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::ShapeletInterpolation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapeletInterpolation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeletInterpolation" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapeletInterpolation" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::ShapeletInterpolation *)new lsst::meas::algorithms::ShapeletInterpolation((lsst::meas::algorithms::ShapeletInterpolation const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeletInterpolation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ShapeletInterpolation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ShapeletInterpolation__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ShapeletInterpolation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ShapeletInterpolation::ShapeletInterpolation(lsst::meas::algorithms::ShapeletInterpolation::Policy const &)\n"
    "    lsst::meas::algorithms::ShapeletInterpolation::ShapeletInterpolation(lsst::meas::algorithms::ShapeletInterpolation const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_getOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletInterpolation_getOrder",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_getOrder" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->getOrder();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_getFitOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletInterpolation_getFitOrder",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_getFitOrder" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->getFitOrder();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_getSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletInterpolation_getSigma",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_getSigma" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->getSigma();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletInterpolation_getSize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_getSize" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->getSize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_getFitSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletInterpolation_getFitSize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_getFitSize" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->getFitSize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_setSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeletInterpolation_setSigma",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_setSigma" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeletInterpolation_setSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSigma(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_calculate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  SwigValueWrapper< boost::shared_ptr< lsst::afw::math::SpatialCellSet > > arg2 ;
  lsst::meas::algorithms::ShapeletInterpolation::Exposure *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeletInterpolation_calculate",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_calculate" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletInterpolation_calculate" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::SpatialCellSet::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletInterpolation_calculate" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::SpatialCellSet::Ptr""'");
    } else {
      lsst::meas::algorithms::ShapeletInterpolation::SpatialCellSet::Ptr * temp = reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::SpatialCellSet::Ptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeletInterpolation_calculate" "', argument " "3"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::Exposure const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletInterpolation_calculate" "', argument " "3"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::Exposure const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::meas::algorithms::ShapeletInterpolation::Exposure * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::meas::algorithms::ShapeletInterpolation::Exposure * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      (arg1)->calculate(arg2,(lsst::meas::algorithms::ShapeletInterpolation::Exposure const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_interpolate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  lsst::meas::algorithms::ShapeletInterpolation::PointD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::ShapeletInterpolation::Shapelet::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeletInterpolation_interpolate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_interpolate" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletInterpolation_interpolate" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletInterpolation_interpolate" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::PointD * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->interpolate((lsst::meas::algorithms::ShapeletInterpolation::PointD const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr< const lsst::meas::algorithms::Shapelet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_interpolate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::ShapeletInterpolation::Shapelet::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeletInterpolation_interpolate",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_interpolate" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeletInterpolation_interpolate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeletInterpolation_interpolate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->interpolate(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr< const lsst::meas::algorithms::Shapelet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ShapeletInterpolation_interpolate__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ShapeletInterpolation_interpolate__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeletInterpolation_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ShapeletInterpolation::interpolate(lsst::meas::algorithms::ShapeletInterpolation::PointD const &) const\n"
    "    lsst::meas::algorithms::ShapeletInterpolation::interpolate(double,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_interpolateSingleElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  lsst::meas::algorithms::ShapeletInterpolation::PointD *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeletInterpolation_interpolateSingleElement",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::PointD * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->interpolateSingleElement((lsst::meas::algorithms::ShapeletInterpolation::PointD const &)*arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_interpolateSingleElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation *arg1 = (lsst::meas::algorithms::ShapeletInterpolation *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeletInterpolation_interpolateSingleElement",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletInterpolation > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ShapeletInterpolation_interpolateSingleElement" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletInterpolation const *)arg1)->interpolateSingleElement(arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletInterpolation_interpolateSingleElement(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ShapeletInterpolation_interpolateSingleElement__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ShapeletInterpolation_interpolateSingleElement__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeletInterpolation_interpolateSingleElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ShapeletInterpolation::interpolateSingleElement(lsst::meas::algorithms::ShapeletInterpolation::PointD const &,int) const\n"
    "    lsst::meas::algorithms::ShapeletInterpolation::interpolateSingleElement(double,double,int) const\n");
  return 0;
}


SWIGINTERN PyObject *ShapeletInterpolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LocalShapeletKernel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet::ConstPtr arg1 ;
  lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr *arg2 = 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::Extent *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::LocalShapeletKernel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LocalShapeletKernel",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LocalShapeletKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet::ConstPtr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< lsst::meas::algorithms::Shapelet::ConstPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< lsst::meas::algorithms::Shapelet::ConstPtr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LocalShapeletKernel" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr * >(argp2);
      delete reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr * >(argp2) : &tempshared2;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LocalShapeletKernel" "', argument " "3"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Extent const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LocalShapeletKernel" "', argument " "3"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Extent const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Extent * >(argp3);
  {
    try {
      result = (lsst::meas::algorithms::LocalShapeletKernel *)new lsst::meas::algorithms::LocalShapeletKernel(arg1,(lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr const &)*arg2,(lsst::meas::algorithms::LocalShapeletKernel::Extent const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalShapeletKernel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Shapelet::ConstPtr arg1 ;
  lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::LocalShapeletKernel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LocalShapeletKernel",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LocalShapeletKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::Shapelet::ConstPtr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< lsst::meas::algorithms::Shapelet::ConstPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< lsst::meas::algorithms::Shapelet::ConstPtr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LocalShapeletKernel" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr * >(argp2);
      delete reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::LocalShapeletKernel *)new lsst::meas::algorithms::LocalShapeletKernel(arg1,(lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalShapeletKernel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LocalShapeletKernel__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_LocalShapeletKernel__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LocalShapeletKernel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::LocalShapeletKernel::LocalShapeletKernel(lsst::meas::algorithms::Shapelet::ConstPtr,lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr const &,lsst::meas::algorithms::LocalShapeletKernel::Extent const &)\n"
    "    lsst::meas::algorithms::LocalShapeletKernel::LocalShapeletKernel(lsst::meas::algorithms::Shapelet::ConstPtr,lsst::meas::algorithms::LocalShapeletKernel::Wcs::ConstPtr const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocalShapeletKernel_computeImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::LocalShapeletKernel *arg1 = (lsst::meas::algorithms::LocalShapeletKernel *) 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::Image *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Image< double > > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:LocalShapeletKernel_computeImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalShapeletKernel_computeImage" "', argument " "1"" of type '" "lsst::meas::algorithms::LocalShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Image &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocalShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Image &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::LocalShapeletKernel::Image * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::LocalShapeletKernel::Image * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocalShapeletKernel_computeImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LocalShapeletKernel_computeImage" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LocalShapeletKernel_computeImage" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)((lsst::meas::algorithms::LocalShapeletKernel const *)arg1)->computeImage(*arg2,arg3,arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalShapeletKernel_computeImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::LocalShapeletKernel *arg1 = (lsst::meas::algorithms::LocalShapeletKernel *) 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::Image *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Image< double > > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LocalShapeletKernel_computeImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalShapeletKernel_computeImage" "', argument " "1"" of type '" "lsst::meas::algorithms::LocalShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Image &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocalShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Image &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::LocalShapeletKernel::Image * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::LocalShapeletKernel::Image * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocalShapeletKernel_computeImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LocalShapeletKernel_computeImage" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((lsst::meas::algorithms::LocalShapeletKernel const *)arg1)->computeImage(*arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalShapeletKernel_computeImage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::LocalShapeletKernel *arg1 = (lsst::meas::algorithms::LocalShapeletKernel *) 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::Image *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Image< double > > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LocalShapeletKernel_computeImage",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalShapeletKernel_computeImage" "', argument " "1"" of type '" "lsst::meas::algorithms::LocalShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Image &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocalShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::LocalShapeletKernel::Image &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::LocalShapeletKernel::Image * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::LocalShapeletKernel::Image * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocalShapeletKernel_computeImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (double)((lsst::meas::algorithms::LocalShapeletKernel const *)arg1)->computeImage(*arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalShapeletKernel_computeImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          return _wrap_LocalShapeletKernel_computeImage__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LocalShapeletKernel_computeImage__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LocalShapeletKernel_computeImage__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LocalShapeletKernel_computeImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::LocalShapeletKernel::computeImage(lsst::meas::algorithms::LocalShapeletKernel::Image &,bool,double,double) const\n"
    "    lsst::meas::algorithms::LocalShapeletKernel::computeImage(lsst::meas::algorithms::LocalShapeletKernel::Image &,bool,double) const\n"
    "    lsst::meas::algorithms::LocalShapeletKernel::computeImage(lsst::meas::algorithms::LocalShapeletKernel::Image &,bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LocalShapeletKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::LocalShapeletKernel *arg1 = (lsst::meas::algorithms::LocalShapeletKernel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalShapeletKernel",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalShapeletKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::LocalShapeletKernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::LocalShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::LocalShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalShapeletKernel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ShapeletKernel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation::ConstPtr arg1 ;
  lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr *arg2 = 0 ;
  lsst::meas::algorithms::ShapeletKernel::Extent *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::ShapeletKernel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ShapeletKernel",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeletKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::ConstPtr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::ConstPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::ConstPtr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ShapeletKernel" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr * >(argp2);
      delete reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr * >(argp2) : &tempshared2;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ShapeletKernel" "', argument " "3"" of type '" "lsst::meas::algorithms::ShapeletKernel::Extent const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapeletKernel" "', argument " "3"" of type '" "lsst::meas::algorithms::ShapeletKernel::Extent const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Extent * >(argp3);
  {
    try {
      result = (lsst::meas::algorithms::ShapeletKernel *)new lsst::meas::algorithms::ShapeletKernel(arg1,(lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr const &)*arg2,(lsst::meas::algorithms::ShapeletKernel::Extent const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeletKernel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletInterpolation::ConstPtr arg1 ;
  lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::ShapeletKernel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ShapeletKernel",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeletKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletInterpolation::ConstPtr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::ConstPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< lsst::meas::algorithms::ShapeletInterpolation::ConstPtr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ShapeletKernel" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr * >(argp2);
      delete reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::ShapeletKernel *)new lsst::meas::algorithms::ShapeletKernel(arg1,(lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeletKernel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ShapeletKernel__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ShapeletKernel__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ShapeletKernel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ShapeletKernel::ShapeletKernel(lsst::meas::algorithms::ShapeletInterpolation::ConstPtr,lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr const &,lsst::meas::algorithms::ShapeletKernel::Extent const &)\n"
    "    lsst::meas::algorithms::ShapeletKernel::ShapeletKernel(lsst::meas::algorithms::ShapeletInterpolation::ConstPtr,lsst::meas::algorithms::ShapeletKernel::Wcs::ConstPtr const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeletKernel_getLocalKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletKernel *arg1 = (lsst::meas::algorithms::ShapeletKernel *) 0 ;
  lsst::meas::algorithms::ShapeletKernel::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::LocalShapeletKernel::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeletKernel_getLocalKernel",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletKernel_getLocalKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletKernel_getLocalKernel" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletKernel_getLocalKernel" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Point const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::meas::algorithms::ShapeletKernel::Point * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::ShapeletKernel const *)arg1)->getLocalKernel((lsst::meas::algorithms::ShapeletKernel::Point const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel > *smartresult = result ? new boost::shared_ptr< const lsst::meas::algorithms::LocalShapeletKernel >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletKernel_computeImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletKernel *arg1 = (lsst::meas::algorithms::ShapeletKernel *) 0 ;
  lsst::meas::algorithms::ShapeletKernel::Image *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Image< double > > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ShapeletKernel_computeImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletKernel_computeImage" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Image &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Image &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::ShapeletKernel::Image * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::ShapeletKernel::Image * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeletKernel_computeImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ShapeletKernel_computeImage" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ShapeletKernel_computeImage" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletKernel const *)arg1)->computeImage(*arg2,arg3,arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletKernel_computeImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletKernel *arg1 = (lsst::meas::algorithms::ShapeletKernel *) 0 ;
  lsst::meas::algorithms::ShapeletKernel::Image *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Image< double > > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeletKernel_computeImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletKernel_computeImage" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Image &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Image &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::ShapeletKernel::Image * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::ShapeletKernel::Image * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeletKernel_computeImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ShapeletKernel_computeImage" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletKernel const *)arg1)->computeImage(*arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletKernel_computeImage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletKernel *arg1 = (lsst::meas::algorithms::ShapeletKernel *) 0 ;
  lsst::meas::algorithms::ShapeletKernel::Image *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Image< double > > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeletKernel_computeImage",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletKernel_computeImage" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletKernel const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Image &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeletKernel_computeImage" "', argument " "2"" of type '" "lsst::meas::algorithms::ShapeletKernel::Image &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::ShapeletKernel::Image * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::ShapeletKernel::Image * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::Image<double> > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeletKernel_computeImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletKernel const *)arg1)->computeImage(*arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletKernel_computeImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          return _wrap_ShapeletKernel_computeImage__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ShapeletKernel_computeImage__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = PyBool_Check(argv[2]) ? 1 : 0;
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ShapeletKernel_computeImage__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeletKernel_computeImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ShapeletKernel::computeImage(lsst::meas::algorithms::ShapeletKernel::Image &,bool,double,double) const\n"
    "    lsst::meas::algorithms::ShapeletKernel::computeImage(lsst::meas::algorithms::ShapeletKernel::Image &,bool,double) const\n"
    "    lsst::meas::algorithms::ShapeletKernel::computeImage(lsst::meas::algorithms::ShapeletKernel::Image &,bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ShapeletKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletKernel *arg1 = (lsst::meas::algorithms::ShapeletKernel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeletKernel",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeletKernel" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletKernel *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletKernel > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletKernel * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapeletKernel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ShapeletPsfCandidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate::Source > arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::ShapeletPsfCandidate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ShapeletPsfCandidate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShapeletPsfCandidate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShapeletPsfCandidate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ShapeletPsfCandidate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ShapeletPsfCandidate" "', argument " "4"" of type '" "boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate::Source >""'"); 
    }
    if (argp4) arg4 = *(reinterpret_cast< boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate::Source > * >(argp4));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate::Source > * >(argp4);
  }
  {
    try {
      result = (lsst::meas::algorithms::ShapeletPsfCandidate *)new lsst::meas::algorithms::ShapeletPsfCandidate(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_setShapelet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  lsst::meas::algorithms::Shapelet::ConstPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeletPsfCandidate_setShapelet",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_setShapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeletPsfCandidate_setShapelet" "', argument " "2"" of type '" "lsst::meas::algorithms::Shapelet::ConstPtr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< lsst::meas::algorithms::Shapelet::ConstPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< lsst::meas::algorithms::Shapelet::ConstPtr * >(argp2);
  }
  {
    try {
      (arg1)->setShapelet(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_getX",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_getX" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->getX();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_getY",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_getY" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->getY();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_getSize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_getSize" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->getSize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_getSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate::Source > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_getSource",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_getSource" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->getSource();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::table::SourceRecord > *smartresult = result ? new boost::shared_ptr<  lsst::afw::table::SourceRecord >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_getShapelet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::Shapelet::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_getShapelet",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_getShapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->getShapelet();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::Shapelet > *smartresult = result ? new boost::shared_ptr< const lsst::meas::algorithms::Shapelet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_hasShapelet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_hasShapelet",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_hasShapelet" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->hasShapelet();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_getCandidateRating(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_getCandidateRating",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_getCandidateRating" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::meas::algorithms::ShapeletPsfCandidate const *)arg1)->getCandidateRating();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeletPsfCandidate_setBad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeletPsfCandidate_setBad",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeletPsfCandidate_setBad" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->setBad();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShapeletPsfCandidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeletPsfCandidate *arg1 = (lsst::meas::algorithms::ShapeletPsfCandidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeletPsfCandidate",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeletPsfCandidate" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeletPsfCandidate *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeletPsfCandidate > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeletPsfCandidate * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapeletPsfCandidate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SizeMagnitudeStarSelector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::Policy *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::pex::policy::Policy const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SizeMagnitudeStarSelector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SizeMagnitudeStarSelector" "', argument " "1"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::Policy const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SizeMagnitudeStarSelector" "', argument " "1"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::Policy const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::Policy * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::Policy * >(reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::SizeMagnitudeStarSelector *)new lsst::meas::algorithms::SizeMagnitudeStarSelector((lsst::meas::algorithms::SizeMagnitudeStarSelector::Policy const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SizeMagnitudeStarSelector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SizeMagnitudeStarSelector *arg1 = (lsst::meas::algorithms::SizeMagnitudeStarSelector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SizeMagnitudeStarSelector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SizeMagnitudeStarSelector" "', argument " "1"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeMagnitudeStarSelector_selectStars__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SizeMagnitudeStarSelector *arg1 = (lsst::meas::algorithms::SizeMagnitudeStarSelector *) 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure *arg2 = 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog *arg3 = 0 ;
  SwigValueWrapper< boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SizeMagnitudeStarSelector_selectStars",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "1"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "2"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "2"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "3"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "3"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "4"" of type '" "boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "4"" of type '" "boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const >""'");
    } else {
      boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const > * temp = reinterpret_cast< boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::SizeMagnitudeStarSelector const *)arg1)->selectStars((lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &)*arg2,(lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &)*arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList(static_cast< const lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList& >(result))), SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeMagnitudeStarSelector_selectStars__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SizeMagnitudeStarSelector *arg1 = (lsst::meas::algorithms::SizeMagnitudeStarSelector *) 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure *arg2 = 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SizeMagnitudeStarSelector_selectStars",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "1"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "2"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "2"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "3"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeMagnitudeStarSelector_selectStars" "', argument " "3"" of type '" "lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &""'"); 
  }
  arg3 = reinterpret_cast< lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog * >(argp3);
  {
    try {
      result = ((lsst::meas::algorithms::SizeMagnitudeStarSelector const *)arg1)->selectStars((lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &)*arg2,(lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList(static_cast< const lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList& >(result))), SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeMagnitudeStarSelector_selectStars(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SizeMagnitudeStarSelector_selectStars__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SizeMagnitudeStarSelector_selectStars__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SizeMagnitudeStarSelector_selectStars'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::SizeMagnitudeStarSelector::selectStars(lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &,lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &,boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const >) const\n"
    "    lsst::meas::algorithms::SizeMagnitudeStarSelector::selectStars(lsst::meas::algorithms::SizeMagnitudeStarSelector::Exposure const &,lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog const &) const\n");
  return 0;
}


SWIGINTERN PyObject *SizeMagnitudeStarSelector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__meas__algorithms__SizeMagnitudeStarSelector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Algorithm *arg1 = (lsst::meas::algorithms::Algorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Algorithm",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Algorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::Algorithm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Algorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Algorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Algorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Algorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Algorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Algorithm_getControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Algorithm *arg1 = (lsst::meas::algorithms::Algorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::AlgorithmControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Algorithm_getControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Algorithm_getControl" "', argument " "1"" of type '" "lsst::meas::algorithms::Algorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Algorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Algorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Algorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Algorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Algorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::AlgorithmControl *) &((lsst::meas::algorithms::Algorithm const *)arg1)->getControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > *smartresult = new boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Algorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AlgorithmControl_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AlgorithmControl_name_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_name_set" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlgorithmControl_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlgorithmControl_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlgorithmControl_name_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_name_get" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl__doc_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":AlgorithmControl__doc_priority")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::AlgorithmControl::_doc_priority();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl__type_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":AlgorithmControl__type_priority")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::AlgorithmControl::_type_priority();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_priority_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AlgorithmControl_priority_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_priority_set" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlgorithmControl_priority_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->priority = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_priority_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlgorithmControl_priority_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_priority_get" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->priority);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlgorithmControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::AlgorithmControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_makeAlgorithm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  lsst::meas::algorithms::AlgorithmMap *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AlgorithmControl_makeAlgorithm",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::meas::algorithms::AlgorithmMap * >(argp4);
  {
    try {
      result = ((lsst::meas::algorithms::AlgorithmControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3,(lsst::meas::algorithms::AlgorithmMap const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Algorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Algorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_makeAlgorithm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AlgorithmControl_makeAlgorithm",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::AlgorithmControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Algorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Algorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_makeAlgorithm__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Algorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AlgorithmControl_makeAlgorithm",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlgorithmControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::AlgorithmControl const *)arg1)->makeAlgorithm(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Algorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Algorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlgorithmControl_makeAlgorithm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AlgorithmControl_makeAlgorithm__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AlgorithmControl_makeAlgorithm__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AlgorithmControl_makeAlgorithm__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AlgorithmControl_makeAlgorithm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::AlgorithmControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &,lsst::meas::algorithms::AlgorithmMap const &) const\n"
    "    lsst::meas::algorithms::AlgorithmControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &) const\n"
    "    lsst::meas::algorithms::AlgorithmControl::makeAlgorithm(lsst::afw::table::Schema &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AlgorithmControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::AlgorithmControl *arg1 = (lsst::meas::algorithms::AlgorithmControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AlgorithmControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AlgorithmControl" "', argument " "1"" of type '" "lsst::meas::algorithms::AlgorithmControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::AlgorithmControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::AlgorithmControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AlgorithmControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FluxAlgorithm_getControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxAlgorithm *arg1 = (lsst::meas::algorithms::FluxAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::FluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FluxAlgorithm_getControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FluxAlgorithm_getControl" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxAlgorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::FluxControl *) &((lsst::meas::algorithms::FluxAlgorithm const *)arg1)->getControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::FluxControl > *smartresult = new boost::shared_ptr< const lsst::meas::algorithms::FluxControl >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FluxAlgorithm_getKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxAlgorithm *arg1 = (lsst::meas::algorithms::FluxAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::FluxAlgorithm::KeyTuple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FluxAlgorithm_getKeys",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FluxAlgorithm_getKeys" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxAlgorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::FluxAlgorithm::KeyTuple *) &((lsst::meas::algorithms::FluxAlgorithm const *)arg1)->getKeys();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FluxAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxAlgorithm *arg1 = (lsst::meas::algorithms::FluxAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FluxAlgorithm",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FluxAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxAlgorithm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FluxAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FluxControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxControl *arg1 = (lsst::meas::algorithms::FluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FluxControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FluxControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::FluxControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::FluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::FluxControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FluxControl_makeAlgorithm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxControl *arg1 = (lsst::meas::algorithms::FluxControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  lsst::meas::algorithms::AlgorithmMap *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FluxControl_makeAlgorithm",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FluxControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FluxControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FluxControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FluxControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FluxControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FluxControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::meas::algorithms::AlgorithmMap * >(argp4);
  {
    try {
      result = ((lsst::meas::algorithms::FluxControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3,(lsst::meas::algorithms::AlgorithmMap const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FluxControl_makeAlgorithm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxControl *arg1 = (lsst::meas::algorithms::FluxControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FluxControl_makeAlgorithm",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FluxControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FluxControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FluxControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FluxControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::FluxControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FluxControl_makeAlgorithm__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxControl *arg1 = (lsst::meas::algorithms::FluxControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FluxControl_makeAlgorithm",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FluxControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FluxControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FluxControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::FluxControl const *)arg1)->makeAlgorithm(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::FluxAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FluxControl_makeAlgorithm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FluxControl_makeAlgorithm__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FluxControl_makeAlgorithm__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FluxControl_makeAlgorithm__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FluxControl_makeAlgorithm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::FluxControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &,lsst::meas::algorithms::AlgorithmMap const &) const\n"
    "    lsst::meas::algorithms::FluxControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &) const\n"
    "    lsst::meas::algorithms::FluxControl::makeAlgorithm(lsst::afw::table::Schema &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::FluxControl *arg1 = (lsst::meas::algorithms::FluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::FluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::FluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::FluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::FluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::FluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ApertureFluxControl__doc_radii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ApertureFluxControl__doc_radii")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ApertureFluxControl::_doc_radii();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApertureFluxControl__type_radii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ApertureFluxControl__type_radii")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ApertureFluxControl::_type_radii();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApertureFluxControl_radii_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ApertureFluxControl *arg1 = (lsst::meas::algorithms::ApertureFluxControl *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ApertureFluxControl_radii_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApertureFluxControl_radii_set" "', argument " "1"" of type '" "lsst::meas::algorithms::ApertureFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ApertureFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ApertureFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApertureFluxControl_radii_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApertureFluxControl_radii_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->radii = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApertureFluxControl_radii_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ApertureFluxControl *arg1 = (lsst::meas::algorithms::ApertureFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ApertureFluxControl_radii_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApertureFluxControl_radii_get" "', argument " "1"" of type '" "lsst::meas::algorithms::ApertureFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ApertureFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ApertureFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< double,std::allocator< double > > *) & ((arg1)->radii);
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ApertureFluxControl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  float arg2 ;
  int res1 = SWIG_OLDOBJ ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::ApertureFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ApertureFluxControl",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ApertureFluxControl" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ApertureFluxControl" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ApertureFluxControl" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (lsst::meas::algorithms::ApertureFluxControl *)new lsst::meas::algorithms::ApertureFluxControl((std::string const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ApertureFluxControl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::ApertureFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ApertureFluxControl",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ApertureFluxControl" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ApertureFluxControl" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (lsst::meas::algorithms::ApertureFluxControl *)new lsst::meas::algorithms::ApertureFluxControl((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ApertureFluxControl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ApertureFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ApertureFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::ApertureFluxControl *)new lsst::meas::algorithms::ApertureFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ApertureFluxControl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ApertureFluxControl__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ApertureFluxControl__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ApertureFluxControl__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ApertureFluxControl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ApertureFluxControl::ApertureFluxControl(std::string const &,float const)\n"
    "    lsst::meas::algorithms::ApertureFluxControl::ApertureFluxControl(std::string const &)\n"
    "    lsst::meas::algorithms::ApertureFluxControl::ApertureFluxControl()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ApertureFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ApertureFluxControl *arg1 = (lsst::meas::algorithms::ApertureFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ApertureFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ApertureFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::ApertureFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ApertureFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ApertureFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ApertureFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EllipticalApertureFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::EllipticalApertureFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EllipticalApertureFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::EllipticalApertureFluxControl *)new lsst::meas::algorithms::EllipticalApertureFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::EllipticalApertureFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::EllipticalApertureFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EllipticalApertureFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::EllipticalApertureFluxControl *arg1 = (lsst::meas::algorithms::EllipticalApertureFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::EllipticalApertureFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::EllipticalApertureFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EllipticalApertureFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EllipticalApertureFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::EllipticalApertureFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::EllipticalApertureFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::EllipticalApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::EllipticalApertureFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::EllipticalApertureFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::EllipticalApertureFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EllipticalApertureFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PeakLikelihoodFluxControl__doc_warpingKernelName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":PeakLikelihoodFluxControl__doc_warpingKernelName")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::PeakLikelihoodFluxControl::_doc_warpingKernelName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakLikelihoodFluxControl__type_warpingKernelName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":PeakLikelihoodFluxControl__type_warpingKernelName")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::PeakLikelihoodFluxControl::_type_warpingKernelName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakLikelihoodFluxControl_warpingKernelName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PeakLikelihoodFluxControl *arg1 = (lsst::meas::algorithms::PeakLikelihoodFluxControl *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PeakLikelihoodFluxControl_warpingKernelName_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakLikelihoodFluxControl_warpingKernelName_set" "', argument " "1"" of type '" "lsst::meas::algorithms::PeakLikelihoodFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PeakLikelihoodFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PeakLikelihoodFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PeakLikelihoodFluxControl_warpingKernelName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PeakLikelihoodFluxControl_warpingKernelName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->warpingKernelName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakLikelihoodFluxControl_warpingKernelName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PeakLikelihoodFluxControl *arg1 = (lsst::meas::algorithms::PeakLikelihoodFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PeakLikelihoodFluxControl_warpingKernelName_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakLikelihoodFluxControl_warpingKernelName_get" "', argument " "1"" of type '" "lsst::meas::algorithms::PeakLikelihoodFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PeakLikelihoodFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PeakLikelihoodFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->warpingKernelName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakLikelihoodFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PeakLikelihoodFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PeakLikelihoodFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::PeakLikelihoodFluxControl *)new lsst::meas::algorithms::PeakLikelihoodFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PeakLikelihoodFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PeakLikelihoodFluxControl *arg1 = (lsst::meas::algorithms::PeakLikelihoodFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PeakLikelihoodFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakLikelihoodFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::PeakLikelihoodFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PeakLikelihoodFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PeakLikelihoodFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PeakLikelihoodFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PeakLikelihoodFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NaiveFluxControl__doc_radius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":NaiveFluxControl__doc_radius")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::NaiveFluxControl::_doc_radius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NaiveFluxControl__type_radius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":NaiveFluxControl__type_radius")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::NaiveFluxControl::_type_radius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NaiveFluxControl_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveFluxControl *arg1 = (lsst::meas::algorithms::NaiveFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NaiveFluxControl_radius_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NaiveFluxControl_radius_set" "', argument " "1"" of type '" "lsst::meas::algorithms::NaiveFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NaiveFluxControl_radius_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NaiveFluxControl_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveFluxControl *arg1 = (lsst::meas::algorithms::NaiveFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NaiveFluxControl_radius_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NaiveFluxControl_radius_get" "', argument " "1"" of type '" "lsst::meas::algorithms::NaiveFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->radius);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NaiveFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NaiveFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::NaiveFluxControl *)new lsst::meas::algorithms::NaiveFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NaiveFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveFluxControl *arg1 = (lsst::meas::algorithms::NaiveFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NaiveFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NaiveFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::NaiveFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NaiveFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PsfFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PsfFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::PsfFluxControl *)new lsst::meas::algorithms::PsfFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PsfFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PsfFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PsfFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PsfFluxControl *arg1 = (lsst::meas::algorithms::PsfFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PsfFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PsfFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PsfFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::PsfFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PsfFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PsfFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PsfFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SincFluxControl__doc_radius1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__doc_radius1")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_doc_radius1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__type_radius1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__type_radius1")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_type_radius1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_radius1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincFluxControl_radius1_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_radius1_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincFluxControl_radius1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_radius1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincFluxControl_radius1_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_radius1_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->radius1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__doc_radius2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__doc_radius2")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_doc_radius2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__type_radius2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__type_radius2")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_type_radius2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_radius2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincFluxControl_radius2_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_radius2_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincFluxControl_radius2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_radius2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincFluxControl_radius2_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_radius2_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->radius2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__doc_angle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__doc_angle")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_doc_angle();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__type_angle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__type_angle")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_type_angle();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_angle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincFluxControl_angle_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_angle_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincFluxControl_angle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->angle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_angle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincFluxControl_angle_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_angle_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->angle);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__doc_ellipticity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__doc_ellipticity")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_doc_ellipticity();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl__type_ellipticity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SincFluxControl__type_ellipticity")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SincFluxControl::_type_ellipticity();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_ellipticity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincFluxControl_ellipticity_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_ellipticity_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincFluxControl_ellipticity_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ellipticity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincFluxControl_ellipticity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincFluxControl_ellipticity_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincFluxControl_ellipticity_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->ellipticity);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SincFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SincFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::SincFluxControl *)new lsst::meas::algorithms::SincFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SincFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SincFluxControl *arg1 = (lsst::meas::algorithms::SincFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SincFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SincFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::SincFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SincFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SincFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SincFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CentroidAlgorithm_getControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidAlgorithm *arg1 = (lsst::meas::algorithms::CentroidAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::CentroidControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CentroidAlgorithm_getControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CentroidAlgorithm_getControl" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidAlgorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::CentroidControl *) &((lsst::meas::algorithms::CentroidAlgorithm const *)arg1)->getControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > *smartresult = new boost::shared_ptr< const lsst::meas::algorithms::CentroidControl >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CentroidAlgorithm_getKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidAlgorithm *arg1 = (lsst::meas::algorithms::CentroidAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::CentroidAlgorithm::KeyTuple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CentroidAlgorithm_getKeys",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CentroidAlgorithm_getKeys" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidAlgorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::CentroidAlgorithm::KeyTuple *) &((lsst::meas::algorithms::CentroidAlgorithm const *)arg1)->getKeys();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CentroidAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidAlgorithm *arg1 = (lsst::meas::algorithms::CentroidAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CentroidAlgorithm",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CentroidAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidAlgorithm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CentroidAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CentroidControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidControl *arg1 = (lsst::meas::algorithms::CentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CentroidControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CentroidControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::CentroidControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CentroidControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CentroidControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CentroidControl_makeAlgorithm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidControl *arg1 = (lsst::meas::algorithms::CentroidControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  lsst::meas::algorithms::AlgorithmMap *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CentroidControl_makeAlgorithm",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CentroidControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CentroidControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CentroidControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CentroidControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CentroidControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CentroidControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::meas::algorithms::AlgorithmMap * >(argp4);
  {
    try {
      result = ((lsst::meas::algorithms::CentroidControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3,(lsst::meas::algorithms::AlgorithmMap const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CentroidControl_makeAlgorithm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidControl *arg1 = (lsst::meas::algorithms::CentroidControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CentroidControl_makeAlgorithm",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CentroidControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CentroidControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CentroidControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CentroidControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::CentroidControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CentroidControl_makeAlgorithm__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidControl *arg1 = (lsst::meas::algorithms::CentroidControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CentroidControl_makeAlgorithm",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CentroidControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CentroidControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CentroidControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::CentroidControl const *)arg1)->makeAlgorithm(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CentroidAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CentroidControl_makeAlgorithm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CentroidControl_makeAlgorithm__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CentroidControl_makeAlgorithm__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CentroidControl_makeAlgorithm__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CentroidControl_makeAlgorithm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::CentroidControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &,lsst::meas::algorithms::AlgorithmMap const &) const\n"
    "    lsst::meas::algorithms::CentroidControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &) const\n"
    "    lsst::meas::algorithms::CentroidControl::makeAlgorithm(lsst::afw::table::Schema &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CentroidControl *arg1 = (lsst::meas::algorithms::CentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CentroidControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CentroidControl" "', argument " "1"" of type '" "lsst::meas::algorithms::CentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CentroidControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GaussianCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianCentroidControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GaussianCentroidControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::GaussianCentroidControl *)new lsst::meas::algorithms::GaussianCentroidControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::GaussianCentroidControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::GaussianCentroidControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussianCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianCentroidControl *arg1 = (lsst::meas::algorithms::GaussianCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GaussianCentroidControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussianCentroidControl" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussianCentroidControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NaiveCentroidControl__doc_background(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":NaiveCentroidControl__doc_background")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::NaiveCentroidControl::_doc_background();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NaiveCentroidControl__type_background(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":NaiveCentroidControl__type_background")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::NaiveCentroidControl::_type_background();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NaiveCentroidControl_background_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveCentroidControl *arg1 = (lsst::meas::algorithms::NaiveCentroidControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NaiveCentroidControl_background_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NaiveCentroidControl_background_set" "', argument " "1"" of type '" "lsst::meas::algorithms::NaiveCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NaiveCentroidControl_background_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->background = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NaiveCentroidControl_background_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveCentroidControl *arg1 = (lsst::meas::algorithms::NaiveCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NaiveCentroidControl_background_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NaiveCentroidControl_background_get" "', argument " "1"" of type '" "lsst::meas::algorithms::NaiveCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->background);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NaiveCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveCentroidControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NaiveCentroidControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::NaiveCentroidControl *)new lsst::meas::algorithms::NaiveCentroidControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NaiveCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::NaiveCentroidControl *arg1 = (lsst::meas::algorithms::NaiveCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NaiveCentroidControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NaiveCentroidControl" "', argument " "1"" of type '" "lsst::meas::algorithms::NaiveCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::NaiveCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::NaiveCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NaiveCentroidControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SdssCentroidControl__doc_binmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssCentroidControl__doc_binmax")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssCentroidControl::_doc_binmax();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl__type_binmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssCentroidControl__type_binmax")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssCentroidControl::_type_binmax();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl_binmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssCentroidControl_binmax_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssCentroidControl_binmax_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssCentroidControl_binmax_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->binmax = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl_binmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssCentroidControl_binmax_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssCentroidControl_binmax_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->binmax);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl__doc_peakMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssCentroidControl__doc_peakMin")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssCentroidControl::_doc_peakMin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl__type_peakMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssCentroidControl__type_peakMin")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssCentroidControl::_type_peakMin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl_peakMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssCentroidControl_peakMin_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssCentroidControl_peakMin_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssCentroidControl_peakMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->peakMin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl_peakMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssCentroidControl_peakMin_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssCentroidControl_peakMin_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->peakMin);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl__doc_wfac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssCentroidControl__doc_wfac")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssCentroidControl::_doc_wfac();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl__type_wfac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssCentroidControl__type_wfac")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssCentroidControl::_type_wfac();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl_wfac_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssCentroidControl_wfac_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssCentroidControl_wfac_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssCentroidControl_wfac_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->wfac = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssCentroidControl_wfac_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssCentroidControl_wfac_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssCentroidControl_wfac_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->wfac);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SdssCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SdssCentroidControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::SdssCentroidControl *)new lsst::meas::algorithms::SdssCentroidControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SdssCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssCentroidControl *arg1 = (lsst::meas::algorithms::SdssCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SdssCentroidControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SdssCentroidControl" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SdssCentroidControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ShapeAlgorithm_getControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeAlgorithm *arg1 = (lsst::meas::algorithms::ShapeAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::ShapeControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeAlgorithm_getControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeAlgorithm_getControl" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeAlgorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::ShapeControl *) &((lsst::meas::algorithms::ShapeAlgorithm const *)arg1)->getControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > *smartresult = new boost::shared_ptr< const lsst::meas::algorithms::ShapeControl >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeAlgorithm_getKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeAlgorithm *arg1 = (lsst::meas::algorithms::ShapeAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::ShapeAlgorithm::KeyTuple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeAlgorithm_getKeys",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeAlgorithm_getKeys" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeAlgorithm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::ShapeAlgorithm::KeyTuple *) &((lsst::meas::algorithms::ShapeAlgorithm const *)arg1)->getKeys();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShapeAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeAlgorithm *arg1 = (lsst::meas::algorithms::ShapeAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeAlgorithm",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeAlgorithm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeAlgorithm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeAlgorithm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapeAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ShapeControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeControl *arg1 = (lsst::meas::algorithms::ShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::ShapeControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeControl_makeAlgorithm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeControl *arg1 = (lsst::meas::algorithms::ShapeControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  lsst::meas::algorithms::AlgorithmMap *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeControl_makeAlgorithm",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapeControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeControl_makeAlgorithm" "', argument " "4"" of type '" "lsst::meas::algorithms::AlgorithmMap const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::meas::algorithms::AlgorithmMap * >(argp4);
  {
    try {
      result = ((lsst::meas::algorithms::ShapeControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3,(lsst::meas::algorithms::AlgorithmMap const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeControl_makeAlgorithm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeControl *arg1 = (lsst::meas::algorithms::ShapeControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeControl_makeAlgorithm",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeControl_makeAlgorithm" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::ShapeControl const *)arg1)->makeAlgorithm(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeControl_makeAlgorithm__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeControl *arg1 = (lsst::meas::algorithms::ShapeControl *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeControl_makeAlgorithm",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeControl_makeAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeControl_makeAlgorithm" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::ShapeControl const *)arg1)->makeAlgorithm(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ShapeAlgorithm >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeControl_makeAlgorithm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ShapeControl_makeAlgorithm__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeControl_makeAlgorithm__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapeControl_makeAlgorithm__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeControl_makeAlgorithm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::ShapeControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &,lsst::meas::algorithms::AlgorithmMap const &) const\n"
    "    lsst::meas::algorithms::ShapeControl::makeAlgorithm(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &) const\n"
    "    lsst::meas::algorithms::ShapeControl::makeAlgorithm(lsst::afw::table::Schema &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ShapeControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ShapeControl *arg1 = (lsst::meas::algorithms::ShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ShapeControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeControl" "', argument " "1"" of type '" "lsst::meas::algorithms::ShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapeControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ClassificationControl__doc_fluxRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationControl__doc_fluxRatio")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ClassificationControl::_doc_fluxRatio();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl__type_fluxRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationControl__type_fluxRatio")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ClassificationControl::_type_fluxRatio();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_fluxRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationControl_fluxRatio_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_fluxRatio_set" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationControl_fluxRatio_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fluxRatio = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_fluxRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationControl_fluxRatio_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_fluxRatio_get" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->fluxRatio);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl__doc_modelErrFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationControl__doc_modelErrFactor")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ClassificationControl::_doc_modelErrFactor();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl__type_modelErrFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationControl__type_modelErrFactor")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ClassificationControl::_type_modelErrFactor();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_modelErrFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationControl_modelErrFactor_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_modelErrFactor_set" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationControl_modelErrFactor_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->modelErrFactor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_modelErrFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationControl_modelErrFactor_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_modelErrFactor_get" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->modelErrFactor);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl__doc_psfErrFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationControl__doc_psfErrFactor")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ClassificationControl::_doc_psfErrFactor();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl__type_psfErrFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationControl__type_psfErrFactor")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::ClassificationControl::_type_psfErrFactor();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_psfErrFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationControl_psfErrFactor_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_psfErrFactor_set" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationControl_psfErrFactor_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->psfErrFactor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_psfErrFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationControl_psfErrFactor_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_psfErrFactor_get" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->psfErrFactor);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClassificationControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::ClassificationControl *)new lsst::meas::algorithms::ClassificationControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::ClassificationControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClassificationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::ClassificationControl *arg1 = (lsst::meas::algorithms::ClassificationControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClassificationControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClassificationControl" "', argument " "1"" of type '" "lsst::meas::algorithms::ClassificationControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::ClassificationControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::ClassificationControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClassificationControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PixelFlagControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PixelFlagControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PixelFlagControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::PixelFlagControl *)new lsst::meas::algorithms::PixelFlagControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelFlagControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PixelFlagControl *arg1 = (lsst::meas::algorithms::PixelFlagControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelFlagControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelFlagControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::PixelFlagControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PixelFlagControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PixelFlagControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PixelFlagControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::PixelFlagControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PixelFlagControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::PixelFlagControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PixelFlagControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::PixelFlagControl *arg1 = (lsst::meas::algorithms::PixelFlagControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PixelFlagControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PixelFlagControl" "', argument " "1"" of type '" "lsst::meas::algorithms::PixelFlagControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PixelFlagControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::PixelFlagControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::PixelFlagControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PixelFlagControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SkyCoordControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SkyCoordControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SkyCoordControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::SkyCoordControl *)new lsst::meas::algorithms::SkyCoordControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkyCoordControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SkyCoordControl *arg1 = (lsst::meas::algorithms::SkyCoordControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SkyCoordControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SkyCoordControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::SkyCoordControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SkyCoordControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SkyCoordControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SkyCoordControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::SkyCoordControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SkyCoordControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::SkyCoordControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SkyCoordControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SkyCoordControl *arg1 = (lsst::meas::algorithms::SkyCoordControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SkyCoordControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SkyCoordControl" "', argument " "1"" of type '" "lsst::meas::algorithms::SkyCoordControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SkyCoordControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SkyCoordControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SkyCoordControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SkyCoordControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RecordCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::RecordCentroidControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RecordCentroidControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::RecordCentroidControl *)new lsst::meas::algorithms::RecordCentroidControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RecordCentroidControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::RecordCentroidControl *arg1 = (lsst::meas::algorithms::RecordCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RecordCentroidControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RecordCentroidControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::RecordCentroidControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::RecordCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::RecordCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::RecordCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::RecordCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::RecordCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::RecordCentroidControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RecordCentroidControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::RecordCentroidControl *arg1 = (lsst::meas::algorithms::RecordCentroidControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RecordCentroidControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RecordCentroidControl" "', argument " "1"" of type '" "lsst::meas::algorithms::RecordCentroidControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::RecordCentroidControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::RecordCentroidControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::RecordCentroidControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RecordCentroidControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SdssShapeControl__doc_background(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__doc_background")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_doc_background();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__type_background(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__type_background")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_type_background();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_background_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssShapeControl_background_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_background_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssShapeControl_background_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->background = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_background_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssShapeControl_background_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_background_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->background);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__doc_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__doc_maxIter")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_doc_maxIter();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__type_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__type_maxIter")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_type_maxIter();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_maxIter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssShapeControl_maxIter_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_maxIter_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssShapeControl_maxIter_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxIter = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_maxIter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssShapeControl_maxIter_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_maxIter_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->maxIter);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__doc_tol1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__doc_tol1")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_doc_tol1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__type_tol1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__type_tol1")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_type_tol1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_tol1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssShapeControl_tol1_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_tol1_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssShapeControl_tol1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->tol1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_tol1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssShapeControl_tol1_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_tol1_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->tol1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__doc_tol2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__doc_tol2")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_doc_tol2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl__type_tol2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SdssShapeControl__type_tol2")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::SdssShapeControl::_type_tol2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_tol2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SdssShapeControl_tol2_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_tol2_set" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SdssShapeControl_tol2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->tol2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SdssShapeControl_tol2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SdssShapeControl_tol2_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SdssShapeControl_tol2_get" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->tol2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SdssShapeControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SdssShapeControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::SdssShapeControl *)new lsst::meas::algorithms::SdssShapeControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SdssShapeControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::SdssShapeControl *arg1 = (lsst::meas::algorithms::SdssShapeControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SdssShapeControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SdssShapeControl" "', argument " "1"" of type '" "lsst::meas::algorithms::SdssShapeControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::SdssShapeControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::SdssShapeControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SdssShapeControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_fixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_fixed")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_fixed();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_fixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_fixed")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_fixed();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_fixed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_fixed_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_fixed_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianFluxControl_fixed_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->fixed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_fixed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_fixed_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_fixed_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->fixed);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_background(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_background")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_background();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_background(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_background")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_background();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_background_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_background_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_background_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianFluxControl_background_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->background = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_background_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_background_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_background_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->background);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_shiftmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_shiftmax")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_shiftmax();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_shiftmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_shiftmax")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_shiftmax();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_shiftmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_shiftmax_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_shiftmax_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianFluxControl_shiftmax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->shiftmax = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_shiftmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_shiftmax_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_shiftmax_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->shiftmax);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_centroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_centroid")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_centroid();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_centroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_centroid")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_centroid();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_centroid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_centroid_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_centroid_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianFluxControl_centroid_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianFluxControl_centroid_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->centroid = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_centroid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_centroid_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_centroid_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->centroid);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_shape")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_shape();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_shape")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_shape();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_shape_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_shape_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_shape_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianFluxControl_shape_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianFluxControl_shape_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->shape = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_shape_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_shape_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_shape_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->shape);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_maxIter")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_maxIter();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_maxIter")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_maxIter();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_maxIter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_maxIter_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_maxIter_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianFluxControl_maxIter_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxIter = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_maxIter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_maxIter_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_maxIter_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->maxIter);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_tol1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_tol1")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_tol1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_tol1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_tol1")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_tol1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_tol1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_tol1_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_tol1_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianFluxControl_tol1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->tol1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_tol1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_tol1_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_tol1_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->tol1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__doc_tol2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__doc_tol2")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_doc_tol2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl__type_tol2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianFluxControl__type_tol2")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::GaussianFluxControl::_type_tol2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_tol2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianFluxControl_tol2_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_tol2_set" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianFluxControl_tol2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->tol2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianFluxControl_tol2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianFluxControl_tol2_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianFluxControl_tol2_get" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->tol2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GaussianFluxControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::GaussianFluxControl *)new lsst::meas::algorithms::GaussianFluxControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussianFluxControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::GaussianFluxControl *arg1 = (lsst::meas::algorithms::GaussianFluxControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GaussianFluxControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussianFluxControl" "', argument " "1"" of type '" "lsst::meas::algorithms::GaussianFluxControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::GaussianFluxControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::GaussianFluxControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussianFluxControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_doApCorr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_doApCorr")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_doApCorr();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_doApCorr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_doApCorr")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_doApCorr();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doApCorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_doApCorr_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doApCorr_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrectFluxesControl_doApCorr_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->doApCorr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doApCorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_doApCorr_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doApCorr_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->doApCorr);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_doFlagApCorrFailures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_doFlagApCorrFailures")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_doFlagApCorrFailures();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_doFlagApCorrFailures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_doFlagApCorrFailures")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_doFlagApCorrFailures();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doFlagApCorrFailures_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_doFlagApCorrFailures_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doFlagApCorrFailures_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrectFluxesControl_doFlagApCorrFailures_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->doFlagApCorrFailures = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doFlagApCorrFailures_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_doFlagApCorrFailures_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doFlagApCorrFailures_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->doFlagApCorrFailures);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_doTieScaledFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_doTieScaledFluxes")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_doTieScaledFluxes();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_doTieScaledFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_doTieScaledFluxes")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_doTieScaledFluxes();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doTieScaledFluxes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_doTieScaledFluxes_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doTieScaledFluxes_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrectFluxesControl_doTieScaledFluxes_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->doTieScaledFluxes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doTieScaledFluxes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_doTieScaledFluxes_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doTieScaledFluxes_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->doTieScaledFluxes);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_doFlagTieFailures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_doFlagTieFailures")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_doFlagTieFailures();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_doFlagTieFailures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_doFlagTieFailures")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_doFlagTieFailures();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doFlagTieFailures_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_doFlagTieFailures_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doFlagTieFailures_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrectFluxesControl_doFlagTieFailures_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->doFlagTieFailures = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_doFlagTieFailures_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_doFlagTieFailures_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_doFlagTieFailures_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->doFlagTieFailures);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_apCorrRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_apCorrRadius")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_apCorrRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_apCorrRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_apCorrRadius")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_apCorrRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_apCorrRadius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_apCorrRadius_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_apCorrRadius_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrectFluxesControl_apCorrRadius_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->apCorrRadius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_apCorrRadius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_apCorrRadius_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_apCorrRadius_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->apCorrRadius);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_canonicalFluxName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_canonicalFluxName")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_canonicalFluxName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_canonicalFluxName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_canonicalFluxName")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_canonicalFluxName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_canonicalFluxName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_canonicalFluxName_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_canonicalFluxName_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CorrectFluxesControl_canonicalFluxName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CorrectFluxesControl_canonicalFluxName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->canonicalFluxName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_canonicalFluxName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_canonicalFluxName_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_canonicalFluxName_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->canonicalFluxName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__doc_canonicalFluxIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__doc_canonicalFluxIndex")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_doc_canonicalFluxIndex();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl__type_canonicalFluxIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":CorrectFluxesControl__type_canonicalFluxIndex")) SWIG_fail;
  {
    try {
      result = (char *)lsst::meas::algorithms::CorrectFluxesControl::_type_canonicalFluxIndex();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_canonicalFluxIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrectFluxesControl_canonicalFluxIndex_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_canonicalFluxIndex_set" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrectFluxesControl_canonicalFluxIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->canonicalFluxIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_canonicalFluxIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_canonicalFluxIndex_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_canonicalFluxIndex_get" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->canonicalFluxIndex);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CorrectFluxesControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CorrectFluxesControl")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::CorrectFluxesControl *)new lsst::meas::algorithms::CorrectFluxesControl();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CorrectFluxesControl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrectFluxesControl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrectFluxesControl_clone" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::CorrectFluxesControl const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CorrectFluxesControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::CorrectFluxesControl *arg1 = (lsst::meas::algorithms::CorrectFluxesControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CorrectFluxesControl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CorrectFluxesControl" "', argument " "1"" of type '" "lsst::meas::algorithms::CorrectFluxesControl *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::CorrectFluxesControl > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::CorrectFluxesControl * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CorrectFluxesControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MeasureSources_getAlgorithms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::MeasureSources::AlgorithmList *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeasureSources_getAlgorithms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_getAlgorithms" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    try {
      result = (lsst::meas::algorithms::MeasureSources::AlgorithmList *) &((lsst::meas::algorithms::MeasureSources const *)arg1)->getAlgorithms();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::geom::Point2D *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MeasureSources_apply" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::geom::Point2D const &)*arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::geom::Point2D *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp4);
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::geom::Point2D const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSources_apply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::table::SourceRecord *arg4 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord const > tempshared4 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(tempshared4.get());
    } else {
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4)->get());
    }
  }
  {
    int newmem = 0;
    res5 = SWIG_ConvertPtrAndOwn(obj4, &argp5, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MeasureSources_apply" "', argument " "5"" of type '" "boost::shared_ptr< lsst::afw::image::Wcs const >""'"); 
    }
    if (argp5) arg5 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::image::Wcs const > * >(argp5));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::image::Wcs const > * >(argp5);
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::table::SourceRecord const &)*arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::table::SourceRecord *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord const > tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(tempshared4.get());
    } else {
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::table::SourceRecord const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::geom::Point2D *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MeasureSources_apply" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::geom::Point2D const &)*arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::geom::Point2D *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::geom::Point2D const &""'"); 
  }
  arg4 = reinterpret_cast< lsst::afw::geom::Point2D * >(argp4);
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::geom::Point2D const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSources_apply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::table::SourceRecord *arg4 = 0 ;
  boost::shared_ptr< lsst::afw::image::Wcs const > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord const > tempshared4 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(tempshared4.get());
    } else {
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4)->get());
    }
  }
  {
    int newmem = 0;
    res5 = SWIG_ConvertPtrAndOwn(obj4, &argp5, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MeasureSources_apply" "', argument " "5"" of type '" "boost::shared_ptr< lsst::afw::image::Wcs const >""'"); 
    }
    if (argp5) arg5 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::image::Wcs const > * >(argp5));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::image::Wcs const > * >(argp5);
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::table::SourceRecord const &)*arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  lsst::afw::table::SourceRecord *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord const > tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeasureSources_apply",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_apply" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_apply" "', argument " "4"" of type '" "lsst::afw::table::SourceRecord const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4);
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(tempshared4.get());
    } else {
      arg4 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::table::SourceRecord > * >(argp4)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR apply< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3,(lsst::afw::table::SourceRecord const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_apply(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSources_apply__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSources_apply__SWIG_12(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MeasureSources_apply__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MeasureSources_apply__SWIG_11(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MeasureSources_apply__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MeasureSources_apply__SWIG_14(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MeasureSources_apply__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            _v = PyBool_Check(argv[4]) ? 1 : 0;
            if (_v) {
              return _wrap_MeasureSources_apply__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MeasureSources_apply__SWIG_13(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            _v = PyBool_Check(argv[4]) ? 1 : 0;
            if (_v) {
              return _wrap_MeasureSources_apply__SWIG_10(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MeasureSources_apply'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::MeasureSources::apply< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::geom::Point2D const &,bool) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::geom::Point2D const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::table::SourceRecord const &,boost::shared_ptr< lsst::afw::image::Wcs const >) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::table::SourceRecord const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::geom::Point2D const &,bool) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::geom::Point2D const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::table::SourceRecord const &,boost::shared_ptr< lsst::afw::image::Wcs const >) const\n"
    "    lsst::meas::algorithms::MeasureSources::apply< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::table::SourceRecord const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeasureSources_applyWithCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSources_applyWithCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_applyWithCoord" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_applyWithCoord" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithCoord" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_applyWithCoord" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithCoord" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR applyWithCoord< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_applyWithCoord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSources_applyWithCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_applyWithCoord" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_applyWithCoord" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithCoord" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_applyWithCoord" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithCoord" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR applyWithCoord< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_applyWithCoord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSources_applyWithCoord__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSources_applyWithCoord__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MeasureSources_applyWithCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::MeasureSources::applyWithCoord< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::applyWithCoord< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeasureSources_applyWithPixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSources_applyWithPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_applyWithPixel" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_applyWithPixel" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithPixel" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_applyWithPixel" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithPixel" "', argument " "3"" of type '" "lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR applyWithPixel< float >(*arg2,(lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_applyWithPixel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  lsst::afw::table::SourceRecord *arg2 = 0 ;
  lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::table::SourceRecord > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSources_applyWithPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSources_applyWithPixel" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSources_applyWithPixel" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithPixel" "', argument " "2"" of type '" "lsst::afw::table::SourceRecord &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2);
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::table::SourceRecord * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::table::SourceRecord > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSources_applyWithPixel" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSources_applyWithPixel" "', argument " "3"" of type '" "lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3);
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared3.get());
    } else {
      arg3 = const_cast< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::Exposure<double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp3)->get());
    }
  }
  {
    try {
      ((lsst::meas::algorithms::MeasureSources const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR applyWithPixel< double >(*arg2,(lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSources_applyWithPixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSources_applyWithPixel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSources_applyWithPixel__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MeasureSources_applyWithPixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::MeasureSources::applyWithPixel< float >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &) const\n"
    "    lsst::meas::algorithms::MeasureSources::applyWithPixel< double >(lsst::afw::table::SourceRecord &,lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MeasureSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSources *arg1 = (lsst::meas::algorithms::MeasureSources *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MeasureSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeasureSources" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSources *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSources * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeasureSources_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MeasureSourcesBuilder_addAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSourcesBuilder *arg1 = (lsst::meas::algorithms::MeasureSourcesBuilder *) 0 ;
  lsst::meas::algorithms::AlgorithmControl *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::MeasureSourcesBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeasureSourcesBuilder_addAlgorithm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSourcesBuilder_addAlgorithm" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSourcesBuilder *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSourcesBuilder * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSourcesBuilder_addAlgorithm" "', argument " "2"" of type '" "lsst::meas::algorithms::AlgorithmControl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSourcesBuilder_addAlgorithm" "', argument " "2"" of type '" "lsst::meas::algorithms::AlgorithmControl const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::AlgorithmControl * >(reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::AlgorithmControl > * >(argp2)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::MeasureSourcesBuilder *) &(arg1)->addAlgorithm((lsst::meas::algorithms::AlgorithmControl const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSourcesBuilder_setCentroider(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSourcesBuilder *arg1 = (lsst::meas::algorithms::MeasureSourcesBuilder *) 0 ;
  lsst::meas::algorithms::CentroidControl *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::CentroidControl const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::meas::algorithms::MeasureSourcesBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeasureSourcesBuilder_setCentroider",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSourcesBuilder_setCentroider" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSourcesBuilder *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSourcesBuilder * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSourcesBuilder_setCentroider" "', argument " "2"" of type '" "lsst::meas::algorithms::CentroidControl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSourcesBuilder_setCentroider" "', argument " "2"" of type '" "lsst::meas::algorithms::CentroidControl const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp2);
      arg2 = const_cast< lsst::meas::algorithms::CentroidControl * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::meas::algorithms::CentroidControl * >(reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::CentroidControl > * >(argp2)->get());
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::MeasureSourcesBuilder *) &(arg1)->setCentroider((lsst::meas::algorithms::CentroidControl const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSourcesBuilder_build__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSourcesBuilder *arg1 = (lsst::meas::algorithms::MeasureSourcesBuilder *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  boost::shared_ptr< lsst::daf::base::PropertyList > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< lsst::meas::algorithms::MeasureSources > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeasureSourcesBuilder_build",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSourcesBuilder_build" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSourcesBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSourcesBuilder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSourcesBuilder_build" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSourcesBuilder_build" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeasureSourcesBuilder_build" "', argument " "3"" of type '" "boost::shared_ptr< lsst::daf::base::PropertyList > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< boost::shared_ptr< lsst::daf::base::PropertyList > * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = ((lsst::meas::algorithms::MeasureSourcesBuilder const *)arg1)->build(*arg2,(boost::shared_ptr< lsst::daf::base::PropertyList > const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::meas::algorithms::MeasureSources(static_cast< const lsst::meas::algorithms::MeasureSources& >(result))), SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSourcesBuilder_build__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSourcesBuilder *arg1 = (lsst::meas::algorithms::MeasureSourcesBuilder *) 0 ;
  lsst::afw::table::Schema *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< lsst::meas::algorithms::MeasureSources > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeasureSourcesBuilder_build",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeasureSourcesBuilder_build" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSourcesBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSourcesBuilder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__table__Schema,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeasureSourcesBuilder_build" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeasureSourcesBuilder_build" "', argument " "2"" of type '" "lsst::afw::table::Schema &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::table::Schema * >(argp2);
  {
    try {
      result = ((lsst::meas::algorithms::MeasureSourcesBuilder const *)arg1)->build(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::meas::algorithms::MeasureSources(static_cast< const lsst::meas::algorithms::MeasureSources& >(result))), SWIGTYPE_p_lsst__meas__algorithms__MeasureSources, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeasureSourcesBuilder_build(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeasureSourcesBuilder_build__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lsst__afw__table__Schema, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeasureSourcesBuilder_build__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MeasureSourcesBuilder_build'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::MeasureSourcesBuilder::build(lsst::afw::table::Schema &,boost::shared_ptr< lsst::daf::base::PropertyList > const &) const\n"
    "    lsst::meas::algorithms::MeasureSourcesBuilder::build(lsst::afw::table::Schema &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_MeasureSourcesBuilder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::MeasureSourcesBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MeasureSourcesBuilder",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeasureSourcesBuilder" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeasureSourcesBuilder" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (lsst::meas::algorithms::MeasureSourcesBuilder *)new lsst::meas::algorithms::MeasureSourcesBuilder((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeasureSourcesBuilder__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSourcesBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MeasureSourcesBuilder")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::MeasureSourcesBuilder *)new lsst::meas::algorithms::MeasureSourcesBuilder();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeasureSourcesBuilder(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MeasureSourcesBuilder__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MeasureSourcesBuilder__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MeasureSourcesBuilder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::MeasureSourcesBuilder::MeasureSourcesBuilder(std::string const &)\n"
    "    lsst::meas::algorithms::MeasureSourcesBuilder::MeasureSourcesBuilder()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MeasureSourcesBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::MeasureSourcesBuilder *arg1 = (lsst::meas::algorithms::MeasureSourcesBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MeasureSourcesBuilder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeasureSourcesBuilder" "', argument " "1"" of type '" "lsst::meas::algorithms::MeasureSourcesBuilder *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::MeasureSourcesBuilder * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeasureSourcesBuilder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__meas__algorithms__MeasureSourcesBuilder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_lpc_1_c1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable lpc_1_c1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_lpc_1_c1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(lsst::meas::algorithms::interp::lpc_1_c1));
  return pyobj;
}


SWIGINTERN int Swig_var_lpc_1_c2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable lpc_1_c2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_lpc_1_c2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(lsst::meas::algorithms::interp::lpc_1_c2));
  return pyobj;
}


SWIGINTERN int Swig_var_lpc_1s2_c1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable lpc_1s2_c1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_lpc_1s2_c1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(lsst::meas::algorithms::interp::lpc_1s2_c1));
  return pyobj;
}


SWIGINTERN int Swig_var_lpc_1s2_c2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable lpc_1s2_c2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_lpc_1s2_c2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(lsst::meas::algorithms::interp::lpc_1s2_c2));
  return pyobj;
}


SWIGINTERN int Swig_var_min2GaussianBias_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable min2GaussianBias is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_min2GaussianBias_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(lsst::meas::algorithms::interp::min2GaussianBias));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Defect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::BoxI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::Defect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Defect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__Box2I,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Defect" "', argument " "1"" of type '" "lsst::afw::geom::BoxI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Defect" "', argument " "1"" of type '" "lsst::afw::geom::BoxI const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::BoxI * >(argp1);
  {
    try {
      result = (lsst::meas::algorithms::Defect *)new lsst::meas::algorithms::Defect((lsst::afw::geom::BoxI const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Defect > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Defect >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Defect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Defect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Defect")) SWIG_fail;
  {
    try {
      result = (lsst::meas::algorithms::Defect *)new lsst::meas::algorithms::Defect();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Defect > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Defect >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Defect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Defect__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__Box2I, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Defect__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Defect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::Defect::Defect(lsst::afw::geom::BoxI const &)\n"
    "    lsst::meas::algorithms::Defect::Defect()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Defect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Defect *arg1 = (lsst::meas::algorithms::Defect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Defect",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Defect" "', argument " "1"" of type '" "lsst::meas::algorithms::Defect *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Defect > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Defect_classify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Defect *arg1 = (lsst::meas::algorithms::Defect *) 0 ;
  lsst::meas::algorithms::Defect::DefectPosition arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Defect_classify",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Defect_classify" "', argument " "1"" of type '" "lsst::meas::algorithms::Defect *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Defect > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Defect_classify" "', argument " "2"" of type '" "lsst::meas::algorithms::Defect::DefectPosition""'");
  } 
  arg2 = static_cast< lsst::meas::algorithms::Defect::DefectPosition >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Defect_classify" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      (arg1)->classify(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Defect_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Defect *arg1 = (lsst::meas::algorithms::Defect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Defect_getType",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Defect_getType" "', argument " "1"" of type '" "lsst::meas::algorithms::Defect const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Defect > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (unsigned int)((lsst::meas::algorithms::Defect const *)arg1)->getType();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Defect_getPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::Defect *arg1 = (lsst::meas::algorithms::Defect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect const > tempshared1 ;
  boost::shared_ptr< lsst::meas::algorithms::Defect const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::meas::algorithms::Defect::DefectPosition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Defect_getPos",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Defect_getPos" "', argument " "1"" of type '" "lsst::meas::algorithms::Defect const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Defect > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::meas::algorithms::Defect > * >(argp1);
      arg1 = const_cast< lsst::meas::algorithms::Defect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (lsst::meas::algorithms::Defect::DefectPosition)((lsst::meas::algorithms::Defect const *)arg1)->getPos();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Defect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_findCosmicRays__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg1 = 0 ;
  lsst::afw::detection::Psf *arg2 = 0 ;
  double arg3 ;
  lsst::pex::policy::Policy *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > tempshared2 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< lsst::pex::policy::Policy const > tempshared4 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::detection::Footprint >,std::allocator< boost::shared_ptr< lsst::afw::detection::Footprint > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:findCosmicRays",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "findCosmicRays" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findCosmicRays" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "findCosmicRays" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findCosmicRays" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      arg2 = const_cast< lsst::afw::detection::Psf * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::detection::Psf * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "findCosmicRays" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "findCosmicRays" "', argument " "4"" of type '" "lsst::pex::policy::Policy const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findCosmicRays" "', argument " "4"" of type '" "lsst::pex::policy::Policy const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp4);
      arg4 = const_cast< lsst::pex::policy::Policy * >(tempshared4.get());
    } else {
      arg4 = const_cast< lsst::pex::policy::Policy * >(reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp4)->get());
    }
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "findCosmicRays" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR findCosmicRays< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(*arg1,(lsst::afw::detection::Psf const &)*arg2,arg3,(lsst::pex::policy::Policy const &)*arg4,arg5);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr<lsst::afw::detection::Footprint>,std::allocator< boost::shared_ptr< lsst::afw::detection::Footprint > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_findCosmicRays__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg1 = 0 ;
  lsst::afw::detection::Psf *arg2 = 0 ;
  double arg3 ;
  lsst::pex::policy::Policy *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > tempshared2 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< lsst::pex::policy::Policy const > tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::detection::Footprint >,std::allocator< boost::shared_ptr< lsst::afw::detection::Footprint > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:findCosmicRays",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "findCosmicRays" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findCosmicRays" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "findCosmicRays" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findCosmicRays" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      arg2 = const_cast< lsst::afw::detection::Psf * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::detection::Psf * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "findCosmicRays" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "findCosmicRays" "', argument " "4"" of type '" "lsst::pex::policy::Policy const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findCosmicRays" "', argument " "4"" of type '" "lsst::pex::policy::Policy const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp4);
      arg4 = const_cast< lsst::pex::policy::Policy * >(tempshared4.get());
    } else {
      arg4 = const_cast< lsst::pex::policy::Policy * >(reinterpret_cast< boost::shared_ptr< const lsst::pex::policy::Policy > * >(argp4)->get());
    }
  }
  {
    try {
      result = lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR findCosmicRays< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(*arg1,(lsst::afw::detection::Psf const &)*arg2,arg3,(lsst::pex::policy::Policy const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr<lsst::afw::detection::Footprint>,std::allocator< boost::shared_ptr< lsst::afw::detection::Footprint > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_findCosmicRays(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_findCosmicRays__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            _v = PyBool_Check(argv[4]) ? 1 : 0;
            if (_v) {
              return _wrap_findCosmicRays__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'findCosmicRays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::findCosmicRays< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &,lsst::afw::detection::Psf const &,double const,lsst::pex::policy::Policy const &,bool const)\n"
    "    lsst::meas::algorithms::findCosmicRays< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &,lsst::afw::detection::Psf const &,double const,lsst::pex::policy::Policy const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_interpolateOverDefects__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg1 = 0 ;
  lsst::afw::detection::Psf *arg2 = 0 ;
  std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared3 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:interpolateOverDefects",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolateOverDefects" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateOverDefects" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolateOverDefects" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateOverDefects" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      arg2 = const_cast< lsst::afw::detection::Psf * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::detection::Psf * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolateOverDefects" "', argument " "3"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateOverDefects" "', argument " "3"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp3);
      arg3 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > * >(tempshared3.get());
    } else {
      arg3 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > * >(reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp3)->get());
    }
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "interpolateOverDefects" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR interpolateOverDefects< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(*arg1,(lsst::afw::detection::Psf const &)*arg2,*arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolateOverDefects__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg1 = 0 ;
  lsst::afw::detection::Psf *arg2 = 0 ;
  std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::detection::Psf const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:interpolateOverDefects",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolateOverDefects" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateOverDefects" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr<  lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolateOverDefects" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateOverDefects" "', argument " "2"" of type '" "lsst::afw::detection::Psf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2);
      arg2 = const_cast< lsst::afw::detection::Psf * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::detection::Psf * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::detection::Psf > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolateOverDefects" "', argument " "3"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateOverDefects" "', argument " "3"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp3);
      arg3 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > * >(tempshared3.get());
    } else {
      arg3 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > * >(reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp3)->get());
    }
  }
  {
    try {
      lsst::meas::algorithms::SWIGTEMPLATEDISAMBIGUATOR interpolateOverDefects< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(*arg1,(lsst::afw::detection::Psf const &)*arg2,*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolateOverDefects(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_interpolateOverDefects__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_interpolateOverDefects__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'interpolateOverDefects'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::interpolateOverDefects< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &,lsst::afw::detection::Psf const &,std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > &,double)\n"
    "    lsst::meas::algorithms::interpolateOverDefects< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > >(lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > &,lsst::afw::detection::Psf const &,std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_iterator",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_iterator" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg__iterator(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT___nonzero__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___nonzero__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT___bool__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___bool__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____bool__((std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT___len__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___len__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____len__((std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_pop",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_pop" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      try {
        result = std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Defect > *smartresult = result ? new boost::shared_ptr<  lsst::meas::algorithms::Defect >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___getslice__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DefectListT___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *)std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > *smartresult = result ? new boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, SWIG_POINTER_OWN | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DefectListT___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___setslice__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DefectListT___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *ptr = (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DefectListT___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DefectListT___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___setslice__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DefectListT___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DefectListT___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DefectListT___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__setslice__(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__setslice__(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___delslice__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DefectListT___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT___delitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___delitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT___getitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___getitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *)std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > *smartresult = result ? new boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___setitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *ptr = (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DefectListT___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DefectListT___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT___setitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___setitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT___delitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___delitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DefectListT___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DefectListT___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__delitem__(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT___getitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___getitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *) &std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Defect > *smartresult = *result ? new boost::shared_ptr<  lsst::meas::algorithms::Defect >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DefectListT___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DefectListT___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__getitem__(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT___setitem__" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DefectListT___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      try {
        std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< lsst::meas::algorithms::Defect > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DefectListT___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DefectListT___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DefectListT___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > const &)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::__setitem__(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::difference_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT_append",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_append" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DefectListT_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      std_vector_Sl_lsst_meas_algorithms_Defect_Ptr_Sg__append(arg1,(boost::shared_ptr< lsst::meas::algorithms::Defect > const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefectListT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DefectListT")) SWIG_fail;
  {
    try {
      result = (std::vector< lsst::meas::algorithms::Defect::Ptr > *)new std::vector< lsst::meas::algorithms::Defect::Ptr >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > *smartresult = result ? new boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefectListT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DefectListT",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *ptr = (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DefectListT" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DefectListT" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< lsst::meas::algorithms::Defect::Ptr > *)new std::vector< lsst::meas::algorithms::Defect::Ptr >((std::vector< lsst::meas::algorithms::Defect::Ptr > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > *smartresult = result ? new boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_empty",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_empty" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((std::vector< lsst::meas::algorithms::Defect::Ptr > const *)arg1)->empty();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_size",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_size" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((std::vector< lsst::meas::algorithms::Defect::Ptr > const *)arg1)->size();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_clear",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_clear" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->clear();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT_swap",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_swap" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DefectListT_swap" "', argument " "2"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DefectListT_swap" "', argument " "2"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp2);
      arg2 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared2.get());
    } else {
      arg2 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp2)->get());
    }
  }
  {
    try {
      (arg1)->swap(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_get_allocator",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_get_allocator" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((std::vector< lsst::meas::algorithms::Defect::Ptr > const *)arg1)->get_allocator();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_begin",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_begin" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->begin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_end",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_end" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->end();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_rbegin",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_rbegin" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->rbegin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_rend",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_rend" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->rend();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefectListT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DefectListT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DefectListT" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val1);
  {
    try {
      result = (std::vector< lsst::meas::algorithms::Defect::Ptr > *)new std::vector< lsst::meas::algorithms::Defect::Ptr >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > *smartresult = result ? new boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_pop_back",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_pop_back" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->pop_back();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT_resize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_resize" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT_erase",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_erase" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_erase" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DefectListT_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DefectListT_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::erase(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::erase(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DefectListT__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg1 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DefectListT",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DefectListT" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DefectListT" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      result = (std::vector< lsst::meas::algorithms::Defect::Ptr > *)new std::vector< lsst::meas::algorithms::Defect::Ptr >(arg1,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > *smartresult = result ? new boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefectListT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DefectListT__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DefectListT__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DefectListT__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DefectListT__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DefectListT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::vector()\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::vector(std::vector< lsst::meas::algorithms::Defect::Ptr > const &)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::vector(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::vector(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT_push_back",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_push_back" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DefectListT_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->push_back((std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_front",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_front" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *) &((std::vector< lsst::meas::algorithms::Defect::Ptr > const *)arg1)->front();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Defect > *smartresult = *result ? new boost::shared_ptr<  lsst::meas::algorithms::Defect >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_back",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_back" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *) &((std::vector< lsst::meas::algorithms::Defect::Ptr > const *)arg1)->back();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::meas::algorithms::Defect > *smartresult = *result ? new boost::shared_ptr<  lsst::meas::algorithms::Defect >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_assign" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DefectListT_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_resize" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DefectListT_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DefectListT_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DefectListT_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::resize(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::resize(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DefectListT_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_insert" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DefectListT_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg3 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DefectListT_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_insert" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DefectListT_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DefectListT_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DefectListT_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DefectListT_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DefectListT_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DefectListT_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::insert(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)\n"
    "    std::vector< lsst::meas::algorithms::Defect::Ptr >::insert(std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::iterator,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type,std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DefectListT_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefectListT_reserve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_reserve" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefectListT_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefectListT_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefectListT_capacity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefectListT_capacity" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((std::vector< lsst::meas::algorithms::Defect::Ptr > const *)arg1)->capacity();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DefectListT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::meas::algorithms::Defect::Ptr > *arg1 = (std::vector< lsst::meas::algorithms::Defect::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > tempshared1 ;
  boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DefectListT",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DefectListT" "', argument " "1"" of type '" "std::vector< lsst::meas::algorithms::Defect::Ptr > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  std::vector<lsst::meas::algorithms::Defect::Ptr> > * >(argp1);
      arg1 = const_cast< std::vector< lsst::meas::algorithms::Defect::Ptr > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DefectListT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SincCoeffsF_cache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincCoeffsF_cache",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SincCoeffsF_cache" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincCoeffsF_cache" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      lsst::meas::algorithms::photometry::SincCoeffs< float >::SWIGTEMPLATEDISAMBIGUATOR cache(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsF_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< float >::CoeffT const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincCoeffsF_get",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsF_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsF_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincCoeffsF_get" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< float >::SWIGTEMPLATEDISAMBIGUATOR get((lsst::afw::geom::ellipses::Axes const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::Image<float> > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::Image<float> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsF_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< float >::CoeffT const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincCoeffsF_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsF_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsF_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< float >::SWIGTEMPLATEDISAMBIGUATOR get((lsst::afw::geom::ellipses::Axes const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::Image<float> > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::Image<float> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsF_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SincCoeffsF_get__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SincCoeffsF_get__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SincCoeffsF_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< float >::get(lsst::afw::geom::ellipses::Axes const &,float const)\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< float >::get(lsst::afw::geom::ellipses::Axes const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SincCoeffsF_calculate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< float >::CoeffT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincCoeffsF_calculate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsF_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsF_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincCoeffsF_calculate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< float >::SWIGTEMPLATEDISAMBIGUATOR calculate((lsst::afw::geom::ellipses::Axes const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::Image<float> > *smartresult = result ? new boost::shared_ptr<  lsst::afw::image::Image<float> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsF_calculate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< float >::CoeffT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincCoeffsF_calculate",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsF_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsF_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< float >::SWIGTEMPLATEDISAMBIGUATOR calculate((lsst::afw::geom::ellipses::Axes const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::Image<float> > *smartresult = result ? new boost::shared_ptr<  lsst::afw::image::Image<float> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsF_calculate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SincCoeffsF_calculate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SincCoeffsF_calculate__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SincCoeffsF_calculate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< float >::calculate(lsst::afw::geom::ellipses::Axes const &,double const)\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< float >::calculate(lsst::afw::geom::ellipses::Axes const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SincCoeffsF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::photometry::SincCoeffs< float > *arg1 = (lsst::meas::algorithms::photometry::SincCoeffs< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SincCoeffsF",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SincCoeffsF" "', argument " "1"" of type '" "lsst::meas::algorithms::photometry::SincCoeffs< float > *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::photometry::SincCoeffs< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SincCoeffsF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SincCoeffsD_cache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincCoeffsD_cache",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SincCoeffsD_cache" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincCoeffsD_cache" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      lsst::meas::algorithms::photometry::SincCoeffs< double >::SWIGTEMPLATEDISAMBIGUATOR cache(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsD_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< double >::CoeffT const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincCoeffsD_get",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsD_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsD_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincCoeffsD_get" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< double >::SWIGTEMPLATEDISAMBIGUATOR get((lsst::afw::geom::ellipses::Axes const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::Image<double> > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::Image<double> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsD_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< double >::CoeffT const > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincCoeffsD_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsD_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsD_get" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< double >::SWIGTEMPLATEDISAMBIGUATOR get((lsst::afw::geom::ellipses::Axes const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::image::Image<double> > *smartresult = result ? new boost::shared_ptr< const lsst::afw::image::Image<double> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsD_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SincCoeffsD_get__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SincCoeffsD_get__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SincCoeffsD_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< double >::get(lsst::afw::geom::ellipses::Axes const &,float const)\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< double >::get(lsst::afw::geom::ellipses::Axes const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SincCoeffsD_calculate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< double >::CoeffT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SincCoeffsD_calculate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsD_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsD_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SincCoeffsD_calculate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< double >::SWIGTEMPLATEDISAMBIGUATOR calculate((lsst::afw::geom::ellipses::Axes const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::Image<double> > *smartresult = result ? new boost::shared_ptr<  lsst::afw::image::Image<double> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsD_calculate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::meas::algorithms::photometry::SincCoeffs< double >::CoeffT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SincCoeffsD_calculate",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SincCoeffsD_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SincCoeffsD_calculate" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  {
    try {
      result = lsst::meas::algorithms::photometry::SincCoeffs< double >::SWIGTEMPLATEDISAMBIGUATOR calculate((lsst::afw::geom::ellipses::Axes const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::Image<double> > *smartresult = result ? new boost::shared_ptr<  lsst::afw::image::Image<double> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SincCoeffsD_calculate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SincCoeffsD_calculate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SincCoeffsD_calculate__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SincCoeffsD_calculate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< double >::calculate(lsst::afw::geom::ellipses::Axes const &,double const)\n"
    "    lsst::meas::algorithms::photometry::SincCoeffs< double >::calculate(lsst::afw::geom::ellipses::Axes const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SincCoeffsD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::meas::algorithms::photometry::SincCoeffs< double > *arg1 = (lsst::meas::algorithms::photometry::SincCoeffs< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SincCoeffsD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SincCoeffsD" "', argument " "1"" of type '" "lsst::meas::algorithms::photometry::SincCoeffs< double > *""'"); 
  }
  arg1 = reinterpret_cast< lsst::meas::algorithms::photometry::SincCoeffs< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SincCoeffsD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_calculateSincApertureFlux__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg1 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared2 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::pair< double,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:calculateSincApertureFlux",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calculateSincApertureFlux" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calculateSincApertureFlux" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calculateSincApertureFlux" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calculateSincApertureFlux" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "calculateSincApertureFlux" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = lsst::meas::algorithms::photometry::SWIGTEMPLATEDISAMBIGUATOR calculateSincApertureFlux< lsst::afw::image::MaskedImage< float > >((lsst::afw::image::MaskedImage< float,unsigned short,float > const &)*arg1,(lsst::afw::geom::ellipses::Ellipse const &)*arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_calculateSincApertureFlux__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > *arg1 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< double,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:calculateSincApertureFlux",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calculateSincApertureFlux" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calculateSincApertureFlux" "', argument " "1"" of type '" "lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1);
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::image::MaskedImage<float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel> > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calculateSincApertureFlux" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calculateSincApertureFlux" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst::meas::algorithms::photometry::SWIGTEMPLATEDISAMBIGUATOR calculateSincApertureFlux< lsst::afw::image::MaskedImage< float > >((lsst::afw::image::MaskedImage< float,unsigned short,float > const &)*arg1,(lsst::afw::geom::ellipses::Ellipse const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair<double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_calculateSincApertureFlux(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_calculateSincApertureFlux__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_calculateSincApertureFlux__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'calculateSincApertureFlux'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::meas::algorithms::photometry::calculateSincApertureFlux< lsst::afw::image::MaskedImage< float > >(lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::geom::ellipses::Ellipse const &,double const)\n"
    "    lsst::meas::algorithms::photometry::calculateSincApertureFlux< lsst::afw::image::MaskedImage< float > >(lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > const &,lsst::afw::geom::ellipses::Ellipse const &)\n");
  return 0;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n = 1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n = 1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, (char *)"ios_base_register_callback(ios_base self, event_callback __fn, int __index)"},
	 { (char *)"ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, (char *)"\n"
		"flags() -> fmtflags\n"
		"ios_base_flags(ios_base self, fmtflags __fmtfl) -> fmtflags\n"
		""},
	 { (char *)"ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, (char *)"\n"
		"setf(fmtflags __fmtfl) -> fmtflags\n"
		"ios_base_setf(ios_base self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags\n"
		""},
	 { (char *)"ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, (char *)"ios_base_unsetf(ios_base self, fmtflags __mask)"},
	 { (char *)"ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, (char *)"\n"
		"precision() -> streamsize\n"
		"ios_base_precision(ios_base self, streamsize __prec) -> streamsize\n"
		""},
	 { (char *)"ios_base_width", _wrap_ios_base_width, METH_VARARGS, (char *)"\n"
		"width() -> streamsize\n"
		"ios_base_width(ios_base self, streamsize __wide) -> streamsize\n"
		""},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, (char *)"\n"
		"sync_with_stdio(bool __sync = True) -> bool\n"
		"ios_base_sync_with_stdio() -> bool\n"
		""},
	 { (char *)"ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, (char *)"ios_base_imbue(ios_base self, locale __loc) -> locale"},
	 { (char *)"ios_base_getloc", _wrap_ios_base_getloc, METH_VARARGS, (char *)"ios_base_getloc(ios_base self) -> locale"},
	 { (char *)"ios_base_xalloc", _wrap_ios_base_xalloc, METH_VARARGS, (char *)"ios_base_xalloc() -> int"},
	 { (char *)"ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, (char *)"ios_base_iword(ios_base self, int __ix) -> long"},
	 { (char *)"ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, (char *)"ios_base_pword(ios_base self, int __ix) -> void"},
	 { (char *)"delete_ios_base", _wrap_delete_ios_base, METH_VARARGS, (char *)"delete_ios_base(ios_base self)"},
	 { (char *)"ios_base_swigregister", ios_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_rdstate", _wrap_ios_rdstate, METH_VARARGS, (char *)"ios_rdstate(ios self) -> iostate"},
	 { (char *)"ios_clear", _wrap_ios_clear, METH_VARARGS, (char *)"\n"
		"clear(iostate __state = goodbit)\n"
		"ios_clear(ios self)\n"
		""},
	 { (char *)"ios_setstate", _wrap_ios_setstate, METH_VARARGS, (char *)"ios_setstate(ios self, iostate __state)"},
	 { (char *)"ios_good", _wrap_ios_good, METH_VARARGS, (char *)"ios_good(ios self) -> bool"},
	 { (char *)"ios_eof", _wrap_ios_eof, METH_VARARGS, (char *)"ios_eof(ios self) -> bool"},
	 { (char *)"ios_fail", _wrap_ios_fail, METH_VARARGS, (char *)"ios_fail(ios self) -> bool"},
	 { (char *)"ios_bad", _wrap_ios_bad, METH_VARARGS, (char *)"ios_bad(ios self) -> bool"},
	 { (char *)"ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, (char *)"\n"
		"exceptions() -> iostate\n"
		"ios_exceptions(ios self, iostate __except)\n"
		""},
	 { (char *)"new_ios", _wrap_new_ios, METH_VARARGS, (char *)"new_ios(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"},
	 { (char *)"delete_ios", _wrap_delete_ios, METH_VARARGS, (char *)"delete_ios(ios self)"},
	 { (char *)"ios_tie", _wrap_ios_tie, METH_VARARGS, (char *)"\n"
		"tie() -> ostream\n"
		"ios_tie(ios self, ostream __tiestr) -> ostream\n"
		""},
	 { (char *)"ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, (char *)"\n"
		"rdbuf() -> std::basic_streambuf<(char,std::char_traits<(char)>)>\n"
		"ios_rdbuf(ios self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>\n"
		""},
	 { (char *)"ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, (char *)"ios_copyfmt(ios self, ios __rhs) -> ios"},
	 { (char *)"ios_fill", _wrap_ios_fill, METH_VARARGS, (char *)"\n"
		"fill() -> char_type\n"
		"ios_fill(ios self, char_type __ch) -> char_type\n"
		""},
	 { (char *)"ios_imbue", _wrap_ios_imbue, METH_VARARGS, (char *)"ios_imbue(ios self, locale __loc) -> locale"},
	 { (char *)"ios_narrow", _wrap_ios_narrow, METH_VARARGS, (char *)"ios_narrow(ios self, char_type __c, char __dfault) -> char"},
	 { (char *)"ios_widen", _wrap_ios_widen, METH_VARARGS, (char *)"ios_widen(ios self, char __c) -> char_type"},
	 { (char *)"ios_swigregister", ios_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ostream", _wrap_new_ostream, METH_VARARGS, (char *)"new_ostream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"},
	 { (char *)"delete_ostream", _wrap_delete_ostream, METH_VARARGS, (char *)"delete_ostream(ostream self)"},
	 { (char *)"ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, (char *)"\n"
		"__lshift__(ostream __pf) -> ostream\n"
		"__lshift__(ios __pf) -> ostream\n"
		"__lshift__(ios_base __pf) -> ostream\n"
		"__lshift__(long __n) -> ostream\n"
		"__lshift__(unsigned long __n) -> ostream\n"
		"__lshift__(bool __n) -> ostream\n"
		"__lshift__(short __n) -> ostream\n"
		"__lshift__(unsigned short __n) -> ostream\n"
		"__lshift__(int __n) -> ostream\n"
		"__lshift__(unsigned int __n) -> ostream\n"
		"__lshift__(long long __n) -> ostream\n"
		"__lshift__(unsigned long long __n) -> ostream\n"
		"__lshift__(double __f) -> ostream\n"
		"__lshift__(float __f) -> ostream\n"
		"__lshift__(long double __f) -> ostream\n"
		"__lshift__(void __p) -> ostream\n"
		"__lshift__(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream\n"
		"ostream___lshift__(ostream self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream\n"
		""},
	 { (char *)"ostream_put", _wrap_ostream_put, METH_VARARGS, (char *)"ostream_put(ostream self, char_type __c) -> ostream"},
	 { (char *)"ostream_write", _wrap_ostream_write, METH_VARARGS, (char *)"ostream_write(ostream self, char_type __s, streamsize __n) -> ostream"},
	 { (char *)"ostream_flush", _wrap_ostream_flush, METH_VARARGS, (char *)"ostream_flush(ostream self) -> ostream"},
	 { (char *)"ostream_tellp", _wrap_ostream_tellp, METH_VARARGS, (char *)"ostream_tellp(ostream self) -> pos_type"},
	 { (char *)"ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, (char *)"\n"
		"seekp(pos_type arg0) -> ostream\n"
		"ostream_seekp(ostream self, off_type arg1, seekdir arg2) -> ostream\n"
		""},
	 { (char *)"ostream_swigregister", ostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_istream", _wrap_new_istream, METH_VARARGS, (char *)"new_istream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"},
	 { (char *)"delete_istream", _wrap_delete_istream, METH_VARARGS, (char *)"delete_istream(istream self)"},
	 { (char *)"istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, (char *)"\n"
		"__rshift__(istream __pf) -> istream\n"
		"__rshift__(ios __pf) -> istream\n"
		"__rshift__(ios_base __pf) -> istream\n"
		"__rshift__(bool __n) -> istream\n"
		"__rshift__(short __n) -> istream\n"
		"__rshift__(unsigned short __n) -> istream\n"
		"__rshift__(int __n) -> istream\n"
		"__rshift__(unsigned int __n) -> istream\n"
		"__rshift__(long __n) -> istream\n"
		"__rshift__(unsigned long __n) -> istream\n"
		"__rshift__(long long __n) -> istream\n"
		"__rshift__(unsigned long long __n) -> istream\n"
		"__rshift__(float __f) -> istream\n"
		"__rshift__(double __f) -> istream\n"
		"__rshift__(long double __f) -> istream\n"
		"__rshift__(void __p) -> istream\n"
		"istream___rshift__(istream self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream\n"
		""},
	 { (char *)"istream_gcount", _wrap_istream_gcount, METH_VARARGS, (char *)"istream_gcount(istream self) -> streamsize"},
	 { (char *)"istream_get", _wrap_istream_get, METH_VARARGS, (char *)"\n"
		"get() -> int_type\n"
		"get(char_type __c) -> istream\n"
		"get(char_type __s, streamsize __n, char_type __delim) -> istream\n"
		"get(char_type __s, streamsize __n) -> istream\n"
		"get(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, \n"
		"    char_type __delim) -> istream\n"
		"istream_get(istream self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream\n"
		""},
	 { (char *)"istream_getline", _wrap_istream_getline, METH_VARARGS, (char *)"\n"
		"getline(char_type __s, streamsize __n, char_type __delim) -> istream\n"
		"istream_getline(istream self, char_type __s, streamsize __n) -> istream\n"
		""},
	 { (char *)"istream_ignore", _wrap_istream_ignore, METH_VARARGS, (char *)"\n"
		"ignore(streamsize __n = 1, int_type __delim = std::char_traits< char >::eof()) -> istream\n"
		"ignore(streamsize __n = 1) -> istream\n"
		"istream_ignore(istream self) -> istream\n"
		""},
	 { (char *)"istream_peek", _wrap_istream_peek, METH_VARARGS, (char *)"istream_peek(istream self) -> int_type"},
	 { (char *)"istream_read", _wrap_istream_read, METH_VARARGS, (char *)"istream_read(istream self, char_type __s, streamsize __n) -> istream"},
	 { (char *)"istream_readsome", _wrap_istream_readsome, METH_VARARGS, (char *)"istream_readsome(istream self, char_type __s, streamsize __n) -> streamsize"},
	 { (char *)"istream_putback", _wrap_istream_putback, METH_VARARGS, (char *)"istream_putback(istream self, char_type __c) -> istream"},
	 { (char *)"istream_unget", _wrap_istream_unget, METH_VARARGS, (char *)"istream_unget(istream self) -> istream"},
	 { (char *)"istream_sync", _wrap_istream_sync, METH_VARARGS, (char *)"istream_sync(istream self) -> int"},
	 { (char *)"istream_tellg", _wrap_istream_tellg, METH_VARARGS, (char *)"istream_tellg(istream self) -> pos_type"},
	 { (char *)"istream_seekg", _wrap_istream_seekg, METH_VARARGS, (char *)"\n"
		"seekg(pos_type arg0) -> istream\n"
		"istream_seekg(istream self, off_type arg1, seekdir arg2) -> istream\n"
		""},
	 { (char *)"istream_swigregister", istream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_iostream", _wrap_new_iostream, METH_VARARGS, (char *)"new_iostream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"},
	 { (char *)"delete_iostream", _wrap_delete_iostream, METH_VARARGS, (char *)"delete_iostream(iostream self)"},
	 { (char *)"iostream_swigregister", iostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"endl", _wrap_endl, METH_VARARGS, (char *)"endl(ostream arg0) -> ostream\nswig_ptr: endl_cb_ptr"},
	 { (char *)"ends", _wrap_ends, METH_VARARGS, (char *)"ends(ostream arg0) -> ostream\nswig_ptr: ends_cb_ptr"},
	 { (char *)"flush", _wrap_flush, METH_VARARGS, (char *)"flush(ostream arg0) -> ostream\nswig_ptr: flush_cb_ptr"},
	 { (char *)"new_PsfAttributes", _wrap_new_PsfAttributes, METH_VARARGS, (char *)"\n"
		"PsfAttributes(__dummy_212__ psf, int iX, int iY)\n"
		"new_PsfAttributes(__dummy_212__ psf, Point2I cen) -> PsfAttributes\n"
		""},
	 { (char *)"PsfAttributes_computeGaussianWidth", _wrap_PsfAttributes_computeGaussianWidth, METH_VARARGS, (char *)"\n"
		"computeGaussianWidth(Method how = ADAPTIVE_MOMENT) -> double\n"
		"PsfAttributes_computeGaussianWidth(PsfAttributes self) -> double\n"
		""},
	 { (char *)"PsfAttributes_computeEffectiveArea", _wrap_PsfAttributes_computeEffectiveArea, METH_VARARGS, (char *)"PsfAttributes_computeEffectiveArea(PsfAttributes self) -> double"},
	 { (char *)"delete_PsfAttributes", _wrap_delete_PsfAttributes, METH_VARARGS, (char *)"delete_PsfAttributes(PsfAttributes self)"},
	 { (char *)"PsfAttributes_swigregister", PsfAttributes_swigregister, METH_VARARGS, NULL},
	 { (char *)"PsfCandidateF_getXCenter", _wrap_PsfCandidateF_getXCenter, METH_VARARGS, (char *)"PsfCandidateF_getXCenter(PsfCandidateF self) -> float"},
	 { (char *)"PsfCandidateF_getYCenter", _wrap_PsfCandidateF_getYCenter, METH_VARARGS, (char *)"PsfCandidateF_getYCenter(PsfCandidateF self) -> float"},
	 { (char *)"new_PsfCandidateF", _wrap_new_PsfCandidateF, METH_VARARGS, (char *)"\n"
		"PsfCandidateF(__dummy_437__ source, __dummy_208__ parentExposure)\n"
		"new_PsfCandidateF(__dummy_437__ source, __dummy_208__ parentExposure, \n"
		"    double xCenter, double yCenter) -> PsfCandidateF\n"
		""},
	 { (char *)"delete_PsfCandidateF", _wrap_delete_PsfCandidateF, METH_VARARGS, (char *)"delete_PsfCandidateF(PsfCandidateF self)"},
	 { (char *)"PsfCandidateF_getCandidateRating", _wrap_PsfCandidateF_getCandidateRating, METH_VARARGS, (char *)"PsfCandidateF_getCandidateRating(PsfCandidateF self) -> double"},
	 { (char *)"PsfCandidateF_getSource", _wrap_PsfCandidateF_getSource, METH_VARARGS, (char *)"PsfCandidateF_getSource(PsfCandidateF self) -> __dummy_437__"},
	 { (char *)"PsfCandidateF_getAmplitude", _wrap_PsfCandidateF_getAmplitude, METH_VARARGS, (char *)"PsfCandidateF_getAmplitude(PsfCandidateF self) -> double"},
	 { (char *)"PsfCandidateF_setAmplitude", _wrap_PsfCandidateF_setAmplitude, METH_VARARGS, (char *)"PsfCandidateF_setAmplitude(PsfCandidateF self, double amplitude)"},
	 { (char *)"PsfCandidateF_getVar", _wrap_PsfCandidateF_getVar, METH_VARARGS, (char *)"PsfCandidateF_getVar(PsfCandidateF self) -> double"},
	 { (char *)"PsfCandidateF_setVar", _wrap_PsfCandidateF_setVar, METH_VARARGS, (char *)"PsfCandidateF_setVar(PsfCandidateF self, double var)"},
	 { (char *)"PsfCandidateF_getMaskedImage", _wrap_PsfCandidateF_getMaskedImage, METH_VARARGS, (char *)"\n"
		"getMaskedImage() -> __dummy_146__\n"
		"PsfCandidateF_getMaskedImage(PsfCandidateF self, int width, int height) -> __dummy_146__\n"
		""},
	 { (char *)"PsfCandidateF_getOffsetImage", _wrap_PsfCandidateF_getOffsetImage, METH_VARARGS, (char *)"PsfCandidateF_getOffsetImage(PsfCandidateF self, string algorithm, unsigned int buffer) -> __dummy_145__"},
	 { (char *)"PsfCandidateF_getBorderWidth", _wrap_PsfCandidateF_getBorderWidth, METH_VARARGS, (char *)"PsfCandidateF_getBorderWidth() -> int"},
	 { (char *)"PsfCandidateF_setBorderWidth", _wrap_PsfCandidateF_setBorderWidth, METH_VARARGS, (char *)"PsfCandidateF_setBorderWidth(int border)"},
	 { (char *)"PsfCandidateF_swigregister", PsfCandidateF_swigregister, METH_VARARGS, NULL},
	 { (char *)"makePsfCandidate", _wrap_makePsfCandidate, METH_VARARGS, (char *)"makePsfCandidate(__dummy_437__ source, __dummy_207__ image) -> __dummy_441__"},
	 { (char *)"cast_PsfCandidateF", _wrap_cast_PsfCandidateF, METH_VARARGS, (char *)"cast_PsfCandidateF(__dummy_387__ candidate) -> __dummy_441__"},
	 { (char *)"new_pair_Psf_vector_double", _wrap_new_pair_Psf_vector_double, METH_VARARGS, (char *)"\n"
		"pair_Psf_vector_double()\n"
		"pair_Psf_vector_double(__dummy_361__ first, VectorDouble second)\n"
		"new_pair_Psf_vector_double(pair_Psf_vector_double p) -> pair_Psf_vector_double\n"
		""},
	 { (char *)"pair_Psf_vector_double_first_set", _wrap_pair_Psf_vector_double_first_set, METH_VARARGS, (char *)"pair_Psf_vector_double_first_set(pair_Psf_vector_double self, __dummy_361__ first)"},
	 { (char *)"pair_Psf_vector_double_first_get", _wrap_pair_Psf_vector_double_first_get, METH_VARARGS, (char *)"pair_Psf_vector_double_first_get(pair_Psf_vector_double self) -> __dummy_361__"},
	 { (char *)"pair_Psf_vector_double_second_set", _wrap_pair_Psf_vector_double_second_set, METH_VARARGS, (char *)"pair_Psf_vector_double_second_set(pair_Psf_vector_double self, VectorDouble second)"},
	 { (char *)"pair_Psf_vector_double_second_get", _wrap_pair_Psf_vector_double_second_get, METH_VARARGS, (char *)"pair_Psf_vector_double_second_get(pair_Psf_vector_double self) -> VectorDouble"},
	 { (char *)"delete_pair_Psf_vector_double", _wrap_delete_pair_Psf_vector_double, METH_VARARGS, (char *)"delete_pair_Psf_vector_double(pair_Psf_vector_double self)"},
	 { (char *)"pair_Psf_vector_double_swigregister", pair_Psf_vector_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pair_vector_double_KernelList", _wrap_new_pair_vector_double_KernelList, METH_VARARGS, (char *)"\n"
		"pair_vector_double_KernelList()\n"
		"pair_vector_double_KernelList(VectorDouble first, KernelList second)\n"
		"new_pair_vector_double_KernelList(pair_vector_double_KernelList p) -> pair_vector_double_KernelList\n"
		""},
	 { (char *)"pair_vector_double_KernelList_first_set", _wrap_pair_vector_double_KernelList_first_set, METH_VARARGS, (char *)"pair_vector_double_KernelList_first_set(pair_vector_double_KernelList self, VectorDouble first)"},
	 { (char *)"pair_vector_double_KernelList_first_get", _wrap_pair_vector_double_KernelList_first_get, METH_VARARGS, (char *)"pair_vector_double_KernelList_first_get(pair_vector_double_KernelList self) -> VectorDouble"},
	 { (char *)"pair_vector_double_KernelList_second_set", _wrap_pair_vector_double_KernelList_second_set, METH_VARARGS, (char *)"pair_vector_double_KernelList_second_set(pair_vector_double_KernelList self, KernelList second)"},
	 { (char *)"pair_vector_double_KernelList_second_get", _wrap_pair_vector_double_KernelList_second_get, METH_VARARGS, (char *)"pair_vector_double_KernelList_second_get(pair_vector_double_KernelList self) -> KernelList"},
	 { (char *)"delete_pair_vector_double_KernelList", _wrap_delete_pair_vector_double_KernelList, METH_VARARGS, (char *)"delete_pair_vector_double_KernelList(pair_vector_double_KernelList self)"},
	 { (char *)"pair_vector_double_KernelList_swigregister", pair_vector_double_KernelList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pair_bool_double", _wrap_new_pair_bool_double, METH_VARARGS, (char *)"\n"
		"pair_bool_double()\n"
		"pair_bool_double(bool first, double second)\n"
		"new_pair_bool_double(pair_bool_double p) -> pair_bool_double\n"
		""},
	 { (char *)"pair_bool_double_first_set", _wrap_pair_bool_double_first_set, METH_VARARGS, (char *)"pair_bool_double_first_set(pair_bool_double self, bool first)"},
	 { (char *)"pair_bool_double_first_get", _wrap_pair_bool_double_first_get, METH_VARARGS, (char *)"pair_bool_double_first_get(pair_bool_double self) -> bool"},
	 { (char *)"pair_bool_double_second_set", _wrap_pair_bool_double_second_set, METH_VARARGS, (char *)"pair_bool_double_second_set(pair_bool_double self, double second)"},
	 { (char *)"pair_bool_double_second_get", _wrap_pair_bool_double_second_get, METH_VARARGS, (char *)"pair_bool_double_second_get(pair_bool_double self) -> double"},
	 { (char *)"delete_pair_bool_double", _wrap_delete_pair_bool_double, METH_VARARGS, (char *)"delete_pair_bool_double(pair_bool_double self)"},
	 { (char *)"pair_bool_double_swigregister", pair_bool_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pair_Kernel_double_double", _wrap_new_pair_Kernel_double_double, METH_VARARGS, (char *)"\n"
		"pair_Kernel_double_double()\n"
		"pair_Kernel_double_double(__dummy_337__ first, pairDoubleDouble second)\n"
		"new_pair_Kernel_double_double(pair_Kernel_double_double p) -> pair_Kernel_double_double\n"
		""},
	 { (char *)"pair_Kernel_double_double_first_set", _wrap_pair_Kernel_double_double_first_set, METH_VARARGS, (char *)"pair_Kernel_double_double_first_set(pair_Kernel_double_double self, __dummy_337__ first)"},
	 { (char *)"pair_Kernel_double_double_first_get", _wrap_pair_Kernel_double_double_first_get, METH_VARARGS, (char *)"pair_Kernel_double_double_first_get(pair_Kernel_double_double self) -> __dummy_337__"},
	 { (char *)"pair_Kernel_double_double_second_set", _wrap_pair_Kernel_double_double_second_set, METH_VARARGS, (char *)"pair_Kernel_double_double_second_set(pair_Kernel_double_double self, pairDoubleDouble second)"},
	 { (char *)"pair_Kernel_double_double_second_get", _wrap_pair_Kernel_double_double_second_get, METH_VARARGS, (char *)"pair_Kernel_double_double_second_get(pair_Kernel_double_double self) -> pairDoubleDouble"},
	 { (char *)"delete_pair_Kernel_double_double", _wrap_delete_pair_Kernel_double_double, METH_VARARGS, (char *)"delete_pair_Kernel_double_double(pair_Kernel_double_double self)"},
	 { (char *)"pair_Kernel_double_double_swigregister", pair_Kernel_double_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"createKernelFromPsfCandidates", _wrap_createKernelFromPsfCandidates, METH_VARARGS, (char *)"\n"
		"createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, \n"
		"    int nEigenComponents, int spatialOrder, int ksize, \n"
		"    int nStarPerCell = -1, bool constantWeight = True, \n"
		"    int border = 3) -> pair_Psf_vector_double\n"
		"createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, \n"
		"    int nEigenComponents, int spatialOrder, int ksize, \n"
		"    int nStarPerCell = -1, bool constantWeight = True) -> pair_Psf_vector_double\n"
		"createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, \n"
		"    int nEigenComponents, int spatialOrder, int ksize, \n"
		"    int nStarPerCell = -1) -> pair_Psf_vector_double\n"
		"createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, \n"
		"    int nEigenComponents, int spatialOrder, int ksize) -> pair_Psf_vector_double\n"
		""},
	 { (char *)"fitSpatialKernelFromPsfCandidates", _wrap_fitSpatialKernelFromPsfCandidates, METH_VARARGS, (char *)"\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, int nStarPerCell = -1, \n"
		"    double tolerance = 1e-5, double _lambda = 0.0) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, int nStarPerCell = -1, \n"
		"    double tolerance = 1e-5) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, int nStarPerCell = -1) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit, \n"
		"    int nStarPerCell = -1, double tolerance = 1e-5, \n"
		"    double _lambda = 0.0) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit, \n"
		"    int nStarPerCell = -1, double tolerance = 1e-5) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit, \n"
		"    int nStarPerCell = -1) -> pair_bool_double\n"
		"fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit) -> pair_bool_double\n"
		""},
	 { (char *)"countPsfCandidates", _wrap_countPsfCandidates, METH_VARARGS, (char *)"\n"
		"countPsfCandidates(SpatialCellSet psfCells, int nStarPerCell = -1) -> int\n"
		"countPsfCandidates(SpatialCellSet psfCells) -> int\n"
		""},
	 { (char *)"subtractPsf", _wrap_subtractPsf, METH_VARARGS, (char *)"\n"
		"subtractPsf(Psf psf, MaskedImageF data, double x, double y, double psfFlux = std::numeric_limits< double >::quiet_NaN()) -> double\n"
		"subtractPsf(Psf psf, MaskedImageF data, double x, double y) -> double\n"
		""},
	 { (char *)"fitKernelParamsToImage", _wrap_fitKernelParamsToImage, METH_VARARGS, (char *)"\n"
		"fitKernelParamsToImage(LinearCombinationKernel kernel, MaskedImageF image, \n"
		"    Point2D pos) -> pair_vector_double_KernelList\n"
		""},
	 { (char *)"fitKernelToImage", _wrap_fitKernelToImage, METH_VARARGS, (char *)"\n"
		"fitKernelToImage(LinearCombinationKernel kernel, MaskedImageF image, \n"
		"    Point2D pos) -> pair_Kernel_double_double\n"
		""},
	 { (char *)"ImagePsfPersistableFacade_readFits", _wrap_ImagePsfPersistableFacade_readFits, METH_VARARGS, (char *)"\n"
		"readFits(string fileName, int hdu = 0) -> __dummy_447__\n"
		"readFits(string fileName) -> __dummy_447__\n"
		"readFits(MemFileManager manager, int hdu = 0) -> __dummy_447__\n"
		"ImagePsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_447__\n"
		""},
	 { (char *)"new_ImagePsfPersistableFacade", _wrap_new_ImagePsfPersistableFacade, METH_VARARGS, (char *)"new_ImagePsfPersistableFacade() -> ImagePsfPersistableFacade"},
	 { (char *)"delete_ImagePsfPersistableFacade", _wrap_delete_ImagePsfPersistableFacade, METH_VARARGS, (char *)"delete_ImagePsfPersistableFacade(ImagePsfPersistableFacade self)"},
	 { (char *)"ImagePsfPersistableFacade_swigregister", ImagePsfPersistableFacade_swigregister, METH_VARARGS, NULL},
	 { (char *)"KernelPsfPersistableFacade_readFits", _wrap_KernelPsfPersistableFacade_readFits, METH_VARARGS, (char *)"\n"
		"readFits(string fileName, int hdu = 0) -> __dummy_453__\n"
		"readFits(string fileName) -> __dummy_453__\n"
		"readFits(MemFileManager manager, int hdu = 0) -> __dummy_453__\n"
		"KernelPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_453__\n"
		""},
	 { (char *)"new_KernelPsfPersistableFacade", _wrap_new_KernelPsfPersistableFacade, METH_VARARGS, (char *)"new_KernelPsfPersistableFacade() -> KernelPsfPersistableFacade"},
	 { (char *)"delete_KernelPsfPersistableFacade", _wrap_delete_KernelPsfPersistableFacade, METH_VARARGS, (char *)"delete_KernelPsfPersistableFacade(KernelPsfPersistableFacade self)"},
	 { (char *)"KernelPsfPersistableFacade_swigregister", KernelPsfPersistableFacade_swigregister, METH_VARARGS, NULL},
	 { (char *)"SingleGaussianPsfPersistableFacade_readFits", _wrap_SingleGaussianPsfPersistableFacade_readFits, METH_VARARGS, (char *)"\n"
		"readFits(string fileName, int hdu = 0) -> __dummy_459__\n"
		"readFits(string fileName) -> __dummy_459__\n"
		"readFits(MemFileManager manager, int hdu = 0) -> __dummy_459__\n"
		"SingleGaussianPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_459__\n"
		""},
	 { (char *)"new_SingleGaussianPsfPersistableFacade", _wrap_new_SingleGaussianPsfPersistableFacade, METH_VARARGS, (char *)"new_SingleGaussianPsfPersistableFacade() -> SingleGaussianPsfPersistableFacade"},
	 { (char *)"delete_SingleGaussianPsfPersistableFacade", _wrap_delete_SingleGaussianPsfPersistableFacade, METH_VARARGS, (char *)"delete_SingleGaussianPsfPersistableFacade(SingleGaussianPsfPersistableFacade self)"},
	 { (char *)"SingleGaussianPsfPersistableFacade_swigregister", SingleGaussianPsfPersistableFacade_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleGaussianPsfPersistableFacade_readFits", _wrap_DoubleGaussianPsfPersistableFacade_readFits, METH_VARARGS, (char *)"\n"
		"readFits(string fileName, int hdu = 0) -> __dummy_465__\n"
		"readFits(string fileName) -> __dummy_465__\n"
		"readFits(MemFileManager manager, int hdu = 0) -> __dummy_465__\n"
		"DoubleGaussianPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_465__\n"
		""},
	 { (char *)"new_DoubleGaussianPsfPersistableFacade", _wrap_new_DoubleGaussianPsfPersistableFacade, METH_VARARGS, (char *)"new_DoubleGaussianPsfPersistableFacade() -> DoubleGaussianPsfPersistableFacade"},
	 { (char *)"delete_DoubleGaussianPsfPersistableFacade", _wrap_delete_DoubleGaussianPsfPersistableFacade, METH_VARARGS, (char *)"delete_DoubleGaussianPsfPersistableFacade(DoubleGaussianPsfPersistableFacade self)"},
	 { (char *)"DoubleGaussianPsfPersistableFacade_swigregister", DoubleGaussianPsfPersistableFacade_swigregister, METH_VARARGS, NULL},
	 { (char *)"PcaPsfPersistableFacade_readFits", _wrap_PcaPsfPersistableFacade_readFits, METH_VARARGS, (char *)"\n"
		"readFits(string fileName, int hdu = 0) -> __dummy_471__\n"
		"readFits(string fileName) -> __dummy_471__\n"
		"readFits(MemFileManager manager, int hdu = 0) -> __dummy_471__\n"
		"PcaPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_471__\n"
		""},
	 { (char *)"new_PcaPsfPersistableFacade", _wrap_new_PcaPsfPersistableFacade, METH_VARARGS, (char *)"new_PcaPsfPersistableFacade() -> PcaPsfPersistableFacade"},
	 { (char *)"delete_PcaPsfPersistableFacade", _wrap_delete_PcaPsfPersistableFacade, METH_VARARGS, (char *)"delete_PcaPsfPersistableFacade(PcaPsfPersistableFacade self)"},
	 { (char *)"PcaPsfPersistableFacade_swigregister", PcaPsfPersistableFacade_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImagePsf_swigConvert", _wrap_ImagePsf_swigConvert, METH_VARARGS, (char *)"ImagePsf_swigConvert(__dummy_1__ ptr) -> __dummy_447__"},
	 { (char *)"delete_ImagePsf", _wrap_delete_ImagePsf, METH_VARARGS, (char *)"delete_ImagePsf(ImagePsf self)"},
	 { (char *)"ImagePsf_swigregister", ImagePsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KernelPsf", _wrap_new_KernelPsf, METH_VARARGS, (char *)"\n"
		"KernelPsf(Kernel kernel, Point2D averagePosition = lsst::afw::geom::Point2D())\n"
		"new_KernelPsf(Kernel kernel) -> KernelPsf\n"
		""},
	 { (char *)"KernelPsf_getKernel", _wrap_KernelPsf_getKernel, METH_VARARGS, (char *)"KernelPsf_getKernel(KernelPsf self) -> __dummy_338__"},
	 { (char *)"KernelPsf_getAveragePosition", _wrap_KernelPsf_getAveragePosition, METH_VARARGS, (char *)"KernelPsf_getAveragePosition(KernelPsf self) -> Point2D"},
	 { (char *)"KernelPsf_clone", _wrap_KernelPsf_clone, METH_VARARGS, (char *)"KernelPsf_clone(KernelPsf self) -> __dummy_211__"},
	 { (char *)"KernelPsf_isPersistable", _wrap_KernelPsf_isPersistable, METH_VARARGS, (char *)"KernelPsf_isPersistable(KernelPsf self) -> bool"},
	 { (char *)"KernelPsf_swigConvert", _wrap_KernelPsf_swigConvert, METH_VARARGS, (char *)"KernelPsf_swigConvert(__dummy_1__ ptr) -> __dummy_453__"},
	 { (char *)"delete_KernelPsf", _wrap_delete_KernelPsf, METH_VARARGS, (char *)"delete_KernelPsf(KernelPsf self)"},
	 { (char *)"KernelPsf_swigregister", KernelPsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SingleGaussianPsf", _wrap_new_SingleGaussianPsf, METH_VARARGS, (char *)"new_SingleGaussianPsf(int width, int height, double sigma) -> SingleGaussianPsf"},
	 { (char *)"SingleGaussianPsf_clone", _wrap_SingleGaussianPsf_clone, METH_VARARGS, (char *)"SingleGaussianPsf_clone(SingleGaussianPsf self) -> __dummy_211__"},
	 { (char *)"SingleGaussianPsf_getSigma", _wrap_SingleGaussianPsf_getSigma, METH_VARARGS, (char *)"SingleGaussianPsf_getSigma(SingleGaussianPsf self) -> double"},
	 { (char *)"SingleGaussianPsf_isPersistable", _wrap_SingleGaussianPsf_isPersistable, METH_VARARGS, (char *)"SingleGaussianPsf_isPersistable(SingleGaussianPsf self) -> bool"},
	 { (char *)"SingleGaussianPsf_swigConvert", _wrap_SingleGaussianPsf_swigConvert, METH_VARARGS, (char *)"SingleGaussianPsf_swigConvert(__dummy_1__ ptr) -> __dummy_459__"},
	 { (char *)"delete_SingleGaussianPsf", _wrap_delete_SingleGaussianPsf, METH_VARARGS, (char *)"delete_SingleGaussianPsf(SingleGaussianPsf self)"},
	 { (char *)"SingleGaussianPsf_swigregister", SingleGaussianPsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DoubleGaussianPsf", _wrap_new_DoubleGaussianPsf, METH_VARARGS, (char *)"\n"
		"DoubleGaussianPsf(int width, int height, double sigma1, double sigma2 = 0.0, \n"
		"    double b = 0.0)\n"
		"DoubleGaussianPsf(int width, int height, double sigma1, double sigma2 = 0.0)\n"
		"new_DoubleGaussianPsf(int width, int height, double sigma1) -> DoubleGaussianPsf\n"
		""},
	 { (char *)"DoubleGaussianPsf_clone", _wrap_DoubleGaussianPsf_clone, METH_VARARGS, (char *)"DoubleGaussianPsf_clone(DoubleGaussianPsf self) -> __dummy_211__"},
	 { (char *)"DoubleGaussianPsf_getSigma1", _wrap_DoubleGaussianPsf_getSigma1, METH_VARARGS, (char *)"DoubleGaussianPsf_getSigma1(DoubleGaussianPsf self) -> double"},
	 { (char *)"DoubleGaussianPsf_getSigma2", _wrap_DoubleGaussianPsf_getSigma2, METH_VARARGS, (char *)"DoubleGaussianPsf_getSigma2(DoubleGaussianPsf self) -> double"},
	 { (char *)"DoubleGaussianPsf_getB", _wrap_DoubleGaussianPsf_getB, METH_VARARGS, (char *)"DoubleGaussianPsf_getB(DoubleGaussianPsf self) -> double"},
	 { (char *)"DoubleGaussianPsf_isPersistable", _wrap_DoubleGaussianPsf_isPersistable, METH_VARARGS, (char *)"DoubleGaussianPsf_isPersistable(DoubleGaussianPsf self) -> bool"},
	 { (char *)"DoubleGaussianPsf_swigConvert", _wrap_DoubleGaussianPsf_swigConvert, METH_VARARGS, (char *)"DoubleGaussianPsf_swigConvert(__dummy_1__ ptr) -> __dummy_465__"},
	 { (char *)"delete_DoubleGaussianPsf", _wrap_delete_DoubleGaussianPsf, METH_VARARGS, (char *)"delete_DoubleGaussianPsf(DoubleGaussianPsf self)"},
	 { (char *)"DoubleGaussianPsf_swigregister", DoubleGaussianPsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PcaPsf", _wrap_new_PcaPsf, METH_VARARGS, (char *)"\n"
		"PcaPsf(__dummy_361__ kernel, Point2D averagePosition = lsst::afw::geom::Point2D())\n"
		"new_PcaPsf(__dummy_361__ kernel) -> PcaPsf\n"
		""},
	 { (char *)"PcaPsf_clone", _wrap_PcaPsf_clone, METH_VARARGS, (char *)"PcaPsf_clone(PcaPsf self) -> __dummy_211__"},
	 { (char *)"PcaPsf_getKernel", _wrap_PcaPsf_getKernel, METH_VARARGS, (char *)"PcaPsf_getKernel(PcaPsf self) -> __dummy_362__"},
	 { (char *)"PcaPsf_swigConvert", _wrap_PcaPsf_swigConvert, METH_VARARGS, (char *)"PcaPsf_swigConvert(__dummy_1__ ptr) -> __dummy_471__"},
	 { (char *)"delete_PcaPsf", _wrap_delete_PcaPsf, METH_VARARGS, (char *)"delete_PcaPsf(PcaPsf self)"},
	 { (char *)"PcaPsf_swigregister", PcaPsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WarpedPsf", _wrap_new_WarpedPsf, METH_VARARGS, (char *)"\n"
		"WarpedPsf(__dummy_212__ undistortedPsf, __dummy_16__ distortion, \n"
		"    boost::shared_ptr<(q(const).lsst::afw::math::WarpingControl)> control)\n"
		"WarpedPsf(__dummy_212__ undistortedPsf, __dummy_16__ distortion, \n"
		"    string kernelName = \"lanczos3\", unsigned int cache = 10000)\n"
		"WarpedPsf(__dummy_212__ undistortedPsf, __dummy_16__ distortion, \n"
		"    string kernelName = \"lanczos3\")\n"
		"new_WarpedPsf(__dummy_212__ undistortedPsf, __dummy_16__ distortion) -> WarpedPsf\n"
		""},
	 { (char *)"WarpedPsf_getAveragePosition", _wrap_WarpedPsf_getAveragePosition, METH_VARARGS, (char *)"WarpedPsf_getAveragePosition(WarpedPsf self) -> Point2D"},
	 { (char *)"WarpedPsf_clone", _wrap_WarpedPsf_clone, METH_VARARGS, (char *)"WarpedPsf_clone(WarpedPsf self) -> __dummy_211__"},
	 { (char *)"delete_WarpedPsf", _wrap_delete_WarpedPsf, METH_VARARGS, (char *)"delete_WarpedPsf(WarpedPsf self)"},
	 { (char *)"WarpedPsf_swigregister", WarpedPsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CoaddPsf", _wrap_new_CoaddPsf, METH_VARARGS, (char *)"\n"
		"CoaddPsf( catalog, Wcs coaddWcs, string weightFieldName = \"weight\", \n"
		"    string kernelName = \"lanczos3\", unsigned int cache = 10000)\n"
		"CoaddPsf( catalog, Wcs coaddWcs, string weightFieldName = \"weight\", \n"
		"    string kernelName = \"lanczos3\")\n"
		"CoaddPsf( catalog, Wcs coaddWcs, string weightFieldName = \"weight\")\n"
		"new_CoaddPsf( catalog, Wcs coaddWcs) -> CoaddPsf\n"
		""},
	 { (char *)"CoaddPsf_clone", _wrap_CoaddPsf_clone, METH_VARARGS, (char *)"CoaddPsf_clone(CoaddPsf self) -> __dummy_211__"},
	 { (char *)"CoaddPsf_getAveragePosition", _wrap_CoaddPsf_getAveragePosition, METH_VARARGS, (char *)"CoaddPsf_getAveragePosition(CoaddPsf self) -> Point2D"},
	 { (char *)"CoaddPsf_getCoaddWcs", _wrap_CoaddPsf_getCoaddWcs, METH_VARARGS, (char *)"CoaddPsf_getCoaddWcs(CoaddPsf self) -> __dummy_164__"},
	 { (char *)"CoaddPsf_getComponentCount", _wrap_CoaddPsf_getComponentCount, METH_VARARGS, (char *)"CoaddPsf_getComponentCount(CoaddPsf self) -> int"},
	 { (char *)"CoaddPsf_getPsf", _wrap_CoaddPsf_getPsf, METH_VARARGS, (char *)"CoaddPsf_getPsf(CoaddPsf self, int index) -> __dummy_212__"},
	 { (char *)"CoaddPsf_getWcs", _wrap_CoaddPsf_getWcs, METH_VARARGS, (char *)"CoaddPsf_getWcs(CoaddPsf self, int index) -> __dummy_164__"},
	 { (char *)"CoaddPsf_getWeight", _wrap_CoaddPsf_getWeight, METH_VARARGS, (char *)"CoaddPsf_getWeight(CoaddPsf self, int index) -> double"},
	 { (char *)"CoaddPsf_getId", _wrap_CoaddPsf_getId, METH_VARARGS, (char *)"CoaddPsf_getId(CoaddPsf self, int index) -> RecordId"},
	 { (char *)"CoaddPsf_getBBox", _wrap_CoaddPsf_getBBox, METH_VARARGS, (char *)"CoaddPsf_getBBox(CoaddPsf self, int index) -> Box2I"},
	 { (char *)"CoaddPsf_isPersistable", _wrap_CoaddPsf_isPersistable, METH_VARARGS, (char *)"CoaddPsf_isPersistable(CoaddPsf self) -> bool"},
	 { (char *)"CoaddPsf_swigConvert", _wrap_CoaddPsf_swigConvert, METH_VARARGS, (char *)"CoaddPsf_swigConvert(__dummy_1__ ptr) -> __dummy_475__"},
	 { (char *)"delete_CoaddPsf", _wrap_delete_CoaddPsf, METH_VARARGS, (char *)"delete_CoaddPsf(CoaddPsf self)"},
	 { (char *)"CoaddPsf_swigregister", CoaddPsf_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Shapelet", _wrap_delete_Shapelet, METH_VARARGS, (char *)"delete_Shapelet(Shapelet self)"},
	 { (char *)"Shapelet_getOrder", _wrap_Shapelet_getOrder, METH_VARARGS, (char *)"Shapelet_getOrder(Shapelet self) -> int"},
	 { (char *)"Shapelet_getSigma", _wrap_Shapelet_getSigma, METH_VARARGS, (char *)"Shapelet_getSigma(Shapelet self) -> double"},
	 { (char *)"Shapelet_size", _wrap_Shapelet_size, METH_VARARGS, (char *)"Shapelet_size(Shapelet self) -> int"},
	 { (char *)"Shapelet_getValues", _wrap_Shapelet_getValues, METH_VARARGS, (char *)"Shapelet_getValues(Shapelet self) -> ShapeletVector"},
	 { (char *)"Shapelet_hasCovariance", _wrap_Shapelet_hasCovariance, METH_VARARGS, (char *)"Shapelet_hasCovariance(Shapelet self) -> bool"},
	 { (char *)"Shapelet_getCovariance", _wrap_Shapelet_getCovariance, METH_VARARGS, (char *)"Shapelet_getCovariance(Shapelet self) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::Shapelet::ShapeletCovariance)>"},
	 { (char *)"Shapelet_setSigma", _wrap_Shapelet_setSigma, METH_VARARGS, (char *)"Shapelet_setSigma(Shapelet self, double sigma)"},
	 { (char *)"Shapelet_getPQ", _wrap_Shapelet_getPQ, METH_VARARGS, (char *)"Shapelet_getPQ(Shapelet self, int p, int q) -> std::complex<(double)>"},
	 { (char *)"Shapelet_evaluateAt", _wrap_Shapelet_evaluateAt, METH_VARARGS, (char *)"\n"
		"evaluateAt(PointD pos) -> double\n"
		"Shapelet_evaluateAt(Shapelet self, double x, double y) -> double\n"
		""},
	 { (char *)"Shapelet_measureFromImage", _wrap_Shapelet_measureFromImage, METH_VARARGS, (char *)"\n"
		"measureFromImage(Source source, PointD pos, bool isCentroidFixed, bool isSigmaFixed, \n"
		"    double aperture, Exposure exposure, \n"
		"    MaskPixel okmask = 0) -> bool\n"
		"Shapelet_measureFromImage(Shapelet self, Source source, PointD pos, bool isCentroidFixed, \n"
		"    bool isSigmaFixed, double aperture, \n"
		"    Exposure exposure) -> bool\n"
		""},
	 { (char *)"new_Shapelet", _wrap_new_Shapelet, METH_VARARGS, (char *)"\n"
		"Shapelet(int order, double sigma)\n"
		"Shapelet(int order, double sigma, ShapeletVector vector)\n"
		"Shapelet(int order, double sigma, ShapeletVector vector, ShapeletCovariance cov)\n"
		"Shapelet(Shapelet rhs)\n"
		"new_Shapelet(BVec bvec) -> Shapelet\n"
		""},
	 { (char *)"Shapelet_viewAsBVec", _wrap_Shapelet_viewAsBVec, METH_VARARGS, (char *)"\n"
		"viewAsBVec() -> BVec\n"
		"Shapelet_viewAsBVec(Shapelet self) -> BVec\n"
		""},
	 { (char *)"Shapelet_swigregister", Shapelet_swigregister, METH_VARARGS, NULL},
	 { (char *)"getJacobian", _wrap_getJacobian, METH_VARARGS, (char *)"getJacobian(Wcs wcs, PointD pos) -> Eigen::Matrix2d"},
	 { (char *)"delete_ShapeletInterpolation", _wrap_delete_ShapeletInterpolation, METH_VARARGS, (char *)"delete_ShapeletInterpolation(ShapeletInterpolation self)"},
	 { (char *)"new_ShapeletInterpolation", _wrap_new_ShapeletInterpolation, METH_VARARGS, (char *)"\n"
		"ShapeletInterpolation(Policy policy)\n"
		"new_ShapeletInterpolation(ShapeletInterpolation rhs) -> ShapeletInterpolation\n"
		""},
	 { (char *)"ShapeletInterpolation_getOrder", _wrap_ShapeletInterpolation_getOrder, METH_VARARGS, (char *)"ShapeletInterpolation_getOrder(ShapeletInterpolation self) -> int"},
	 { (char *)"ShapeletInterpolation_getFitOrder", _wrap_ShapeletInterpolation_getFitOrder, METH_VARARGS, (char *)"ShapeletInterpolation_getFitOrder(ShapeletInterpolation self) -> int"},
	 { (char *)"ShapeletInterpolation_getSigma", _wrap_ShapeletInterpolation_getSigma, METH_VARARGS, (char *)"ShapeletInterpolation_getSigma(ShapeletInterpolation self) -> double"},
	 { (char *)"ShapeletInterpolation_getSize", _wrap_ShapeletInterpolation_getSize, METH_VARARGS, (char *)"ShapeletInterpolation_getSize(ShapeletInterpolation self) -> int"},
	 { (char *)"ShapeletInterpolation_getFitSize", _wrap_ShapeletInterpolation_getFitSize, METH_VARARGS, (char *)"ShapeletInterpolation_getFitSize(ShapeletInterpolation self) -> int"},
	 { (char *)"ShapeletInterpolation_setSigma", _wrap_ShapeletInterpolation_setSigma, METH_VARARGS, (char *)"ShapeletInterpolation_setSigma(ShapeletInterpolation self, double sigma)"},
	 { (char *)"ShapeletInterpolation_calculate", _wrap_ShapeletInterpolation_calculate, METH_VARARGS, (char *)"ShapeletInterpolation_calculate(ShapeletInterpolation self, Ptr cellSet, Exposure exposure)"},
	 { (char *)"ShapeletInterpolation_interpolate", _wrap_ShapeletInterpolation_interpolate, METH_VARARGS, (char *)"\n"
		"interpolate(PointD pos) -> ConstPtr\n"
		"ShapeletInterpolation_interpolate(ShapeletInterpolation self, double x, double y) -> ConstPtr\n"
		""},
	 { (char *)"ShapeletInterpolation_interpolateSingleElement", _wrap_ShapeletInterpolation_interpolateSingleElement, METH_VARARGS, (char *)"\n"
		"interpolateSingleElement(PointD pos, int i) -> double\n"
		"ShapeletInterpolation_interpolateSingleElement(ShapeletInterpolation self, double x, double y, int i) -> double\n"
		""},
	 { (char *)"ShapeletInterpolation_swigregister", ShapeletInterpolation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LocalShapeletKernel", _wrap_new_LocalShapeletKernel, METH_VARARGS, (char *)"\n"
		"LocalShapeletKernel(ConstPtr shapelet, ConstPtr wcsPtr, Extent size)\n"
		"new_LocalShapeletKernel(ConstPtr shapelet, ConstPtr wcsPtr) -> LocalShapeletKernel\n"
		""},
	 { (char *)"LocalShapeletKernel_computeImage", _wrap_LocalShapeletKernel_computeImage, METH_VARARGS, (char *)"\n"
		"computeImage(Image image, bool doNormalize, double x = 0.0, double y = 0.0) -> double\n"
		"computeImage(Image image, bool doNormalize, double x = 0.0) -> double\n"
		"LocalShapeletKernel_computeImage(LocalShapeletKernel self, Image image, bool doNormalize) -> double\n"
		""},
	 { (char *)"delete_LocalShapeletKernel", _wrap_delete_LocalShapeletKernel, METH_VARARGS, (char *)"delete_LocalShapeletKernel(LocalShapeletKernel self)"},
	 { (char *)"LocalShapeletKernel_swigregister", LocalShapeletKernel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ShapeletKernel", _wrap_new_ShapeletKernel, METH_VARARGS, (char *)"\n"
		"ShapeletKernel(ConstPtr interp, ConstPtr wcsPtr, Extent size)\n"
		"new_ShapeletKernel(ConstPtr interp, ConstPtr wcsPtr) -> ShapeletKernel\n"
		""},
	 { (char *)"ShapeletKernel_getLocalKernel", _wrap_ShapeletKernel_getLocalKernel, METH_VARARGS, (char *)"ShapeletKernel_getLocalKernel(ShapeletKernel self, Point pos) -> ConstPtr"},
	 { (char *)"ShapeletKernel_computeImage", _wrap_ShapeletKernel_computeImage, METH_VARARGS, (char *)"\n"
		"computeImage(Image image, bool doNormalize, double x = 0.0, double y = 0.0) -> double\n"
		"computeImage(Image image, bool doNormalize, double x = 0.0) -> double\n"
		"ShapeletKernel_computeImage(ShapeletKernel self, Image image, bool doNormalize) -> double\n"
		""},
	 { (char *)"delete_ShapeletKernel", _wrap_delete_ShapeletKernel, METH_VARARGS, (char *)"delete_ShapeletKernel(ShapeletKernel self)"},
	 { (char *)"ShapeletKernel_swigregister", ShapeletKernel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ShapeletPsfCandidate", _wrap_new_ShapeletPsfCandidate, METH_VARARGS, (char *)"new_ShapeletPsfCandidate(double x, double y, double size, boost::shared_ptr<(lsst::meas::algorithms::ShapeletPsfCandidate::Source)> source) -> ShapeletPsfCandidate"},
	 { (char *)"ShapeletPsfCandidate_setShapelet", _wrap_ShapeletPsfCandidate_setShapelet, METH_VARARGS, (char *)"ShapeletPsfCandidate_setShapelet(ShapeletPsfCandidate self, ConstPtr shapelet)"},
	 { (char *)"ShapeletPsfCandidate_getX", _wrap_ShapeletPsfCandidate_getX, METH_VARARGS, (char *)"ShapeletPsfCandidate_getX(ShapeletPsfCandidate self) -> double"},
	 { (char *)"ShapeletPsfCandidate_getY", _wrap_ShapeletPsfCandidate_getY, METH_VARARGS, (char *)"ShapeletPsfCandidate_getY(ShapeletPsfCandidate self) -> double"},
	 { (char *)"ShapeletPsfCandidate_getSize", _wrap_ShapeletPsfCandidate_getSize, METH_VARARGS, (char *)"ShapeletPsfCandidate_getSize(ShapeletPsfCandidate self) -> double"},
	 { (char *)"ShapeletPsfCandidate_getSource", _wrap_ShapeletPsfCandidate_getSource, METH_VARARGS, (char *)"ShapeletPsfCandidate_getSource(ShapeletPsfCandidate self) -> boost::shared_ptr<(lsst::meas::algorithms::ShapeletPsfCandidate::Source)>"},
	 { (char *)"ShapeletPsfCandidate_getShapelet", _wrap_ShapeletPsfCandidate_getShapelet, METH_VARARGS, (char *)"ShapeletPsfCandidate_getShapelet(ShapeletPsfCandidate self) -> ConstPtr"},
	 { (char *)"ShapeletPsfCandidate_hasShapelet", _wrap_ShapeletPsfCandidate_hasShapelet, METH_VARARGS, (char *)"ShapeletPsfCandidate_hasShapelet(ShapeletPsfCandidate self) -> bool"},
	 { (char *)"ShapeletPsfCandidate_getCandidateRating", _wrap_ShapeletPsfCandidate_getCandidateRating, METH_VARARGS, (char *)"ShapeletPsfCandidate_getCandidateRating(ShapeletPsfCandidate self) -> double"},
	 { (char *)"ShapeletPsfCandidate_setBad", _wrap_ShapeletPsfCandidate_setBad, METH_VARARGS, (char *)"ShapeletPsfCandidate_setBad(ShapeletPsfCandidate self)"},
	 { (char *)"delete_ShapeletPsfCandidate", _wrap_delete_ShapeletPsfCandidate, METH_VARARGS, (char *)"delete_ShapeletPsfCandidate(ShapeletPsfCandidate self)"},
	 { (char *)"ShapeletPsfCandidate_swigregister", ShapeletPsfCandidate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SizeMagnitudeStarSelector", _wrap_new_SizeMagnitudeStarSelector, METH_VARARGS, (char *)"new_SizeMagnitudeStarSelector(Policy policy) -> SizeMagnitudeStarSelector"},
	 { (char *)"delete_SizeMagnitudeStarSelector", _wrap_delete_SizeMagnitudeStarSelector, METH_VARARGS, (char *)"delete_SizeMagnitudeStarSelector(SizeMagnitudeStarSelector self)"},
	 { (char *)"SizeMagnitudeStarSelector_selectStars", _wrap_SizeMagnitudeStarSelector_selectStars, METH_VARARGS, (char *)"\n"
		"selectStars(Exposure exposure, SourceCatalog sourceList, boost::shared_ptr<(q(const).lsst::afw::table::ReferenceMatchVector)> matches = boost::shared_ptr< afw::table::ReferenceMatchVector const >()) -> PsfCandidateList\n"
		"SizeMagnitudeStarSelector_selectStars(SizeMagnitudeStarSelector self, Exposure exposure, \n"
		"    SourceCatalog sourceList) -> PsfCandidateList\n"
		""},
	 { (char *)"SizeMagnitudeStarSelector_swigregister", SizeMagnitudeStarSelector_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Algorithm", _wrap_delete_Algorithm, METH_VARARGS, (char *)"delete_Algorithm(Algorithm self)"},
	 { (char *)"Algorithm_getControl", _wrap_Algorithm_getControl, METH_VARARGS, (char *)"Algorithm_getControl(Algorithm self) -> AlgorithmControl"},
	 { (char *)"Algorithm_swigregister", Algorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"AlgorithmControl_name_set", _wrap_AlgorithmControl_name_set, METH_VARARGS, (char *)"AlgorithmControl_name_set(AlgorithmControl self, string name)"},
	 { (char *)"AlgorithmControl_name_get", _wrap_AlgorithmControl_name_get, METH_VARARGS, (char *)"AlgorithmControl_name_get(AlgorithmControl self) -> string"},
	 { (char *)"AlgorithmControl__doc_priority", _wrap_AlgorithmControl__doc_priority, METH_VARARGS, (char *)"AlgorithmControl__doc_priority() -> char"},
	 { (char *)"AlgorithmControl__type_priority", _wrap_AlgorithmControl__type_priority, METH_VARARGS, (char *)"AlgorithmControl__type_priority() -> char"},
	 { (char *)"AlgorithmControl_priority_set", _wrap_AlgorithmControl_priority_set, METH_VARARGS, (char *)"AlgorithmControl_priority_set(AlgorithmControl self, double priority)"},
	 { (char *)"AlgorithmControl_priority_get", _wrap_AlgorithmControl_priority_get, METH_VARARGS, (char *)"AlgorithmControl_priority_get(AlgorithmControl self) -> double"},
	 { (char *)"AlgorithmControl_clone", _wrap_AlgorithmControl_clone, METH_VARARGS, (char *)"AlgorithmControl_clone(AlgorithmControl self) -> __dummy_491__"},
	 { (char *)"AlgorithmControl_makeAlgorithm", _wrap_AlgorithmControl_makeAlgorithm, METH_VARARGS, (char *)"\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), \n"
		"    AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_489__\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_489__\n"
		"AlgorithmControl_makeAlgorithm(AlgorithmControl self, Schema schema) -> __dummy_489__\n"
		""},
	 { (char *)"delete_AlgorithmControl", _wrap_delete_AlgorithmControl, METH_VARARGS, (char *)"delete_AlgorithmControl(AlgorithmControl self)"},
	 { (char *)"AlgorithmControl_swigregister", AlgorithmControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"FluxAlgorithm_getControl", _wrap_FluxAlgorithm_getControl, METH_VARARGS, (char *)"FluxAlgorithm_getControl(FluxAlgorithm self) -> FluxControl"},
	 { (char *)"FluxAlgorithm_getKeys", _wrap_FluxAlgorithm_getKeys, METH_VARARGS, (char *)"FluxAlgorithm_getKeys(FluxAlgorithm self) -> KeyTuple"},
	 { (char *)"delete_FluxAlgorithm", _wrap_delete_FluxAlgorithm, METH_VARARGS, (char *)"delete_FluxAlgorithm(FluxAlgorithm self)"},
	 { (char *)"FluxAlgorithm_swigregister", FluxAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"FluxControl_clone", _wrap_FluxControl_clone, METH_VARARGS, (char *)"FluxControl_clone(FluxControl self) -> __dummy_513__"},
	 { (char *)"FluxControl_makeAlgorithm", _wrap_FluxControl_makeAlgorithm, METH_VARARGS, (char *)"\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), \n"
		"    AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_511__\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_511__\n"
		"FluxControl_makeAlgorithm(FluxControl self, Schema schema) -> __dummy_511__\n"
		""},
	 { (char *)"delete_FluxControl", _wrap_delete_FluxControl, METH_VARARGS, (char *)"delete_FluxControl(FluxControl self)"},
	 { (char *)"FluxControl_swigregister", FluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"ApertureFluxControl__doc_radii", _wrap_ApertureFluxControl__doc_radii, METH_VARARGS, (char *)"ApertureFluxControl__doc_radii() -> char"},
	 { (char *)"ApertureFluxControl__type_radii", _wrap_ApertureFluxControl__type_radii, METH_VARARGS, (char *)"ApertureFluxControl__type_radii() -> char"},
	 { (char *)"ApertureFluxControl_radii_set", _wrap_ApertureFluxControl_radii_set, METH_VARARGS, (char *)"ApertureFluxControl_radii_set(ApertureFluxControl self, VectorDouble radii)"},
	 { (char *)"ApertureFluxControl_radii_get", _wrap_ApertureFluxControl_radii_get, METH_VARARGS, (char *)"ApertureFluxControl_radii_get(ApertureFluxControl self) -> VectorDouble"},
	 { (char *)"new_ApertureFluxControl", _wrap_new_ApertureFluxControl, METH_VARARGS, (char *)"\n"
		"ApertureFluxControl(string name = \"flux.aperture\", float priority = 2.0)\n"
		"ApertureFluxControl(string name = \"flux.aperture\")\n"
		"new_ApertureFluxControl() -> ApertureFluxControl\n"
		""},
	 { (char *)"delete_ApertureFluxControl", _wrap_delete_ApertureFluxControl, METH_VARARGS, (char *)"delete_ApertureFluxControl(ApertureFluxControl self)"},
	 { (char *)"ApertureFluxControl_swigregister", ApertureFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EllipticalApertureFluxControl", _wrap_new_EllipticalApertureFluxControl, METH_VARARGS, (char *)"new_EllipticalApertureFluxControl() -> EllipticalApertureFluxControl"},
	 { (char *)"delete_EllipticalApertureFluxControl", _wrap_delete_EllipticalApertureFluxControl, METH_VARARGS, (char *)"delete_EllipticalApertureFluxControl(EllipticalApertureFluxControl self)"},
	 { (char *)"EllipticalApertureFluxControl_swigregister", EllipticalApertureFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"PeakLikelihoodFluxControl__doc_warpingKernelName", _wrap_PeakLikelihoodFluxControl__doc_warpingKernelName, METH_VARARGS, (char *)"PeakLikelihoodFluxControl__doc_warpingKernelName() -> char"},
	 { (char *)"PeakLikelihoodFluxControl__type_warpingKernelName", _wrap_PeakLikelihoodFluxControl__type_warpingKernelName, METH_VARARGS, (char *)"PeakLikelihoodFluxControl__type_warpingKernelName() -> char"},
	 { (char *)"PeakLikelihoodFluxControl_warpingKernelName_set", _wrap_PeakLikelihoodFluxControl_warpingKernelName_set, METH_VARARGS, (char *)"PeakLikelihoodFluxControl_warpingKernelName_set(PeakLikelihoodFluxControl self, string warpingKernelName)"},
	 { (char *)"PeakLikelihoodFluxControl_warpingKernelName_get", _wrap_PeakLikelihoodFluxControl_warpingKernelName_get, METH_VARARGS, (char *)"PeakLikelihoodFluxControl_warpingKernelName_get(PeakLikelihoodFluxControl self) -> string"},
	 { (char *)"new_PeakLikelihoodFluxControl", _wrap_new_PeakLikelihoodFluxControl, METH_VARARGS, (char *)"new_PeakLikelihoodFluxControl() -> PeakLikelihoodFluxControl"},
	 { (char *)"delete_PeakLikelihoodFluxControl", _wrap_delete_PeakLikelihoodFluxControl, METH_VARARGS, (char *)"delete_PeakLikelihoodFluxControl(PeakLikelihoodFluxControl self)"},
	 { (char *)"PeakLikelihoodFluxControl_swigregister", PeakLikelihoodFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"NaiveFluxControl__doc_radius", _wrap_NaiveFluxControl__doc_radius, METH_VARARGS, (char *)"NaiveFluxControl__doc_radius() -> char"},
	 { (char *)"NaiveFluxControl__type_radius", _wrap_NaiveFluxControl__type_radius, METH_VARARGS, (char *)"NaiveFluxControl__type_radius() -> char"},
	 { (char *)"NaiveFluxControl_radius_set", _wrap_NaiveFluxControl_radius_set, METH_VARARGS, (char *)"NaiveFluxControl_radius_set(NaiveFluxControl self, double radius)"},
	 { (char *)"NaiveFluxControl_radius_get", _wrap_NaiveFluxControl_radius_get, METH_VARARGS, (char *)"NaiveFluxControl_radius_get(NaiveFluxControl self) -> double"},
	 { (char *)"new_NaiveFluxControl", _wrap_new_NaiveFluxControl, METH_VARARGS, (char *)"new_NaiveFluxControl() -> NaiveFluxControl"},
	 { (char *)"delete_NaiveFluxControl", _wrap_delete_NaiveFluxControl, METH_VARARGS, (char *)"delete_NaiveFluxControl(NaiveFluxControl self)"},
	 { (char *)"NaiveFluxControl_swigregister", NaiveFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PsfFluxControl", _wrap_new_PsfFluxControl, METH_VARARGS, (char *)"new_PsfFluxControl() -> PsfFluxControl"},
	 { (char *)"delete_PsfFluxControl", _wrap_delete_PsfFluxControl, METH_VARARGS, (char *)"delete_PsfFluxControl(PsfFluxControl self)"},
	 { (char *)"PsfFluxControl_swigregister", PsfFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SincFluxControl__doc_radius1", _wrap_SincFluxControl__doc_radius1, METH_VARARGS, (char *)"SincFluxControl__doc_radius1() -> char"},
	 { (char *)"SincFluxControl__type_radius1", _wrap_SincFluxControl__type_radius1, METH_VARARGS, (char *)"SincFluxControl__type_radius1() -> char"},
	 { (char *)"SincFluxControl_radius1_set", _wrap_SincFluxControl_radius1_set, METH_VARARGS, (char *)"SincFluxControl_radius1_set(SincFluxControl self, double radius1)"},
	 { (char *)"SincFluxControl_radius1_get", _wrap_SincFluxControl_radius1_get, METH_VARARGS, (char *)"SincFluxControl_radius1_get(SincFluxControl self) -> double"},
	 { (char *)"SincFluxControl__doc_radius2", _wrap_SincFluxControl__doc_radius2, METH_VARARGS, (char *)"SincFluxControl__doc_radius2() -> char"},
	 { (char *)"SincFluxControl__type_radius2", _wrap_SincFluxControl__type_radius2, METH_VARARGS, (char *)"SincFluxControl__type_radius2() -> char"},
	 { (char *)"SincFluxControl_radius2_set", _wrap_SincFluxControl_radius2_set, METH_VARARGS, (char *)"SincFluxControl_radius2_set(SincFluxControl self, double radius2)"},
	 { (char *)"SincFluxControl_radius2_get", _wrap_SincFluxControl_radius2_get, METH_VARARGS, (char *)"SincFluxControl_radius2_get(SincFluxControl self) -> double"},
	 { (char *)"SincFluxControl__doc_angle", _wrap_SincFluxControl__doc_angle, METH_VARARGS, (char *)"SincFluxControl__doc_angle() -> char"},
	 { (char *)"SincFluxControl__type_angle", _wrap_SincFluxControl__type_angle, METH_VARARGS, (char *)"SincFluxControl__type_angle() -> char"},
	 { (char *)"SincFluxControl_angle_set", _wrap_SincFluxControl_angle_set, METH_VARARGS, (char *)"SincFluxControl_angle_set(SincFluxControl self, double angle)"},
	 { (char *)"SincFluxControl_angle_get", _wrap_SincFluxControl_angle_get, METH_VARARGS, (char *)"SincFluxControl_angle_get(SincFluxControl self) -> double"},
	 { (char *)"SincFluxControl__doc_ellipticity", _wrap_SincFluxControl__doc_ellipticity, METH_VARARGS, (char *)"SincFluxControl__doc_ellipticity() -> char"},
	 { (char *)"SincFluxControl__type_ellipticity", _wrap_SincFluxControl__type_ellipticity, METH_VARARGS, (char *)"SincFluxControl__type_ellipticity() -> char"},
	 { (char *)"SincFluxControl_ellipticity_set", _wrap_SincFluxControl_ellipticity_set, METH_VARARGS, (char *)"SincFluxControl_ellipticity_set(SincFluxControl self, double ellipticity)"},
	 { (char *)"SincFluxControl_ellipticity_get", _wrap_SincFluxControl_ellipticity_get, METH_VARARGS, (char *)"SincFluxControl_ellipticity_get(SincFluxControl self) -> double"},
	 { (char *)"new_SincFluxControl", _wrap_new_SincFluxControl, METH_VARARGS, (char *)"new_SincFluxControl() -> SincFluxControl"},
	 { (char *)"delete_SincFluxControl", _wrap_delete_SincFluxControl, METH_VARARGS, (char *)"delete_SincFluxControl(SincFluxControl self)"},
	 { (char *)"SincFluxControl_swigregister", SincFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"CentroidAlgorithm_getControl", _wrap_CentroidAlgorithm_getControl, METH_VARARGS, (char *)"CentroidAlgorithm_getControl(CentroidAlgorithm self) -> CentroidControl"},
	 { (char *)"CentroidAlgorithm_getKeys", _wrap_CentroidAlgorithm_getKeys, METH_VARARGS, (char *)"CentroidAlgorithm_getKeys(CentroidAlgorithm self) -> KeyTuple"},
	 { (char *)"delete_CentroidAlgorithm", _wrap_delete_CentroidAlgorithm, METH_VARARGS, (char *)"delete_CentroidAlgorithm(CentroidAlgorithm self)"},
	 { (char *)"CentroidAlgorithm_swigregister", CentroidAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"CentroidControl_clone", _wrap_CentroidControl_clone, METH_VARARGS, (char *)"CentroidControl_clone(CentroidControl self) -> __dummy_495__"},
	 { (char *)"CentroidControl_makeAlgorithm", _wrap_CentroidControl_makeAlgorithm, METH_VARARGS, (char *)"\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), \n"
		"    AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_493__\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_493__\n"
		"CentroidControl_makeAlgorithm(CentroidControl self, Schema schema) -> __dummy_493__\n"
		""},
	 { (char *)"delete_CentroidControl", _wrap_delete_CentroidControl, METH_VARARGS, (char *)"delete_CentroidControl(CentroidControl self)"},
	 { (char *)"CentroidControl_swigregister", CentroidControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GaussianCentroidControl", _wrap_new_GaussianCentroidControl, METH_VARARGS, (char *)"new_GaussianCentroidControl() -> GaussianCentroidControl"},
	 { (char *)"delete_GaussianCentroidControl", _wrap_delete_GaussianCentroidControl, METH_VARARGS, (char *)"delete_GaussianCentroidControl(GaussianCentroidControl self)"},
	 { (char *)"GaussianCentroidControl_swigregister", GaussianCentroidControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"NaiveCentroidControl__doc_background", _wrap_NaiveCentroidControl__doc_background, METH_VARARGS, (char *)"NaiveCentroidControl__doc_background() -> char"},
	 { (char *)"NaiveCentroidControl__type_background", _wrap_NaiveCentroidControl__type_background, METH_VARARGS, (char *)"NaiveCentroidControl__type_background() -> char"},
	 { (char *)"NaiveCentroidControl_background_set", _wrap_NaiveCentroidControl_background_set, METH_VARARGS, (char *)"NaiveCentroidControl_background_set(NaiveCentroidControl self, double background)"},
	 { (char *)"NaiveCentroidControl_background_get", _wrap_NaiveCentroidControl_background_get, METH_VARARGS, (char *)"NaiveCentroidControl_background_get(NaiveCentroidControl self) -> double"},
	 { (char *)"new_NaiveCentroidControl", _wrap_new_NaiveCentroidControl, METH_VARARGS, (char *)"new_NaiveCentroidControl() -> NaiveCentroidControl"},
	 { (char *)"delete_NaiveCentroidControl", _wrap_delete_NaiveCentroidControl, METH_VARARGS, (char *)"delete_NaiveCentroidControl(NaiveCentroidControl self)"},
	 { (char *)"NaiveCentroidControl_swigregister", NaiveCentroidControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SdssCentroidControl__doc_binmax", _wrap_SdssCentroidControl__doc_binmax, METH_VARARGS, (char *)"SdssCentroidControl__doc_binmax() -> char"},
	 { (char *)"SdssCentroidControl__type_binmax", _wrap_SdssCentroidControl__type_binmax, METH_VARARGS, (char *)"SdssCentroidControl__type_binmax() -> char"},
	 { (char *)"SdssCentroidControl_binmax_set", _wrap_SdssCentroidControl_binmax_set, METH_VARARGS, (char *)"SdssCentroidControl_binmax_set(SdssCentroidControl self, int binmax)"},
	 { (char *)"SdssCentroidControl_binmax_get", _wrap_SdssCentroidControl_binmax_get, METH_VARARGS, (char *)"SdssCentroidControl_binmax_get(SdssCentroidControl self) -> int"},
	 { (char *)"SdssCentroidControl__doc_peakMin", _wrap_SdssCentroidControl__doc_peakMin, METH_VARARGS, (char *)"SdssCentroidControl__doc_peakMin() -> char"},
	 { (char *)"SdssCentroidControl__type_peakMin", _wrap_SdssCentroidControl__type_peakMin, METH_VARARGS, (char *)"SdssCentroidControl__type_peakMin() -> char"},
	 { (char *)"SdssCentroidControl_peakMin_set", _wrap_SdssCentroidControl_peakMin_set, METH_VARARGS, (char *)"SdssCentroidControl_peakMin_set(SdssCentroidControl self, double peakMin)"},
	 { (char *)"SdssCentroidControl_peakMin_get", _wrap_SdssCentroidControl_peakMin_get, METH_VARARGS, (char *)"SdssCentroidControl_peakMin_get(SdssCentroidControl self) -> double"},
	 { (char *)"SdssCentroidControl__doc_wfac", _wrap_SdssCentroidControl__doc_wfac, METH_VARARGS, (char *)"SdssCentroidControl__doc_wfac() -> char"},
	 { (char *)"SdssCentroidControl__type_wfac", _wrap_SdssCentroidControl__type_wfac, METH_VARARGS, (char *)"SdssCentroidControl__type_wfac() -> char"},
	 { (char *)"SdssCentroidControl_wfac_set", _wrap_SdssCentroidControl_wfac_set, METH_VARARGS, (char *)"SdssCentroidControl_wfac_set(SdssCentroidControl self, double wfac)"},
	 { (char *)"SdssCentroidControl_wfac_get", _wrap_SdssCentroidControl_wfac_get, METH_VARARGS, (char *)"SdssCentroidControl_wfac_get(SdssCentroidControl self) -> double"},
	 { (char *)"new_SdssCentroidControl", _wrap_new_SdssCentroidControl, METH_VARARGS, (char *)"new_SdssCentroidControl() -> SdssCentroidControl"},
	 { (char *)"delete_SdssCentroidControl", _wrap_delete_SdssCentroidControl, METH_VARARGS, (char *)"delete_SdssCentroidControl(SdssCentroidControl self)"},
	 { (char *)"SdssCentroidControl_swigregister", SdssCentroidControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShapeAlgorithm_getControl", _wrap_ShapeAlgorithm_getControl, METH_VARARGS, (char *)"ShapeAlgorithm_getControl(ShapeAlgorithm self) -> ShapeControl"},
	 { (char *)"ShapeAlgorithm_getKeys", _wrap_ShapeAlgorithm_getKeys, METH_VARARGS, (char *)"ShapeAlgorithm_getKeys(ShapeAlgorithm self) -> KeyTuple"},
	 { (char *)"delete_ShapeAlgorithm", _wrap_delete_ShapeAlgorithm, METH_VARARGS, (char *)"delete_ShapeAlgorithm(ShapeAlgorithm self)"},
	 { (char *)"ShapeAlgorithm_swigregister", ShapeAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShapeControl_clone", _wrap_ShapeControl_clone, METH_VARARGS, (char *)"ShapeControl_clone(ShapeControl self) -> __dummy_507__"},
	 { (char *)"ShapeControl_makeAlgorithm", _wrap_ShapeControl_makeAlgorithm, METH_VARARGS, (char *)"\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), \n"
		"    AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_505__\n"
		"makeAlgorithm(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_505__\n"
		"ShapeControl_makeAlgorithm(ShapeControl self, Schema schema) -> __dummy_505__\n"
		""},
	 { (char *)"delete_ShapeControl", _wrap_delete_ShapeControl, METH_VARARGS, (char *)"delete_ShapeControl(ShapeControl self)"},
	 { (char *)"ShapeControl_swigregister", ShapeControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClassificationControl__doc_fluxRatio", _wrap_ClassificationControl__doc_fluxRatio, METH_VARARGS, (char *)"ClassificationControl__doc_fluxRatio() -> char"},
	 { (char *)"ClassificationControl__type_fluxRatio", _wrap_ClassificationControl__type_fluxRatio, METH_VARARGS, (char *)"ClassificationControl__type_fluxRatio() -> char"},
	 { (char *)"ClassificationControl_fluxRatio_set", _wrap_ClassificationControl_fluxRatio_set, METH_VARARGS, (char *)"ClassificationControl_fluxRatio_set(ClassificationControl self, double fluxRatio)"},
	 { (char *)"ClassificationControl_fluxRatio_get", _wrap_ClassificationControl_fluxRatio_get, METH_VARARGS, (char *)"ClassificationControl_fluxRatio_get(ClassificationControl self) -> double"},
	 { (char *)"ClassificationControl__doc_modelErrFactor", _wrap_ClassificationControl__doc_modelErrFactor, METH_VARARGS, (char *)"ClassificationControl__doc_modelErrFactor() -> char"},
	 { (char *)"ClassificationControl__type_modelErrFactor", _wrap_ClassificationControl__type_modelErrFactor, METH_VARARGS, (char *)"ClassificationControl__type_modelErrFactor() -> char"},
	 { (char *)"ClassificationControl_modelErrFactor_set", _wrap_ClassificationControl_modelErrFactor_set, METH_VARARGS, (char *)"ClassificationControl_modelErrFactor_set(ClassificationControl self, double modelErrFactor)"},
	 { (char *)"ClassificationControl_modelErrFactor_get", _wrap_ClassificationControl_modelErrFactor_get, METH_VARARGS, (char *)"ClassificationControl_modelErrFactor_get(ClassificationControl self) -> double"},
	 { (char *)"ClassificationControl__doc_psfErrFactor", _wrap_ClassificationControl__doc_psfErrFactor, METH_VARARGS, (char *)"ClassificationControl__doc_psfErrFactor() -> char"},
	 { (char *)"ClassificationControl__type_psfErrFactor", _wrap_ClassificationControl__type_psfErrFactor, METH_VARARGS, (char *)"ClassificationControl__type_psfErrFactor() -> char"},
	 { (char *)"ClassificationControl_psfErrFactor_set", _wrap_ClassificationControl_psfErrFactor_set, METH_VARARGS, (char *)"ClassificationControl_psfErrFactor_set(ClassificationControl self, double psfErrFactor)"},
	 { (char *)"ClassificationControl_psfErrFactor_get", _wrap_ClassificationControl_psfErrFactor_get, METH_VARARGS, (char *)"ClassificationControl_psfErrFactor_get(ClassificationControl self) -> double"},
	 { (char *)"new_ClassificationControl", _wrap_new_ClassificationControl, METH_VARARGS, (char *)"new_ClassificationControl() -> ClassificationControl"},
	 { (char *)"ClassificationControl_clone", _wrap_ClassificationControl_clone, METH_VARARGS, (char *)"ClassificationControl_clone(ClassificationControl self) -> __dummy_531__"},
	 { (char *)"delete_ClassificationControl", _wrap_delete_ClassificationControl, METH_VARARGS, (char *)"delete_ClassificationControl(ClassificationControl self)"},
	 { (char *)"ClassificationControl_swigregister", ClassificationControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PixelFlagControl", _wrap_new_PixelFlagControl, METH_VARARGS, (char *)"new_PixelFlagControl() -> PixelFlagControl"},
	 { (char *)"PixelFlagControl_clone", _wrap_PixelFlagControl_clone, METH_VARARGS, (char *)"PixelFlagControl_clone(PixelFlagControl self) -> __dummy_533__"},
	 { (char *)"delete_PixelFlagControl", _wrap_delete_PixelFlagControl, METH_VARARGS, (char *)"delete_PixelFlagControl(PixelFlagControl self)"},
	 { (char *)"PixelFlagControl_swigregister", PixelFlagControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SkyCoordControl", _wrap_new_SkyCoordControl, METH_VARARGS, (char *)"new_SkyCoordControl() -> SkyCoordControl"},
	 { (char *)"SkyCoordControl_clone", _wrap_SkyCoordControl_clone, METH_VARARGS, (char *)"SkyCoordControl_clone(SkyCoordControl self) -> __dummy_535__"},
	 { (char *)"delete_SkyCoordControl", _wrap_delete_SkyCoordControl, METH_VARARGS, (char *)"delete_SkyCoordControl(SkyCoordControl self)"},
	 { (char *)"SkyCoordControl_swigregister", SkyCoordControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RecordCentroidControl", _wrap_new_RecordCentroidControl, METH_VARARGS, (char *)"new_RecordCentroidControl() -> RecordCentroidControl"},
	 { (char *)"RecordCentroidControl_clone", _wrap_RecordCentroidControl_clone, METH_VARARGS, (char *)"RecordCentroidControl_clone(RecordCentroidControl self) -> __dummy_503__"},
	 { (char *)"delete_RecordCentroidControl", _wrap_delete_RecordCentroidControl, METH_VARARGS, (char *)"delete_RecordCentroidControl(RecordCentroidControl self)"},
	 { (char *)"RecordCentroidControl_swigregister", RecordCentroidControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SdssShapeControl__doc_background", _wrap_SdssShapeControl__doc_background, METH_VARARGS, (char *)"SdssShapeControl__doc_background() -> char"},
	 { (char *)"SdssShapeControl__type_background", _wrap_SdssShapeControl__type_background, METH_VARARGS, (char *)"SdssShapeControl__type_background() -> char"},
	 { (char *)"SdssShapeControl_background_set", _wrap_SdssShapeControl_background_set, METH_VARARGS, (char *)"SdssShapeControl_background_set(SdssShapeControl self, double background)"},
	 { (char *)"SdssShapeControl_background_get", _wrap_SdssShapeControl_background_get, METH_VARARGS, (char *)"SdssShapeControl_background_get(SdssShapeControl self) -> double"},
	 { (char *)"SdssShapeControl__doc_maxIter", _wrap_SdssShapeControl__doc_maxIter, METH_VARARGS, (char *)"SdssShapeControl__doc_maxIter() -> char"},
	 { (char *)"SdssShapeControl__type_maxIter", _wrap_SdssShapeControl__type_maxIter, METH_VARARGS, (char *)"SdssShapeControl__type_maxIter() -> char"},
	 { (char *)"SdssShapeControl_maxIter_set", _wrap_SdssShapeControl_maxIter_set, METH_VARARGS, (char *)"SdssShapeControl_maxIter_set(SdssShapeControl self, int maxIter)"},
	 { (char *)"SdssShapeControl_maxIter_get", _wrap_SdssShapeControl_maxIter_get, METH_VARARGS, (char *)"SdssShapeControl_maxIter_get(SdssShapeControl self) -> int"},
	 { (char *)"SdssShapeControl__doc_tol1", _wrap_SdssShapeControl__doc_tol1, METH_VARARGS, (char *)"SdssShapeControl__doc_tol1() -> char"},
	 { (char *)"SdssShapeControl__type_tol1", _wrap_SdssShapeControl__type_tol1, METH_VARARGS, (char *)"SdssShapeControl__type_tol1() -> char"},
	 { (char *)"SdssShapeControl_tol1_set", _wrap_SdssShapeControl_tol1_set, METH_VARARGS, (char *)"SdssShapeControl_tol1_set(SdssShapeControl self, float tol1)"},
	 { (char *)"SdssShapeControl_tol1_get", _wrap_SdssShapeControl_tol1_get, METH_VARARGS, (char *)"SdssShapeControl_tol1_get(SdssShapeControl self) -> float"},
	 { (char *)"SdssShapeControl__doc_tol2", _wrap_SdssShapeControl__doc_tol2, METH_VARARGS, (char *)"SdssShapeControl__doc_tol2() -> char"},
	 { (char *)"SdssShapeControl__type_tol2", _wrap_SdssShapeControl__type_tol2, METH_VARARGS, (char *)"SdssShapeControl__type_tol2() -> char"},
	 { (char *)"SdssShapeControl_tol2_set", _wrap_SdssShapeControl_tol2_set, METH_VARARGS, (char *)"SdssShapeControl_tol2_set(SdssShapeControl self, float tol2)"},
	 { (char *)"SdssShapeControl_tol2_get", _wrap_SdssShapeControl_tol2_get, METH_VARARGS, (char *)"SdssShapeControl_tol2_get(SdssShapeControl self) -> float"},
	 { (char *)"new_SdssShapeControl", _wrap_new_SdssShapeControl, METH_VARARGS, (char *)"new_SdssShapeControl() -> SdssShapeControl"},
	 { (char *)"delete_SdssShapeControl", _wrap_delete_SdssShapeControl, METH_VARARGS, (char *)"delete_SdssShapeControl(SdssShapeControl self)"},
	 { (char *)"SdssShapeControl_swigregister", SdssShapeControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"GaussianFluxControl__doc_fixed", _wrap_GaussianFluxControl__doc_fixed, METH_VARARGS, (char *)"GaussianFluxControl__doc_fixed() -> char"},
	 { (char *)"GaussianFluxControl__type_fixed", _wrap_GaussianFluxControl__type_fixed, METH_VARARGS, (char *)"GaussianFluxControl__type_fixed() -> char"},
	 { (char *)"GaussianFluxControl_fixed_set", _wrap_GaussianFluxControl_fixed_set, METH_VARARGS, (char *)"GaussianFluxControl_fixed_set(GaussianFluxControl self, bool fixed)"},
	 { (char *)"GaussianFluxControl_fixed_get", _wrap_GaussianFluxControl_fixed_get, METH_VARARGS, (char *)"GaussianFluxControl_fixed_get(GaussianFluxControl self) -> bool"},
	 { (char *)"GaussianFluxControl__doc_background", _wrap_GaussianFluxControl__doc_background, METH_VARARGS, (char *)"GaussianFluxControl__doc_background() -> char"},
	 { (char *)"GaussianFluxControl__type_background", _wrap_GaussianFluxControl__type_background, METH_VARARGS, (char *)"GaussianFluxControl__type_background() -> char"},
	 { (char *)"GaussianFluxControl_background_set", _wrap_GaussianFluxControl_background_set, METH_VARARGS, (char *)"GaussianFluxControl_background_set(GaussianFluxControl self, double background)"},
	 { (char *)"GaussianFluxControl_background_get", _wrap_GaussianFluxControl_background_get, METH_VARARGS, (char *)"GaussianFluxControl_background_get(GaussianFluxControl self) -> double"},
	 { (char *)"GaussianFluxControl__doc_shiftmax", _wrap_GaussianFluxControl__doc_shiftmax, METH_VARARGS, (char *)"GaussianFluxControl__doc_shiftmax() -> char"},
	 { (char *)"GaussianFluxControl__type_shiftmax", _wrap_GaussianFluxControl__type_shiftmax, METH_VARARGS, (char *)"GaussianFluxControl__type_shiftmax() -> char"},
	 { (char *)"GaussianFluxControl_shiftmax_set", _wrap_GaussianFluxControl_shiftmax_set, METH_VARARGS, (char *)"GaussianFluxControl_shiftmax_set(GaussianFluxControl self, double shiftmax)"},
	 { (char *)"GaussianFluxControl_shiftmax_get", _wrap_GaussianFluxControl_shiftmax_get, METH_VARARGS, (char *)"GaussianFluxControl_shiftmax_get(GaussianFluxControl self) -> double"},
	 { (char *)"GaussianFluxControl__doc_centroid", _wrap_GaussianFluxControl__doc_centroid, METH_VARARGS, (char *)"GaussianFluxControl__doc_centroid() -> char"},
	 { (char *)"GaussianFluxControl__type_centroid", _wrap_GaussianFluxControl__type_centroid, METH_VARARGS, (char *)"GaussianFluxControl__type_centroid() -> char"},
	 { (char *)"GaussianFluxControl_centroid_set", _wrap_GaussianFluxControl_centroid_set, METH_VARARGS, (char *)"GaussianFluxControl_centroid_set(GaussianFluxControl self, string centroid)"},
	 { (char *)"GaussianFluxControl_centroid_get", _wrap_GaussianFluxControl_centroid_get, METH_VARARGS, (char *)"GaussianFluxControl_centroid_get(GaussianFluxControl self) -> string"},
	 { (char *)"GaussianFluxControl__doc_shape", _wrap_GaussianFluxControl__doc_shape, METH_VARARGS, (char *)"GaussianFluxControl__doc_shape() -> char"},
	 { (char *)"GaussianFluxControl__type_shape", _wrap_GaussianFluxControl__type_shape, METH_VARARGS, (char *)"GaussianFluxControl__type_shape() -> char"},
	 { (char *)"GaussianFluxControl_shape_set", _wrap_GaussianFluxControl_shape_set, METH_VARARGS, (char *)"GaussianFluxControl_shape_set(GaussianFluxControl self, string shape)"},
	 { (char *)"GaussianFluxControl_shape_get", _wrap_GaussianFluxControl_shape_get, METH_VARARGS, (char *)"GaussianFluxControl_shape_get(GaussianFluxControl self) -> string"},
	 { (char *)"GaussianFluxControl__doc_maxIter", _wrap_GaussianFluxControl__doc_maxIter, METH_VARARGS, (char *)"GaussianFluxControl__doc_maxIter() -> char"},
	 { (char *)"GaussianFluxControl__type_maxIter", _wrap_GaussianFluxControl__type_maxIter, METH_VARARGS, (char *)"GaussianFluxControl__type_maxIter() -> char"},
	 { (char *)"GaussianFluxControl_maxIter_set", _wrap_GaussianFluxControl_maxIter_set, METH_VARARGS, (char *)"GaussianFluxControl_maxIter_set(GaussianFluxControl self, int maxIter)"},
	 { (char *)"GaussianFluxControl_maxIter_get", _wrap_GaussianFluxControl_maxIter_get, METH_VARARGS, (char *)"GaussianFluxControl_maxIter_get(GaussianFluxControl self) -> int"},
	 { (char *)"GaussianFluxControl__doc_tol1", _wrap_GaussianFluxControl__doc_tol1, METH_VARARGS, (char *)"GaussianFluxControl__doc_tol1() -> char"},
	 { (char *)"GaussianFluxControl__type_tol1", _wrap_GaussianFluxControl__type_tol1, METH_VARARGS, (char *)"GaussianFluxControl__type_tol1() -> char"},
	 { (char *)"GaussianFluxControl_tol1_set", _wrap_GaussianFluxControl_tol1_set, METH_VARARGS, (char *)"GaussianFluxControl_tol1_set(GaussianFluxControl self, float tol1)"},
	 { (char *)"GaussianFluxControl_tol1_get", _wrap_GaussianFluxControl_tol1_get, METH_VARARGS, (char *)"GaussianFluxControl_tol1_get(GaussianFluxControl self) -> float"},
	 { (char *)"GaussianFluxControl__doc_tol2", _wrap_GaussianFluxControl__doc_tol2, METH_VARARGS, (char *)"GaussianFluxControl__doc_tol2() -> char"},
	 { (char *)"GaussianFluxControl__type_tol2", _wrap_GaussianFluxControl__type_tol2, METH_VARARGS, (char *)"GaussianFluxControl__type_tol2() -> char"},
	 { (char *)"GaussianFluxControl_tol2_set", _wrap_GaussianFluxControl_tol2_set, METH_VARARGS, (char *)"GaussianFluxControl_tol2_set(GaussianFluxControl self, float tol2)"},
	 { (char *)"GaussianFluxControl_tol2_get", _wrap_GaussianFluxControl_tol2_get, METH_VARARGS, (char *)"GaussianFluxControl_tol2_get(GaussianFluxControl self) -> float"},
	 { (char *)"new_GaussianFluxControl", _wrap_new_GaussianFluxControl, METH_VARARGS, (char *)"new_GaussianFluxControl() -> GaussianFluxControl"},
	 { (char *)"delete_GaussianFluxControl", _wrap_delete_GaussianFluxControl, METH_VARARGS, (char *)"delete_GaussianFluxControl(GaussianFluxControl self)"},
	 { (char *)"GaussianFluxControl_swigregister", GaussianFluxControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"CorrectFluxesControl__doc_doApCorr", _wrap_CorrectFluxesControl__doc_doApCorr, METH_VARARGS, (char *)"CorrectFluxesControl__doc_doApCorr() -> char"},
	 { (char *)"CorrectFluxesControl__type_doApCorr", _wrap_CorrectFluxesControl__type_doApCorr, METH_VARARGS, (char *)"CorrectFluxesControl__type_doApCorr() -> char"},
	 { (char *)"CorrectFluxesControl_doApCorr_set", _wrap_CorrectFluxesControl_doApCorr_set, METH_VARARGS, (char *)"CorrectFluxesControl_doApCorr_set(CorrectFluxesControl self, bool doApCorr)"},
	 { (char *)"CorrectFluxesControl_doApCorr_get", _wrap_CorrectFluxesControl_doApCorr_get, METH_VARARGS, (char *)"CorrectFluxesControl_doApCorr_get(CorrectFluxesControl self) -> bool"},
	 { (char *)"CorrectFluxesControl__doc_doFlagApCorrFailures", _wrap_CorrectFluxesControl__doc_doFlagApCorrFailures, METH_VARARGS, (char *)"CorrectFluxesControl__doc_doFlagApCorrFailures() -> char"},
	 { (char *)"CorrectFluxesControl__type_doFlagApCorrFailures", _wrap_CorrectFluxesControl__type_doFlagApCorrFailures, METH_VARARGS, (char *)"CorrectFluxesControl__type_doFlagApCorrFailures() -> char"},
	 { (char *)"CorrectFluxesControl_doFlagApCorrFailures_set", _wrap_CorrectFluxesControl_doFlagApCorrFailures_set, METH_VARARGS, (char *)"CorrectFluxesControl_doFlagApCorrFailures_set(CorrectFluxesControl self, bool doFlagApCorrFailures)"},
	 { (char *)"CorrectFluxesControl_doFlagApCorrFailures_get", _wrap_CorrectFluxesControl_doFlagApCorrFailures_get, METH_VARARGS, (char *)"CorrectFluxesControl_doFlagApCorrFailures_get(CorrectFluxesControl self) -> bool"},
	 { (char *)"CorrectFluxesControl__doc_doTieScaledFluxes", _wrap_CorrectFluxesControl__doc_doTieScaledFluxes, METH_VARARGS, (char *)"CorrectFluxesControl__doc_doTieScaledFluxes() -> char"},
	 { (char *)"CorrectFluxesControl__type_doTieScaledFluxes", _wrap_CorrectFluxesControl__type_doTieScaledFluxes, METH_VARARGS, (char *)"CorrectFluxesControl__type_doTieScaledFluxes() -> char"},
	 { (char *)"CorrectFluxesControl_doTieScaledFluxes_set", _wrap_CorrectFluxesControl_doTieScaledFluxes_set, METH_VARARGS, (char *)"CorrectFluxesControl_doTieScaledFluxes_set(CorrectFluxesControl self, bool doTieScaledFluxes)"},
	 { (char *)"CorrectFluxesControl_doTieScaledFluxes_get", _wrap_CorrectFluxesControl_doTieScaledFluxes_get, METH_VARARGS, (char *)"CorrectFluxesControl_doTieScaledFluxes_get(CorrectFluxesControl self) -> bool"},
	 { (char *)"CorrectFluxesControl__doc_doFlagTieFailures", _wrap_CorrectFluxesControl__doc_doFlagTieFailures, METH_VARARGS, (char *)"CorrectFluxesControl__doc_doFlagTieFailures() -> char"},
	 { (char *)"CorrectFluxesControl__type_doFlagTieFailures", _wrap_CorrectFluxesControl__type_doFlagTieFailures, METH_VARARGS, (char *)"CorrectFluxesControl__type_doFlagTieFailures() -> char"},
	 { (char *)"CorrectFluxesControl_doFlagTieFailures_set", _wrap_CorrectFluxesControl_doFlagTieFailures_set, METH_VARARGS, (char *)"CorrectFluxesControl_doFlagTieFailures_set(CorrectFluxesControl self, bool doFlagTieFailures)"},
	 { (char *)"CorrectFluxesControl_doFlagTieFailures_get", _wrap_CorrectFluxesControl_doFlagTieFailures_get, METH_VARARGS, (char *)"CorrectFluxesControl_doFlagTieFailures_get(CorrectFluxesControl self) -> bool"},
	 { (char *)"CorrectFluxesControl__doc_apCorrRadius", _wrap_CorrectFluxesControl__doc_apCorrRadius, METH_VARARGS, (char *)"CorrectFluxesControl__doc_apCorrRadius() -> char"},
	 { (char *)"CorrectFluxesControl__type_apCorrRadius", _wrap_CorrectFluxesControl__type_apCorrRadius, METH_VARARGS, (char *)"CorrectFluxesControl__type_apCorrRadius() -> char"},
	 { (char *)"CorrectFluxesControl_apCorrRadius_set", _wrap_CorrectFluxesControl_apCorrRadius_set, METH_VARARGS, (char *)"CorrectFluxesControl_apCorrRadius_set(CorrectFluxesControl self, double apCorrRadius)"},
	 { (char *)"CorrectFluxesControl_apCorrRadius_get", _wrap_CorrectFluxesControl_apCorrRadius_get, METH_VARARGS, (char *)"CorrectFluxesControl_apCorrRadius_get(CorrectFluxesControl self) -> double"},
	 { (char *)"CorrectFluxesControl__doc_canonicalFluxName", _wrap_CorrectFluxesControl__doc_canonicalFluxName, METH_VARARGS, (char *)"CorrectFluxesControl__doc_canonicalFluxName() -> char"},
	 { (char *)"CorrectFluxesControl__type_canonicalFluxName", _wrap_CorrectFluxesControl__type_canonicalFluxName, METH_VARARGS, (char *)"CorrectFluxesControl__type_canonicalFluxName() -> char"},
	 { (char *)"CorrectFluxesControl_canonicalFluxName_set", _wrap_CorrectFluxesControl_canonicalFluxName_set, METH_VARARGS, (char *)"CorrectFluxesControl_canonicalFluxName_set(CorrectFluxesControl self, string canonicalFluxName)"},
	 { (char *)"CorrectFluxesControl_canonicalFluxName_get", _wrap_CorrectFluxesControl_canonicalFluxName_get, METH_VARARGS, (char *)"CorrectFluxesControl_canonicalFluxName_get(CorrectFluxesControl self) -> string"},
	 { (char *)"CorrectFluxesControl__doc_canonicalFluxIndex", _wrap_CorrectFluxesControl__doc_canonicalFluxIndex, METH_VARARGS, (char *)"CorrectFluxesControl__doc_canonicalFluxIndex() -> char"},
	 { (char *)"CorrectFluxesControl__type_canonicalFluxIndex", _wrap_CorrectFluxesControl__type_canonicalFluxIndex, METH_VARARGS, (char *)"CorrectFluxesControl__type_canonicalFluxIndex() -> char"},
	 { (char *)"CorrectFluxesControl_canonicalFluxIndex_set", _wrap_CorrectFluxesControl_canonicalFluxIndex_set, METH_VARARGS, (char *)"CorrectFluxesControl_canonicalFluxIndex_set(CorrectFluxesControl self, int canonicalFluxIndex)"},
	 { (char *)"CorrectFluxesControl_canonicalFluxIndex_get", _wrap_CorrectFluxesControl_canonicalFluxIndex_get, METH_VARARGS, (char *)"CorrectFluxesControl_canonicalFluxIndex_get(CorrectFluxesControl self) -> int"},
	 { (char *)"new_CorrectFluxesControl", _wrap_new_CorrectFluxesControl, METH_VARARGS, (char *)"new_CorrectFluxesControl() -> CorrectFluxesControl"},
	 { (char *)"CorrectFluxesControl_clone", _wrap_CorrectFluxesControl_clone, METH_VARARGS, (char *)"CorrectFluxesControl_clone(CorrectFluxesControl self) -> __dummy_529__"},
	 { (char *)"delete_CorrectFluxesControl", _wrap_delete_CorrectFluxesControl, METH_VARARGS, (char *)"delete_CorrectFluxesControl(CorrectFluxesControl self)"},
	 { (char *)"CorrectFluxesControl_swigregister", CorrectFluxesControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"MeasureSources_getAlgorithms", _wrap_MeasureSources_getAlgorithms, METH_VARARGS, (char *)"MeasureSources_getAlgorithms(MeasureSources self) -> AlgorithmList"},
	 { (char *)"MeasureSources_apply", _wrap_MeasureSources_apply, METH_VARARGS, (char *)"\n"
		"apply(SourceRecord source, ExposureF exposure, Point2D center, \n"
		"    bool refineCenter = True)\n"
		"apply(SourceRecord source, ExposureF exposure, Point2D center)\n"
		"apply(SourceRecord source, ExposureF exposure)\n"
		"apply(SourceRecord source, ExposureF exposure, SourceRecord reference, \n"
		"    __dummy_164__ referenceWcs = boost::shared_ptr< lsst::afw::image::Wcs const >())\n"
		"apply(SourceRecord source, ExposureF exposure, SourceRecord reference)\n"
		"apply(SourceRecord source, ExposureD exposure, Point2D center, \n"
		"    bool refineCenter = True)\n"
		"apply(SourceRecord source, ExposureD exposure, Point2D center)\n"
		"apply(SourceRecord source, ExposureD exposure)\n"
		"apply(SourceRecord source, ExposureD exposure, SourceRecord reference, \n"
		"    __dummy_164__ referenceWcs = boost::shared_ptr< lsst::afw::image::Wcs const >())\n"
		"MeasureSources_apply(MeasureSources self, SourceRecord source, ExposureD exposure, \n"
		"    SourceRecord reference)\n"
		""},
	 { (char *)"MeasureSources_applyWithCoord", _wrap_MeasureSources_applyWithCoord, METH_VARARGS, (char *)"\n"
		"applyWithCoord(SourceRecord source, ExposureF exposure)\n"
		"MeasureSources_applyWithCoord(MeasureSources self, SourceRecord source, ExposureD exposure)\n"
		""},
	 { (char *)"MeasureSources_applyWithPixel", _wrap_MeasureSources_applyWithPixel, METH_VARARGS, (char *)"\n"
		"applyWithPixel(SourceRecord source, ExposureF exposure)\n"
		"MeasureSources_applyWithPixel(MeasureSources self, SourceRecord source, ExposureD exposure)\n"
		""},
	 { (char *)"delete_MeasureSources", _wrap_delete_MeasureSources, METH_VARARGS, (char *)"delete_MeasureSources(MeasureSources self)"},
	 { (char *)"MeasureSources_swigregister", MeasureSources_swigregister, METH_VARARGS, NULL},
	 { (char *)"MeasureSourcesBuilder_addAlgorithm", _wrap_MeasureSourcesBuilder_addAlgorithm, METH_VARARGS, (char *)"MeasureSourcesBuilder_addAlgorithm(MeasureSourcesBuilder self, AlgorithmControl algorithmControl) -> MeasureSourcesBuilder"},
	 { (char *)"MeasureSourcesBuilder_setCentroider", _wrap_MeasureSourcesBuilder_setCentroider, METH_VARARGS, (char *)"MeasureSourcesBuilder_setCentroider(MeasureSourcesBuilder self, CentroidControl centroidControl) -> MeasureSourcesBuilder"},
	 { (char *)"MeasureSourcesBuilder_build", _wrap_MeasureSourcesBuilder_build, METH_VARARGS, (char *)"\n"
		"build(Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> MeasureSources\n"
		"MeasureSourcesBuilder_build(MeasureSourcesBuilder self, Schema schema) -> MeasureSources\n"
		""},
	 { (char *)"new_MeasureSourcesBuilder", _wrap_new_MeasureSourcesBuilder, METH_VARARGS, (char *)"\n"
		"MeasureSourcesBuilder(string prefix = \"\")\n"
		"new_MeasureSourcesBuilder() -> MeasureSourcesBuilder\n"
		""},
	 { (char *)"delete_MeasureSourcesBuilder", _wrap_delete_MeasureSourcesBuilder, METH_VARARGS, (char *)"delete_MeasureSourcesBuilder(MeasureSourcesBuilder self)"},
	 { (char *)"MeasureSourcesBuilder_swigregister", MeasureSourcesBuilder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Defect", _wrap_new_Defect, METH_VARARGS, (char *)"\n"
		"Defect(BoxI bbox = lsst::afw::geom::BoxI())\n"
		"new_Defect() -> Defect\n"
		""},
	 { (char *)"delete_Defect", _wrap_delete_Defect, METH_VARARGS, (char *)"delete_Defect(Defect self)"},
	 { (char *)"Defect_classify", _wrap_Defect_classify, METH_VARARGS, (char *)"Defect_classify(Defect self, DefectPosition pos, unsigned int type)"},
	 { (char *)"Defect_getType", _wrap_Defect_getType, METH_VARARGS, (char *)"Defect_getType(Defect self) -> unsigned int"},
	 { (char *)"Defect_getPos", _wrap_Defect_getPos, METH_VARARGS, (char *)"Defect_getPos(Defect self) -> DefectPosition"},
	 { (char *)"Defect_swigregister", Defect_swigregister, METH_VARARGS, NULL},
	 { (char *)"findCosmicRays", _wrap_findCosmicRays, METH_VARARGS, (char *)"\n"
		"findCosmicRays(MaskedImageF image, Psf psf, double bkgd, Policy policy, \n"
		"    bool keep = False) -> FootprintList\n"
		"findCosmicRays(MaskedImageF image, Psf psf, double bkgd, Policy policy) -> FootprintList\n"
		""},
	 { (char *)"interpolateOverDefects", _wrap_interpolateOverDefects, METH_VARARGS, (char *)"\n"
		"interpolateOverDefects(MaskedImageF image, Psf psf, DefectListT badList, double fallbackValue = std::numeric_limits< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel >::Image::Pixel >::max())\n"
		"interpolateOverDefects(MaskedImageF image, Psf psf, DefectListT badList)\n"
		""},
	 { (char *)"DefectListT_iterator", _wrap_DefectListT_iterator, METH_VARARGS, (char *)"DefectListT_iterator(DefectListT self) -> SwigPyIterator"},
	 { (char *)"DefectListT___nonzero__", _wrap_DefectListT___nonzero__, METH_VARARGS, (char *)"DefectListT___nonzero__(DefectListT self) -> bool"},
	 { (char *)"DefectListT___bool__", _wrap_DefectListT___bool__, METH_VARARGS, (char *)"DefectListT___bool__(DefectListT self) -> bool"},
	 { (char *)"DefectListT___len__", _wrap_DefectListT___len__, METH_VARARGS, (char *)"DefectListT___len__(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type"},
	 { (char *)"DefectListT_pop", _wrap_DefectListT_pop, METH_VARARGS, (char *)"DefectListT_pop(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type"},
	 { (char *)"DefectListT___getslice__", _wrap_DefectListT___getslice__, METH_VARARGS, (char *)"\n"
		"DefectListT___getslice__(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j) -> DefectListT\n"
		""},
	 { (char *)"DefectListT___setslice__", _wrap_DefectListT___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j, \n"
		"    DefectListT v = std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >())\n"
		"DefectListT___setslice__(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j)\n"
		""},
	 { (char *)"DefectListT___delslice__", _wrap_DefectListT___delslice__, METH_VARARGS, (char *)"\n"
		"DefectListT___delslice__(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j)\n"
		""},
	 { (char *)"DefectListT___delitem__", _wrap_DefectListT___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i)\n"
		"DefectListT___delitem__(DefectListT self, PySliceObject slice)\n"
		""},
	 { (char *)"DefectListT___getitem__", _wrap_DefectListT___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> DefectListT\n"
		"DefectListT___getitem__(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type\n"
		""},
	 { (char *)"DefectListT___setitem__", _wrap_DefectListT___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, DefectListT v)\n"
		"__setitem__(PySliceObject slice)\n"
		"DefectListT___setitem__(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)\n"
		""},
	 { (char *)"DefectListT_append", _wrap_DefectListT_append, METH_VARARGS, (char *)"DefectListT_append(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)"},
	 { (char *)"DefectListT_empty", _wrap_DefectListT_empty, METH_VARARGS, (char *)"DefectListT_empty(DefectListT self) -> bool"},
	 { (char *)"DefectListT_size", _wrap_DefectListT_size, METH_VARARGS, (char *)"DefectListT_size(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type"},
	 { (char *)"DefectListT_clear", _wrap_DefectListT_clear, METH_VARARGS, (char *)"DefectListT_clear(DefectListT self)"},
	 { (char *)"DefectListT_swap", _wrap_DefectListT_swap, METH_VARARGS, (char *)"DefectListT_swap(DefectListT self, DefectListT v)"},
	 { (char *)"DefectListT_get_allocator", _wrap_DefectListT_get_allocator, METH_VARARGS, (char *)"DefectListT_get_allocator(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::allocator_type"},
	 { (char *)"DefectListT_begin", _wrap_DefectListT_begin, METH_VARARGS, (char *)"DefectListT_begin(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator"},
	 { (char *)"DefectListT_end", _wrap_DefectListT_end, METH_VARARGS, (char *)"DefectListT_end(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator"},
	 { (char *)"DefectListT_rbegin", _wrap_DefectListT_rbegin, METH_VARARGS, (char *)"DefectListT_rbegin(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::reverse_iterator"},
	 { (char *)"DefectListT_rend", _wrap_DefectListT_rend, METH_VARARGS, (char *)"DefectListT_rend(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::reverse_iterator"},
	 { (char *)"DefectListT_pop_back", _wrap_DefectListT_pop_back, METH_VARARGS, (char *)"DefectListT_pop_back(DefectListT self)"},
	 { (char *)"DefectListT_erase", _wrap_DefectListT_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator pos) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator\n"
		"DefectListT_erase(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator first, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator last) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator\n"
		""},
	 { (char *)"new_DefectListT", _wrap_new_DefectListT, METH_VARARGS, (char *)"\n"
		"DefectListT()\n"
		"DefectListT(DefectListT arg0)\n"
		"DefectListT(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type size)\n"
		"new_DefectListT(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type size, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type value) -> DefectListT\n"
		""},
	 { (char *)"DefectListT_push_back", _wrap_DefectListT_push_back, METH_VARARGS, (char *)"DefectListT_push_back(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)"},
	 { (char *)"DefectListT_front", _wrap_DefectListT_front, METH_VARARGS, (char *)"DefectListT_front(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type"},
	 { (char *)"DefectListT_back", _wrap_DefectListT_back, METH_VARARGS, (char *)"DefectListT_back(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type"},
	 { (char *)"DefectListT_assign", _wrap_DefectListT_assign, METH_VARARGS, (char *)"\n"
		"DefectListT_assign(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type n, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)\n"
		""},
	 { (char *)"DefectListT_resize", _wrap_DefectListT_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type new_size)\n"
		"DefectListT_resize(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type new_size, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)\n"
		""},
	 { (char *)"DefectListT_insert", _wrap_DefectListT_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator pos, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator\n"
		"DefectListT_insert(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator pos, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type n, \n"
		"    std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)\n"
		""},
	 { (char *)"DefectListT_reserve", _wrap_DefectListT_reserve, METH_VARARGS, (char *)"DefectListT_reserve(DefectListT self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type n)"},
	 { (char *)"DefectListT_capacity", _wrap_DefectListT_capacity, METH_VARARGS, (char *)"DefectListT_capacity(DefectListT self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type"},
	 { (char *)"delete_DefectListT", _wrap_delete_DefectListT, METH_VARARGS, (char *)"delete_DefectListT(DefectListT self)"},
	 { (char *)"DefectListT_swigregister", DefectListT_swigregister, METH_VARARGS, NULL},
	 { (char *)"SincCoeffsF_cache", _wrap_SincCoeffsF_cache, METH_VARARGS, (char *)"SincCoeffsF_cache(float r1, float r2)"},
	 { (char *)"SincCoeffsF_get", _wrap_SincCoeffsF_get, METH_VARARGS, (char *)"\n"
		"get(Axes axes, float innerFactor = 0.0) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>\n"
		"SincCoeffsF_get(Axes axes) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>\n"
		""},
	 { (char *)"SincCoeffsF_calculate", _wrap_SincCoeffsF_calculate, METH_VARARGS, (char *)"\n"
		"calculate(Axes axes, double innerFactor = 0.0) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>\n"
		"SincCoeffsF_calculate(Axes axes) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>\n"
		""},
	 { (char *)"delete_SincCoeffsF", _wrap_delete_SincCoeffsF, METH_VARARGS, (char *)"delete_SincCoeffsF(SincCoeffsF self)"},
	 { (char *)"SincCoeffsF_swigregister", SincCoeffsF_swigregister, METH_VARARGS, NULL},
	 { (char *)"SincCoeffsD_cache", _wrap_SincCoeffsD_cache, METH_VARARGS, (char *)"SincCoeffsD_cache(float r1, float r2)"},
	 { (char *)"SincCoeffsD_get", _wrap_SincCoeffsD_get, METH_VARARGS, (char *)"\n"
		"get(Axes axes, float innerFactor = 0.0) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>\n"
		"SincCoeffsD_get(Axes axes) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>\n"
		""},
	 { (char *)"SincCoeffsD_calculate", _wrap_SincCoeffsD_calculate, METH_VARARGS, (char *)"\n"
		"calculate(Axes axes, double innerFactor = 0.0) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>\n"
		"SincCoeffsD_calculate(Axes axes) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>\n"
		""},
	 { (char *)"delete_SincCoeffsD", _wrap_delete_SincCoeffsD, METH_VARARGS, (char *)"delete_SincCoeffsD(SincCoeffsD self)"},
	 { (char *)"SincCoeffsD_swigregister", SincCoeffsD_swigregister, METH_VARARGS, NULL},
	 { (char *)"calculateSincApertureFlux", _wrap_calculateSincApertureFlux, METH_VARARGS, (char *)"\n"
		"calculateSincApertureFlux(MaskedImageF mimage, Ellipse ellipse, double innerFactor = 0.0) -> pairDoubleDouble\n"
		"calculateSincApertureFlux(MaskedImageF mimage, Ellipse ellipse) -> pairDoubleDouble\n"
		""},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_tTo_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::persistence::DbStorage >(*(boost::shared_ptr< lsst::daf::persistence::DbTsvStorage > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::coord::Coord >(*(boost::shared_ptr< lsst::afw::coord::GalacticCoord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::coord::Coord >(*(boost::shared_ptr< lsst::afw::coord::EclipticCoord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::coord::Coord >(*(boost::shared_ptr< lsst::afw::coord::TopocentricCoord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::coord::Coord >(*(boost::shared_ptr< lsst::afw::coord::IcrsCoord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::coord::Coord >(*(boost::shared_ptr< lsst::afw::coord::Fk5Coord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__SourceTable_tTo_p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::SimpleTable >(*(boost::shared_ptr< lsst::afw::table::SourceTable > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Distortion >(*(boost::shared_ptr< lsst::afw::cameraGeom::NullDistortion > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Distortion >(*(boost::shared_ptr< lsst::afw::cameraGeom::RadialPolyDistortion > *)x);
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__afw__detection__PsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *)  ((lsst::afw::detection::Psf *) x));
}
static void *_p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *) ((lsst::meas::algorithms::ImagePsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > *) (lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > *) (lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > *)  ((lsst::afw::math::AnalyticKernel *) x));
}
static void *_p_lsst__afw__math__KernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *)  ((lsst::afw::math::Kernel *) x));
}
static void *_p_lsst__afw__math__FixedKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *) ((lsst::afw::math::FixedKernel *) x));
}
static void *_p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *) ((lsst::afw::math::DeltaFunctionKernel *) x));
}
static void *_p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *) ((lsst::afw::math::LinearCombinationKernel *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *) ((lsst::afw::math::AnalyticKernel *) x));
}
static void *_p_lsst__afw__math__SeparableKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *) ((lsst::afw::math::SeparableKernel *) x));
}
static void *_p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::LanczosWarpingKernel *) x));
}
static void *_p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::BilinearWarpingKernel *) x));
}
static void *_p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::NearestWarpingKernel *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::BaseRecord >(*(boost::shared_ptr< lsst::afw::table::SimpleRecord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::BaseRecord >(*(boost::shared_ptr< lsst::afw::table::SourceRecord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::BaseRecord >(*(boost::shared_ptr< lsst::afw::table::ExposureRecord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Covariogram< double > >(*(boost::shared_ptr< lsst::afw::math::NeuralNetCovariogram< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Covariogram< double > >(*(boost::shared_ptr< lsst::afw::math::SquaredExpCovariogram< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_tTo_p_boost__shared_ptrT_lsst__afw__image__DefectBase_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::DefectBase >(*(boost::shared_ptr< lsst::meas::algorithms::Defect > *)x);
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *) (lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *)  ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *) (lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *) (lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) (lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) (lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *)  ((lsst::meas::algorithms::ImagePsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) (lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) (lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) (lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *) (lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *)  ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *)  ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *)  ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__afw__math__BackgroundTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::math::Background *) x));
}
static void *_p_lsst__afw__detection__PsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::detection::Psf *) x));
}
static void *_p_lsst__daf__base__PropertySetTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::daf::base::PropertySet *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction1T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::PolynomialFunction1< double > *) x));
}
static void *_p_lsst__afw__math__NullFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::NullFunction2< double > *) x));
}
static void *_p_lsst__afw__math__NullFunction1T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::NullFunction1< double > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::LanczosFunction2< double > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction1T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::LanczosFunction1< double > *) x));
}
static void *_p_lsst__afw__math__IntegerDeltaFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::IntegerDeltaFunction2< double > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::GaussianFunction2< double > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction1T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::GaussianFunction1< double > *) x));
}
static void *_p_lsst__afw__math__DoubleGaussianFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::DoubleGaussianFunction2< double > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *)(lsst::afw::math::BasePolynomialFunction2< double > *) ((lsst::afw::math::Chebyshev1Function2< double > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function1T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::Chebyshev1Function1< double > *) x));
}
static void *_p_lsst__afw__math__BasePolynomialFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::BasePolynomialFunction2< double > *) x));
}
static void *_p_lsst__afw__math__Function2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *) ((lsst::afw::math::Function2< double > *) x));
}
static void *_p_lsst__afw__math__Function1T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *) ((lsst::afw::math::Function1< double > *) x));
}
static void *_p_lsst__afw__math__FunctionT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::math::Function< double > *) x));
}
static void *_p_lsst__afw__image__ImageSliceT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< double > *)(lsst::afw::image::Image< double > *) ((lsst::afw::image::ImageSlice< double > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::DecoratedImage< double > *) x));
}
static void *_p_lsst__afw__image__ImageT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< double > *) ((lsst::afw::image::Image< double > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::ImageBase< double > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction2T_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *)(lsst::afw::math::BasePolynomialFunction2< double > *) ((lsst::afw::math::PolynomialFunction2< double > *) x));
}
static void *_p_lsst__afw__math__CovariogramT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::math::Covariogram< double > *) x));
}
static void *_p_lsst__afw__math__SquaredExpCovariogramT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Covariogram< double > *) ((lsst::afw::math::SquaredExpCovariogram< double > *) x));
}
static void *_p_lsst__afw__math__NeuralNetCovariogramT_double_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Covariogram< double > *) ((lsst::afw::math::NeuralNetCovariogram< double > *) x));
}
static void *_p_lsst__daf__base__PropertyListTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::daf::base::PropertySet *) ((lsst::daf::base::PropertyList *) x));
}
static void *_p_lsst__afw__image__ExposureT_double_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::Exposure< double,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::MaskedImage< int,unsigned short,float > *) x));
}
static void *_p_lsst__afw__cameraGeom__CameraTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::cameraGeom::Detector *)(lsst::afw::cameraGeom::DetectorMosaic *) ((lsst::afw::cameraGeom::Camera *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_int_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::ImageBase< int > *) x));
}
static void *_p_lsst__afw__image__ImageT_int_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< int > *) ((lsst::afw::image::Image< int > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_int_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::DecoratedImage< int > *) x));
}
static void *_p_lsst__afw__cameraGeom__DetectorTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::cameraGeom::Detector *) x));
}
static void *_p_lsst__afw__image__XYTransformFromWcsPairTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::geom::XYTransform *) ((lsst::afw::image::XYTransformFromWcsPair *) x));
}
static void *_p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Footprint *) ((lsst::afw::detection::HeavyFootprint< float,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::MaskedImage< unsigned short,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__ImageSliceT_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< float > *)(lsst::afw::image::Image< float > *) ((lsst::afw::image::ImageSlice< float > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::ImageBase< float > *) x));
}
static void *_p_lsst__afw__image__ImageT_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< float > *) ((lsst::afw::image::Image< float > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::DecoratedImage< float > *) x));
}
static void *_p_lsst__afw__math__FunctionT_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::math::Function< float > *) x));
}
static void *_p_lsst__afw__math__Function1T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *) ((lsst::afw::math::Function1< float > *) x));
}
static void *_p_lsst__afw__math__Function2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *) ((lsst::afw::math::Function2< float > *) x));
}
static void *_p_lsst__afw__math__BasePolynomialFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::BasePolynomialFunction2< float > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function1T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::Chebyshev1Function1< float > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *)(lsst::afw::math::BasePolynomialFunction2< float > *) ((lsst::afw::math::Chebyshev1Function2< float > *) x));
}
static void *_p_lsst__afw__math__DoubleGaussianFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::DoubleGaussianFunction2< float > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction1T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::GaussianFunction1< float > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::GaussianFunction2< float > *) x));
}
static void *_p_lsst__afw__math__IntegerDeltaFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::IntegerDeltaFunction2< float > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction1T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::LanczosFunction1< float > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::LanczosFunction2< float > *) x));
}
static void *_p_lsst__afw__math__NullFunction1T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::NullFunction1< float > *) x));
}
static void *_p_lsst__afw__math__NullFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::NullFunction2< float > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction1T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::PolynomialFunction1< float > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction2T_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *)(lsst::afw::math::BasePolynomialFunction2< float > *) ((lsst::afw::math::PolynomialFunction2< float > *) x));
}
static void *_p_lsst__afw__math__KernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::math::Kernel *) x));
}
static void *_p_lsst__afw__math__FixedKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *) ((lsst::afw::math::FixedKernel *) x));
}
static void *_p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *) ((lsst::afw::math::DeltaFunctionKernel *) x));
}
static void *_p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *) ((lsst::afw::math::LinearCombinationKernel *) x));
}
static void *_p_lsst__afw__detection__FootprintTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::detection::Footprint *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_lsst__afw__image__MaskT_unsigned_short_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< uint16_t > *) ((lsst::afw::image::Mask< unsigned short > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_unsigned_short_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::ImageBase< unsigned short > *) x));
}
static void *_p_lsst__afw__image__ImageT_unsigned_short_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< uint16_t > *) ((lsst::afw::image::Image< unsigned short > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_unsigned_short_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::DecoratedImage< unsigned short > *) x));
}
static void *_p_lsst__afw__detection__FootprintSetTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::detection::FootprintSet *) x));
}
static void *_p_lsst__afw__math__BackgroundMITo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Background *) ((lsst::afw::math::BackgroundMI *) x));
}
static void *_p_lsst__afw__cameraGeom__CcdTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::cameraGeom::Detector *) ((lsst::afw::cameraGeom::Ccd *) x));
}
static void *_p_lsst__daf__persistence__StorageTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::daf::persistence::Storage *) x));
}
static void *_p_lsst__daf__persistence__DbStorageTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::daf::persistence::Storage *) ((lsst::daf::persistence::DbStorage *) x));
}
static void *_p_lsst__daf__persistence__DbTsvStorageTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::daf::persistence::Storage *)(lsst::daf::persistence::DbStorage *) ((lsst::daf::persistence::DbTsvStorage *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_lsst__pex__policy__PolicyTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::pex::policy::Policy *) x));
}
static void *_p_lsst__afw__cameraGeom__DetectorMosaicTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::cameraGeom::Detector *) ((lsst::afw::cameraGeom::DetectorMosaic *) x));
}
static void *_p_lsst__daf__persistence__LogicalLocationTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::daf::persistence::LogicalLocation *) x));
}
static void *_p_lsst__pex__policy__DefinitionTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::pex::policy::Definition *) x));
}
static void *_p_lsst__pex__policy__PolicySourceTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::pex::policy::PolicySource *) x));
}
static void *_p_lsst__pex__policy__DictionaryTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::Policy *) ((lsst::pex::policy::Dictionary *) x));
}
static void *_p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::Exposure< unsigned short,unsigned short,float > *) x));
}
static void *_p_lsst__pex__policy__PolicyStringTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::PolicySource *) ((lsst::pex::policy::PolicyString *) x));
}
static void *_p_lsst__meas__algorithms__ImagePsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *) ((lsst::meas::algorithms::ImagePsf *) x));
}
static void *_p_lsst__pex__policy__PolicyDestinationTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::pex::policy::PolicyDestination *) x));
}
static void *_p_lsst__pex__policy__PolicyStreamDestinationTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::PolicyDestination *) ((lsst::pex::policy::PolicyStreamDestination *) x));
}
static void *_p_lsst__pex__policy__PolicyStringDestinationTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::PolicyDestination *)(lsst::pex::policy::PolicyStreamDestination *) ((lsst::pex::policy::PolicyStringDestination *) x));
}
static void *_p_lsst__afw__cameraGeom__DetectorXYTransformTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::geom::XYTransform *) ((lsst::afw::cameraGeom::DetectorXYTransform *) x));
}
static void *_p_lsst__afw__geom__RadialXYTransformTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::geom::XYTransform *) ((lsst::afw::geom::RadialXYTransform *) x));
}
static void *_p_lsst__afw__geom__InvertedXYTransformTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::geom::XYTransform *) ((lsst::afw::geom::InvertedXYTransform *) x));
}
static void *_p_lsst__afw__geom__IdentityXYTransformTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::geom::XYTransform *) ((lsst::afw::geom::IdentityXYTransform *) x));
}
static void *_p_lsst__afw__geom__XYTransformTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::geom::XYTransform *) x));
}
static void *_p_lsst__afw__image__TanWcsTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::Wcs *) ((lsst::afw::image::TanWcs *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::MaskedImage< double,unsigned short,float > *) x));
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__afw__image__WcsTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::Wcs *) x));
}
static void *_p_lsst__afw__cameraGeom__AmpTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::cameraGeom::Detector *) ((lsst::afw::cameraGeom::Amp *) x));
}
static void *_p_lsst__afw__image__ExposureT_int_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::Exposure< int,unsigned short,float > *) x));
}
static void *_p_lsst__afw__detection__PeakTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::detection::Peak *) x));
}
static void *_p_lsst__pex__policy__UrnPolicyFileTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::PolicySource *)(lsst::pex::policy::PolicyFile *)(lsst::pex::policy::DefaultPolicyFile *) ((lsst::pex::policy::UrnPolicyFile *) x));
}
static void *_p_lsst__pex__policy__DefaultPolicyFileTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::PolicySource *)(lsst::pex::policy::PolicyFile *) ((lsst::pex::policy::DefaultPolicyFile *) x));
}
static void *_p_lsst__pex__policy__PolicyFileTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::pex::policy::PolicySource *) ((lsst::pex::policy::PolicyFile *) x));
}
static void *_p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::Exposure< unsigned long,unsigned short,float > *) x));
}
static void *_p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Footprint *) ((lsst::afw::detection::HeavyFootprint< int,unsigned short,float > *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__afw__math__AnalyticKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *) ((lsst::afw::math::AnalyticKernel *) x));
}
static void *_p_lsst__afw__math__SeparableKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *) ((lsst::afw::math::SeparableKernel *) x));
}
static void *_p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::LanczosWarpingKernel *) x));
}
static void *_p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::BilinearWarpingKernel *) x));
}
static void *_p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::NearestWarpingKernel *) x));
}
static void *_p_lsst__afw__cameraGeom__RaftTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::cameraGeom::Detector *)(lsst::afw::cameraGeom::DetectorMosaic *) ((lsst::afw::cameraGeom::Raft *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_unsigned_long_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::ImageBase< unsigned long > *) x));
}
static void *_p_lsst__afw__image__ImageT_unsigned_long_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *) (lsst::afw::image::ImageBase< uint64_t > *) ((lsst::afw::image::Image< unsigned long > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_unsigned_long_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::DecoratedImage< unsigned long > *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::MaskedImage< float,unsigned short,float > *) x));
}
static void *_p_lsst__daf__persistence__PersistenceTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::daf::persistence::Persistence *) x));
}
static void *_p_lsst__afw__image__ExposureT_float_unsigned_short_float_tTo_p_lsst__daf__base__Citizen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Citizen *)  ((lsst::afw::image::Exposure< float,unsigned short,float > *) x));
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::AnalyticKernel >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::AnalyticKernel >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Psf >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SeparableKernel >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SeparableKernel >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SeparableKernel >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::logging::BriefFormatter >(*(boost::shared_ptr< lsst::pex::logging::IndentedFormatter > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::Image< double > >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::FluxControl >(*(boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::FluxControl >(*(boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::FluxControl >(*(boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::FluxControl >(*(boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::FluxControl >(*(boost::shared_ptr< lsst::meas::algorithms::PsfFluxControl > *)x);
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_lsst__pex__policy__ValidationErrorTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::policy::ValidationError *) x));
}
static void *_p_lsst__pex__exceptions__DomainErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::DomainErrorException *) x));
}
static void *_p_lsst__pex__exceptions__InvalidParameterExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::InvalidParameterException *) x));
}
static void *_p_lsst__pex__exceptions__LengthErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::LengthErrorException *) x));
}
static void *_p_lsst__pex__exceptions__OutOfRangeExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::OutOfRangeException *) x));
}
static void *_p_lsst__daf__base__TypeMismatchExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::daf::base::TypeMismatchException *) x));
}
static void *_p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *) (lsst::pex::exceptions::DomainErrorException *) ((lsst::pex::policy::DictionaryError *) x));
}
static void *_p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *) (lsst::pex::exceptions::DomainErrorException *) ((lsst::pex::policy::TypeError *) x));
}
static void *_p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__DomainErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::DomainErrorException *)  ((lsst::pex::policy::DictionaryError *) x));
}
static void *_p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__DomainErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::DomainErrorException *)  ((lsst::pex::policy::TypeError *) x));
}
static void *_p_lsst__afw__fits__FitsTypeErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::exceptions::IoErrorException *)(lsst::afw::fits::FitsError *) ((lsst::afw::fits::FitsTypeError *) x));
}
static void *_p_lsst__afw__table__io__MalformedArchiveErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::exceptions::IoErrorException *)(lsst::afw::table::io::PersistenceError *) ((lsst::afw::table::io::MalformedArchiveError *) x));
}
static void *_p_lsst__pex__policy__EOFErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *) ((lsst::pex::policy::EOFError *) x));
}
static void *_p_lsst__pex__policy__UnsupportedSyntaxTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *)(lsst::pex::policy::SyntaxError *) ((lsst::pex::policy::UnsupportedSyntax *) x));
}
static void *_p_lsst__pex__policy__BadNameErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::policy::BadNameError *) x));
}
static void *_p_lsst__afw__table__io__PersistenceErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::exceptions::IoErrorException *) ((lsst::afw::table::io::PersistenceError *) x));
}
static void *_p_lsst__pex__exceptions__TimeoutExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::TimeoutException *) x));
}
static void *_p_lsst__pex__exceptions__IoErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::IoErrorException *) x));
}
static void *_p_lsst__pex__exceptions__MemoryExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::MemoryException *) x));
}
static void *_p_lsst__pex__exceptions__UnderflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::UnderflowErrorException *) x));
}
static void *_p_lsst__pex__exceptions__OverflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::OverflowErrorException *) x));
}
static void *_p_lsst__pex__exceptions__RangeErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::RangeErrorException *) x));
}
static void *_p_lsst__pex__policy__FormatSyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *)(lsst::pex::policy::SyntaxError *) ((lsst::pex::policy::FormatSyntaxError *) x));
}
static void *_p_lsst__pex__policy__SyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *) ((lsst::pex::policy::SyntaxError *) x));
}
static void *_p_lsst__afw__fits__FitsErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::exceptions::IoErrorException *) ((lsst::afw::fits::FitsError *) x));
}
static void *_p_lsst__pex__policy__ParserErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::policy::ParserError *) x));
}
static void *_p_lsst__pex__policy__NameNotFoundTo_p_lsst__pex__exceptions__NotFoundException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::NotFoundException *)  ((lsst::pex::policy::NameNotFound *) x));
}
static void *_p_lsst__afw__table__io__PersistenceErrorTo_p_lsst__pex__exceptions__IoErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::IoErrorException *)  ((lsst::afw::table::io::PersistenceError *) x));
}
static void *_p_lsst__afw__fits__FitsErrorTo_p_lsst__pex__exceptions__IoErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::IoErrorException *)  ((lsst::afw::fits::FitsError *) x));
}
static void *_p_lsst__afw__fits__FitsTypeErrorTo_p_lsst__pex__exceptions__IoErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::IoErrorException *) (lsst::afw::fits::FitsError *) ((lsst::afw::fits::FitsTypeError *) x));
}
static void *_p_lsst__afw__table__io__MalformedArchiveErrorTo_p_lsst__pex__exceptions__IoErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::IoErrorException *) (lsst::afw::table::io::PersistenceError *) ((lsst::afw::table::io::MalformedArchiveError *) x));
}
static void *_p_lsst__afw__math__FixedKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *)  ((lsst::afw::math::FixedKernel *) x));
}
static void *_p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *)  ((lsst::afw::math::DeltaFunctionKernel *) x));
}
static void *_p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *)  ((lsst::afw::math::LinearCombinationKernel *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *) (lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *) (lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *)  ((lsst::afw::math::AnalyticKernel *) x));
}
static void *_p_lsst__afw__math__SeparableKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *)  ((lsst::afw::math::SeparableKernel *) x));
}
static void *_p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *) (lsst::afw::math::SeparableKernel *) ((lsst::afw::math::LanczosWarpingKernel *) x));
}
static void *_p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *) (lsst::afw::math::SeparableKernel *) ((lsst::afw::math::BilinearWarpingKernel *) x));
}
static void *_p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__afw__math__Kernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::Kernel *) (lsst::afw::math::SeparableKernel *) ((lsst::afw::math::NearestWarpingKernel *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__math__AnalyticKernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::AnalyticKernel *)  ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__math__AnalyticKernel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::AnalyticKernel *)  ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::logging::LogFormatter >(*(boost::shared_ptr< lsst::pex::logging::BriefFormatter > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::logging::LogFormatter >(*(boost::shared_ptr< lsst::pex::logging::IndentedFormatter > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::logging::LogFormatter >(*(boost::shared_ptr< lsst::pex::logging::NetLoggerFormatter > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::Image< float > >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::LogTraceRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::LogDeterminantRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::TraceRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::DeterminantRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::LogTraceRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::LogDeterminantRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::TraceRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::DeterminantRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogTraceRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogDeterminantRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::TraceRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::DeterminantRadius > > *)x);
}
static void *_p_lsst__meas__algorithms__EllipticalApertureFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::ApertureFluxControl *) ((lsst::meas::algorithms::EllipticalApertureFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__PixelFlagControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::PixelFlagControl *) x));
}
static void *_p_lsst__meas__algorithms__ClassificationControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::ClassificationControl *) x));
}
static void *_p_lsst__meas__algorithms__ShapeControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::ShapeControl *) x));
}
static void *_p_lsst__meas__algorithms__SdssCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::CentroidControl *) ((lsst::meas::algorithms::SdssCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__NaiveCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::CentroidControl *) ((lsst::meas::algorithms::NaiveCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__GaussianCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::CentroidControl *) ((lsst::meas::algorithms::GaussianCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__CentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::CentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__SincFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::FluxControl *) ((lsst::meas::algorithms::SincFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__PsfFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::FluxControl *) ((lsst::meas::algorithms::PsfFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__NaiveFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::FluxControl *) ((lsst::meas::algorithms::NaiveFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__PeakLikelihoodFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::FluxControl *) ((lsst::meas::algorithms::PeakLikelihoodFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__ApertureFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::ApertureFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__FluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::FluxControl *) x));
}
static void *_p_lsst__meas__algorithms__SkyCoordControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::SkyCoordControl *) x));
}
static void *_p_lsst__meas__algorithms__RecordCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::RecordCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__SdssShapeControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::ShapeControl *) ((lsst::meas::algorithms::SdssShapeControl *) x));
}
static void *_p_lsst__meas__algorithms__GaussianFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *) (lsst::meas::algorithms::FluxControl *) ((lsst::meas::algorithms::GaussianFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__CorrectFluxesControlTo_p_lsst__meas__algorithms__AlgorithmControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::AlgorithmControl *)  ((lsst::meas::algorithms::CorrectFluxesControl *) x));
}
static void *_p_lsst__meas__algorithms__EllipticalApertureFluxControlTo_p_lsst__meas__algorithms__ApertureFluxControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ApertureFluxControl *)  ((lsst::meas::algorithms::EllipticalApertureFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__PeakLikelihoodFluxControlTo_p_lsst__meas__algorithms__FluxControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::FluxControl *)  ((lsst::meas::algorithms::PeakLikelihoodFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__NaiveFluxControlTo_p_lsst__meas__algorithms__FluxControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::FluxControl *)  ((lsst::meas::algorithms::NaiveFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__PsfFluxControlTo_p_lsst__meas__algorithms__FluxControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::FluxControl *)  ((lsst::meas::algorithms::PsfFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__SincFluxControlTo_p_lsst__meas__algorithms__FluxControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::FluxControl *)  ((lsst::meas::algorithms::SincFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__GaussianFluxControlTo_p_lsst__meas__algorithms__FluxControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::FluxControl *)  ((lsst::meas::algorithms::GaussianFluxControl *) x));
}
static void *_p_lsst__meas__algorithms__GaussianCentroidControlTo_p_lsst__meas__algorithms__CentroidControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::CentroidControl *)  ((lsst::meas::algorithms::GaussianCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__NaiveCentroidControlTo_p_lsst__meas__algorithms__CentroidControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::CentroidControl *)  ((lsst::meas::algorithms::NaiveCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__SdssCentroidControlTo_p_lsst__meas__algorithms__CentroidControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::CentroidControl *)  ((lsst::meas::algorithms::SdssCentroidControl *) x));
}
static void *_p_lsst__meas__algorithms__SdssShapeControlTo_p_lsst__meas__algorithms__ShapeControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ShapeControl *)  ((lsst::meas::algorithms::SdssShapeControl *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Footprint >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::detection::Footprint >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::XYTransform >(*(boost::shared_ptr< lsst::afw::geom::InvertedXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::XYTransform >(*(boost::shared_ptr< lsst::afw::cameraGeom::DetectorXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::XYTransform >(*(boost::shared_ptr< lsst::afw::geom::IdentityXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::XYTransform >(*(boost::shared_ptr< lsst::afw::geom::RadialXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::geom::XYTransform >(*(boost::shared_ptr< lsst::afw::image::XYTransformFromWcsPair > *)x);
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicyFile >(*(boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicyFile >(*(boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ShapeControl >(*(boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Exposure< double,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__base__PropertySet_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::daf::base::PropertySet > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Image< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageBase< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Exposure< unsigned long,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Exposure< unsigned short,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::detection::Psf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Wcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__base__PropertyList_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::daf::base::PropertyList > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Mask< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageBase< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Image< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::TanWcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__Policy_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::pex::policy::Policy > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::SeparableKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Exposure< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageBase< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageBase< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::pex::policy::PolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Exposure< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::Kernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::FixedKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::pex::policy::PolicyString > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< unsigned short,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< double,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::AnalyticKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::ImageBase< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Image< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::pex::policy::Dictionary > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Image< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::afw::image::Image< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__Calib_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::Calib > >(*(boost::shared_ptr< lsst::afw::image::Calib > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::TanWcs > >(*(boost::shared_ptr< lsst::afw::image::TanWcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::Wcs > >(*(boost::shared_ptr< lsst::afw::image::TanWcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::Wcs > >(*(boost::shared_ptr< lsst::afw::image::Wcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Function< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Function< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::image::CoaddInputs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::detection::Psf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::image::Wcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__Calib_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::image::Calib > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::image::TanWcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::SeparableKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Kernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::FixedKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::AnalyticKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Footprint_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::detection::Footprint > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::Persistable >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::Kernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::FixedKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::SeparableKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > >(*(boost::shared_ptr< lsst::afw::math::AnalyticKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > >(*(boost::shared_ptr< lsst::afw::math::AnalyticKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::DeltaFunctionKernel > >(*(boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::FixedKernel > >(*(boost::shared_ptr< lsst::afw::math::FixedKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::LinearCombinationKernel > >(*(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::SeparableKernel > >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::SeparableKernel > >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::SeparableKernel > >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::SeparableKernel > >(*(boost::shared_ptr< lsst::afw::math::SeparableKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Footprint > >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Footprint > >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Footprint_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Footprint > >(*(boost::shared_ptr< lsst::afw::detection::Footprint > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::afw::detection::Psf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< double > >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< double > >(*(boost::shared_ptr< lsst::afw::image::Image< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< float > >(*(boost::shared_ptr< lsst::afw::image::Image< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< float > >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< int > >(*(boost::shared_ptr< lsst::afw::image::Image< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< unsigned long > >(*(boost::shared_ptr< lsst::afw::image::Image< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< unsigned short > >(*(boost::shared_ptr< lsst::afw::image::Mask< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::ImageBase< unsigned short > >(*(boost::shared_ptr< lsst::afw::image::Image< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_tTo_p_boost__shared_ptrT_lsst__afw__math__Background_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Background >(*(boost::shared_ptr< lsst::afw::math::BackgroundMI > *)x);
}
static void *_p_lsst__afw__coord__GalacticCoordTo_p_lsst__afw__coord__Coord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::coord::Coord *)  ((lsst::afw::coord::GalacticCoord *) x));
}
static void *_p_lsst__afw__coord__EclipticCoordTo_p_lsst__afw__coord__Coord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::coord::Coord *)  ((lsst::afw::coord::EclipticCoord *) x));
}
static void *_p_lsst__afw__coord__TopocentricCoordTo_p_lsst__afw__coord__Coord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::coord::Coord *)  ((lsst::afw::coord::TopocentricCoord *) x));
}
static void *_p_lsst__afw__coord__Fk5CoordTo_p_lsst__afw__coord__Coord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::coord::Coord *)  ((lsst::afw::coord::Fk5Coord *) x));
}
static void *_p_lsst__afw__coord__IcrsCoordTo_p_lsst__afw__coord__Coord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::coord::Coord *)  ((lsst::afw::coord::IcrsCoord *) x));
}
static void *_p_lsst__meas__algorithms__FluxAlgorithmTo_p_lsst__meas__algorithms__Algorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::Algorithm *)  ((lsst::meas::algorithms::FluxAlgorithm *) x));
}
static void *_p_lsst__meas__algorithms__CentroidAlgorithmTo_p_lsst__meas__algorithms__Algorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::Algorithm *)  ((lsst::meas::algorithms::CentroidAlgorithm *) x));
}
static void *_p_lsst__meas__algorithms__ShapeAlgorithmTo_p_lsst__meas__algorithms__Algorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::Algorithm *)  ((lsst::meas::algorithms::ShapeAlgorithm *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Image< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::DecoratedImage< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageBase< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageBase< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageBase< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::Camera > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Wcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::DetectorMosaic > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::DetectorXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::Detector > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Image< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::detection::HeavyFootprint< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Exposure< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Footprint_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::detection::Footprint > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::detection::FootprintSet > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__Persistence_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::persistence::Persistence > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Function< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__Definition_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::Definition > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__Policy_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::Policy > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::SeparableKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageSlice< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::geom::XYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< unsigned short,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< int,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::MaskedImage< double,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageBase< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::ImageBase< int > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Peak_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::detection::Peak > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::detection::Psf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__Storage_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::persistence::Storage > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::Dictionary > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::Ccd > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::geom::RadialXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::persistence::DbTsvStorage > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::persistence::LogicalLocation > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Exposure< float,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Covariogram< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Function< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::PolicyStreamDestination > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::PolicySource > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::PolicyString > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::PolicyStringDestination > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::BackgroundMI > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__base__PropertySet_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::base::PropertySet > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::PolicyDestination > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::Amp > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::geom::IdentityXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Mask< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Exposure< unsigned long,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Exposure< unsigned short,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Background_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Background > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__base__PropertyList_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::base::PropertyList > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Image< unsigned short > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::daf::persistence::DbStorage > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Image< unsigned long > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::XYTransformFromWcsPair > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::SquaredExpCovariogram< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::TanWcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::cameraGeom::Raft > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Kernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::FixedKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Exposure< double,unsigned short,float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::image::Image< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::PolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::AnalyticKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::geom::InvertedXYTransform > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::NeuralNetCovariogram< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::Citizen >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< float > > *)x);
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__meas__algorithms__KernelPsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::KernelPsf *)  ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__meas__algorithms__KernelPsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::KernelPsf *)  ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__meas__algorithms__KernelPsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::KernelPsf *)  ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< double > >(*(boost::shared_ptr< lsst::afw::math::Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ImagePsf >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ImagePsf >(*(boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ImagePsf >(*(boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ImagePsf >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ImagePsf >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ImagePsf >(*(boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *)x);
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__meas__algorithms__ImagePsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ImagePsf *) (lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__meas__algorithms__ImagePsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ImagePsf *)  ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__meas__algorithms__ImagePsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ImagePsf *) (lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__meas__algorithms__ImagePsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ImagePsf *) (lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__meas__algorithms__ImagePsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ImagePsf *)  ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__meas__algorithms__ImagePsf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::meas::algorithms::ImagePsf *)  ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< double > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< double > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< double > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< double > >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< double > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< double > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function2< float > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< float > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< float > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< float > >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< float > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function1< float > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::KernelPsf >(*(boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::KernelPsf >(*(boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::KernelPsf >(*(boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *)x);
}
static void *_p_lsst__afw__image__WcsTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::image::Wcs *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__afw__image__CoaddInputsTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::image::CoaddInputs *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_lsst__afw__image__TanWcsTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::image::Wcs *) ((lsst::afw::image::TanWcs *) x));
}
static void *_p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Footprint *) ((lsst::afw::detection::HeavyFootprint< float,unsigned short,float > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *)(lsst::afw::math::BasePolynomialFunction2< double > *) ((lsst::afw::math::PolynomialFunction2< double > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction1T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::PolynomialFunction1< double > *) x));
}
static void *_p_lsst__afw__math__NullFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::NullFunction2< double > *) x));
}
static void *_p_lsst__afw__math__NullFunction1T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::NullFunction1< double > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::LanczosFunction2< double > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction1T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::LanczosFunction1< double > *) x));
}
static void *_p_lsst__afw__math__FunctionT_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::math::Function< double > *) x));
}
static void *_p_lsst__afw__math__Function1T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *) ((lsst::afw::math::Function1< double > *) x));
}
static void *_p_lsst__afw__math__Function2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *) ((lsst::afw::math::Function2< double > *) x));
}
static void *_p_lsst__afw__math__BasePolynomialFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::BasePolynomialFunction2< double > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function1T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::Chebyshev1Function1< double > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *)(lsst::afw::math::BasePolynomialFunction2< double > *) ((lsst::afw::math::Chebyshev1Function2< double > *) x));
}
static void *_p_lsst__afw__math__DoubleGaussianFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::DoubleGaussianFunction2< double > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction1T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function1< double > *) ((lsst::afw::math::GaussianFunction1< double > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::GaussianFunction2< double > *) x));
}
static void *_p_lsst__afw__math__IntegerDeltaFunction2T_double_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< double > *)(lsst::afw::math::Function2< double > *) ((lsst::afw::math::IntegerDeltaFunction2< double > *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *) ((lsst::meas::algorithms::ImagePsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__afw__math__KernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::math::Kernel *) x));
}
static void *_p_lsst__afw__math__FixedKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::FixedKernel *) x));
}
static void *_p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::DeltaFunctionKernel *) x));
}
static void *_p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::LinearCombinationKernel *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__afw__math__NullFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::NullFunction2< float > *) x));
}
static void *_p_lsst__afw__math__NullFunction1T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::NullFunction1< float > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::LanczosFunction2< float > *) x));
}
static void *_p_lsst__afw__math__LanczosFunction1T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::LanczosFunction1< float > *) x));
}
static void *_p_lsst__afw__math__IntegerDeltaFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::IntegerDeltaFunction2< float > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::GaussianFunction2< float > *) x));
}
static void *_p_lsst__afw__math__GaussianFunction1T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::GaussianFunction1< float > *) x));
}
static void *_p_lsst__afw__math__DoubleGaussianFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::DoubleGaussianFunction2< float > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *)(lsst::afw::math::BasePolynomialFunction2< float > *) ((lsst::afw::math::Chebyshev1Function2< float > *) x));
}
static void *_p_lsst__afw__math__Chebyshev1Function1T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::Chebyshev1Function1< float > *) x));
}
static void *_p_lsst__afw__math__BasePolynomialFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *) ((lsst::afw::math::BasePolynomialFunction2< float > *) x));
}
static void *_p_lsst__afw__math__Function2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *) ((lsst::afw::math::Function2< float > *) x));
}
static void *_p_lsst__afw__math__Function1T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *) ((lsst::afw::math::Function1< float > *) x));
}
static void *_p_lsst__afw__math__FunctionT_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::math::Function< float > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction1T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function1< float > *) ((lsst::afw::math::PolynomialFunction1< float > *) x));
}
static void *_p_lsst__afw__math__PolynomialFunction2T_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Function< float > *)(lsst::afw::math::Function2< float > *)(lsst::afw::math::BasePolynomialFunction2< float > *) ((lsst::afw::math::PolynomialFunction2< float > *) x));
}
static void *_p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_tTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::detection::Footprint *) ((lsst::afw::detection::HeavyFootprint< int,unsigned short,float > *) x));
}
static void *_p_lsst__afw__detection__PsfTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::detection::Psf *) x));
}
static void *_p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::AnalyticKernel *) x));
}
static void *_p_lsst__afw__math__SeparableKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::SeparableKernel *) x));
}
static void *_p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::LanczosWarpingKernel *) x));
}
static void *_p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::BilinearWarpingKernel *) x));
}
static void *_p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::NearestWarpingKernel *) x));
}
static void *_p_lsst__afw__detection__FootprintTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::detection::Footprint *) x));
}
static void *_p_lsst__afw__image__CalibTo_p_lsst__afw__table__io__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::table::io::Persistable *)  ((lsst::afw::image::Calib *) x));
}
static void *_p_lsst__afw__image__WcsTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::Wcs *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__pex__policy__PolicyFileTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::pex::policy::PolicyFile *) x));
}
static void *_p_lsst__pex__policy__DefaultPolicyFileTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::pex::policy::PolicyFile *) ((lsst::pex::policy::DefaultPolicyFile *) x));
}
static void *_p_lsst__pex__policy__UrnPolicyFileTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::pex::policy::PolicyFile *)(lsst::pex::policy::DefaultPolicyFile *) ((lsst::pex::policy::UrnPolicyFile *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_int_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::DecoratedImage< int > *) x));
}
static void *_p_lsst__afw__image__ImageT_int_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< int > *) ((lsst::afw::image::Image< int > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_int_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::ImageBase< int > *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_lsst__afw__image__TanWcsTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::Wcs *) ((lsst::afw::image::TanWcs *) x));
}
static void *_p_lsst__afw__image__ImageSliceT_double_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< double > *)(lsst::afw::image::Image< double > *) ((lsst::afw::image::ImageSlice< double > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_double_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::DecoratedImage< double > *) x));
}
static void *_p_lsst__afw__image__ImageT_double_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< double > *) ((lsst::afw::image::Image< double > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_double_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::ImageBase< double > *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__afw__image__ExposureT_float_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::Exposure< float,unsigned short,float > *) x));
}
static void *_p_lsst__meas__algorithms__ImagePsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *) ((lsst::meas::algorithms::ImagePsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__afw__math__KernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::math::Kernel *) x));
}
static void *_p_lsst__afw__math__FixedKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::FixedKernel *) x));
}
static void *_p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::DeltaFunctionKernel *) x));
}
static void *_p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::LinearCombinationKernel *) x));
}
static void *_p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::LocalShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::AnalyticKernel *) ((lsst::meas::algorithms::ShapeletKernel *) x));
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::detection::Psf *)(lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::MaskedImage< float,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__ImageSliceT_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< float > *)(lsst::afw::image::Image< float > *) ((lsst::afw::image::ImageSlice< float > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::DecoratedImage< float > *) x));
}
static void *_p_lsst__afw__image__ImageT_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< float > *) ((lsst::afw::image::Image< float > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::ImageBase< float > *) x));
}
static void *_p_lsst__pex__policy__PolicyTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::pex::policy::Policy *) x));
}
static void *_p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::Exposure< unsigned long,unsigned short,float > *) x));
}
static void *_p_lsst__afw__detection__PsfTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::detection::Psf *) x));
}
static void *_p_lsst__afw__image__MaskT_unsigned_short_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< uint16_t > *) ((lsst::afw::image::Mask< unsigned short > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_unsigned_short_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::ImageBase< unsigned short > *) x));
}
static void *_p_lsst__afw__image__ImageT_unsigned_short_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< uint16_t > *) ((lsst::afw::image::Image< unsigned short > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_unsigned_short_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::DecoratedImage< unsigned short > *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::MaskedImage< unsigned short,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::MaskedImage< double,unsigned short,float > *) x));
}
static void *_p_lsst__pex__policy__PolicyStringTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::pex::policy::PolicyString *) x));
}
static void *_p_lsst__afw__math__AnalyticKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::AnalyticKernel *) x));
}
static void *_p_lsst__afw__math__SeparableKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *) ((lsst::afw::math::SeparableKernel *) x));
}
static void *_p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::LanczosWarpingKernel *) x));
}
static void *_p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::BilinearWarpingKernel *) x));
}
static void *_p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::math::Kernel *)(lsst::afw::math::SeparableKernel *) ((lsst::afw::math::NearestWarpingKernel *) x));
}
static void *_p_lsst__daf__base__PropertyListTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::daf::base::PropertySet *) ((lsst::daf::base::PropertyList *) x));
}
static void *_p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::Exposure< unsigned short,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::MaskedImage< int,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__ExposureT_int_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::Exposure< int,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__ExposureT_double_unsigned_short_float_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::Exposure< double,unsigned short,float > *) x));
}
static void *_p_lsst__afw__image__ImageBaseT_unsigned_long_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::ImageBase< unsigned long > *) x));
}
static void *_p_lsst__afw__image__ImageT_unsigned_long_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::afw::image::ImageBase< uint64_t > *) ((lsst::afw::image::Image< unsigned long > *) x));
}
static void *_p_lsst__afw__image__DecoratedImageT_unsigned_long_tTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::afw::image::DecoratedImage< unsigned long > *) x));
}
static void *_p_lsst__pex__policy__DictionaryTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *) (lsst::pex::policy::Policy *) ((lsst::pex::policy::Dictionary *) x));
}
static void *_p_lsst__daf__base__PropertySetTo_p_lsst__daf__base__Persistable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::daf::base::Persistable *)  ((lsst::daf::base::PropertySet *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::FixedKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::SeparableKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Kernel >(*(boost::shared_ptr< lsst::afw::math::AnalyticKernel > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::CentroidControl >(*(boost::shared_ptr< lsst::meas::algorithms::GaussianCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::CentroidControl >(*(boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::CentroidControl >(*(boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::SimpleRecord >(*(boost::shared_ptr< lsst::afw::table::SourceRecord > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::Algorithm >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::Algorithm >(*(boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::Algorithm >(*(boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::FluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::CentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::EllipticalApertureFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::GaussianCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::PsfFluxControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeControl > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::Function1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::Function2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::NullFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::NullFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::LanczosFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::GaussianFunction1< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::Function< float > >(*(boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__SimpleTable_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::BaseTable >(*(boost::shared_ptr< lsst::afw::table::SimpleTable > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__SourceTable_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::BaseTable >(*(boost::shared_ptr< lsst::afw::table::SourceTable > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__table__ExposureTable_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::table::BaseTable >(*(boost::shared_ptr< lsst::afw::table::ExposureTable > *)x);
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicyDestination >(*(boost::shared_ptr< lsst::pex::policy::PolicyStreamDestination > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicyDestination >(*(boost::shared_ptr< lsst::pex::policy::PolicyStringDestination > *)x);
}
static void *_p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_tTo_p_lsst__afw__detection__Footprint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Footprint *)  ((lsst::afw::detection::HeavyFootprint< float,unsigned short,float > *) x));
}
static void *_p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_tTo_p_lsst__afw__detection__Footprint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Footprint *)  ((lsst::afw::detection::HeavyFootprint< int,unsigned short,float > *) x));
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl >(*(boost::shared_ptr< lsst::meas::algorithms::EllipticalApertureFluxControl > *)x);
}
static void *_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_tTo_p_lsst__afw__math__SpatialCellCandidate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellCandidate *)  ((lsst::afw::math::SpatialCellMaskedImageCandidate< float > *) x));
}
static void *_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_tTo_p_lsst__afw__math__SpatialCellCandidate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellCandidate *)  ((lsst::afw::math::SpatialCellMaskedImageCandidate< double > *) x));
}
static void *_p_lsst__meas__algorithms__ShapeletPsfCandidateTo_p_lsst__afw__math__SpatialCellCandidate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellCandidate *)  ((lsst::meas::algorithms::ShapeletPsfCandidate *) x));
}
static void *_p_lsst__afw__math__SpatialCellImageCandidateT_float_tTo_p_lsst__afw__math__SpatialCellCandidate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellCandidate *)  ((lsst::afw::math::SpatialCellImageCandidate< float > *) x));
}
static void *_p_lsst__meas__algorithms__PsfCandidateT_float_tTo_p_lsst__afw__math__SpatialCellCandidate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellCandidate *) (lsst::afw::math::SpatialCellMaskedImageCandidate< float > *) ((lsst::meas::algorithms::PsfCandidate< float > *) x));
}
static void *_p_lsst__afw__math__SpatialCellImageCandidateT_double_tTo_p_lsst__afw__math__SpatialCellCandidate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellCandidate *)  ((lsst::afw::math::SpatialCellImageCandidate< double > *) x));
}
static void *_p_lsst__meas__algorithms__PsfCandidateT_float_tTo_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::math::SpatialCellMaskedImageCandidate< float > *)  ((lsst::meas::algorithms::PsfCandidate< float > *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__image__Wcs_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::image::Wcs >(*(boost::shared_ptr< lsst::afw::image::TanWcs > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile >(*(boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *)x);
}
static void *_p_lsst__meas__algorithms__DefectTo_p_lsst__afw__image__DefectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::image::DefectBase *)  ((lsst::meas::algorithms::Defect *) x));
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicySource >(*(boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicySource >(*(boost::shared_ptr< lsst::pex::policy::PolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicySource >(*(boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicySource >(*(boost::shared_ptr< lsst::pex::policy::PolicyString > *)x);
}
static void *_p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *) (lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::PcaPsf *) x));
}
static void *_p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *) (lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::KernelPsf *) x));
}
static void *_p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *)  ((lsst::meas::algorithms::ImagePsf *) x));
}
static void *_p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *) (lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::SingleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *) (lsst::meas::algorithms::ImagePsf *)(lsst::meas::algorithms::KernelPsf *) ((lsst::meas::algorithms::DoubleGaussianPsf *) x));
}
static void *_p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *) (lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::WarpedPsf *) x));
}
static void *_p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__detection__Psf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::detection::Psf *) (lsst::meas::algorithms::ImagePsf *) ((lsst::meas::algorithms::CoaddPsf *) x));
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >(*(boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >(*(boost::shared_ptr< lsst::afw::math::SpatialCellMaskedImageCandidate< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >(*(boost::shared_ptr< lsst::afw::math::SpatialCellMaskedImageCandidate< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >(*(boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >(*(boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< double > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellCandidate >(*(boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__logging__FileDestination_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::logging::LogDestination >(*(boost::shared_ptr< lsst::pex::logging::FileDestination > *)x);
}
static void *_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::math::SpatialCellMaskedImageCandidate< float > >(*(boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::DetectorMosaic >(*(boost::shared_ptr< lsst::afw::cameraGeom::Raft > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::DetectorMosaic >(*(boost::shared_ptr< lsst::afw::cameraGeom::Camera > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Detector >(*(boost::shared_ptr< lsst::afw::cameraGeom::DetectorMosaic > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Detector >(*(boost::shared_ptr< lsst::afw::cameraGeom::Amp > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Detector >(*(boost::shared_ptr< lsst::afw::cameraGeom::Raft > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Detector >(*(boost::shared_ptr< lsst::afw::cameraGeom::Camera > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::afw::cameraGeom::Detector >(*(boost::shared_ptr< lsst::afw::cameraGeom::Ccd > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_tTo_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::persistence::Storage >(*(boost::shared_ptr< lsst::daf::persistence::DbStorage > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_tTo_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::persistence::Storage >(*(boost::shared_ptr< lsst::daf::persistence::DbTsvStorage > *)x);
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_tTo_p_boost__shared_ptrT_lsst__pex__policy__Policy_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::Policy >(*(boost::shared_ptr< lsst::pex::policy::Dictionary > *)x);
}
static void *_p_lsst__afw__fits__FitsTypeErrorTo_p_lsst__afw__fits__FitsError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::fits::FitsError *)  ((lsst::afw::fits::FitsTypeError *) x));
}
static void *_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::pex::policy::PolicyStreamDestination >(*(boost::shared_ptr< lsst::pex::policy::PolicyStringDestination > *)x);
}
static void *_p_boost__shared_ptrT_lsst__daf__base__PropertyList_tTo_p_boost__shared_ptrT_lsst__daf__base__PropertySet_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< lsst::daf::base::PropertySet >(*(boost::shared_ptr< lsst::daf::base::PropertyList > *)x);
}
static swig_type_info _swigt__p_AffineTransform = {"_p_AffineTransform", "AffineTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AlgorithmList = {"_p_AlgorithmList", "AlgorithmList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AmpSet = {"_p_AmpSet", "AmpSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Array = {"_p_Array", "Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoolArray = {"_p_BoolArray", "BoolArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Builder = {"_p_Builder", "Builder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CandidateList = {"_p_CandidateList", "CandidateList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Catalog = {"_p_Catalog", "Catalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CellList = {"_p_CellList", "CellList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CoeffT = {"_p_CoeffT", "CoeffT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ColumnView = {"_p_ColumnView", "ColumnView *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstArray = {"_p_ConstArray", "ConstArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstCatalog = {"_p_ConstCatalog", "ConstCatalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstDictPtr = {"_p_ConstDictPtr", "ConstDictPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstPolicyPtrArray = {"_p_ConstPolicyPtrArray", "ConstPolicyPtrArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstPtr = {"_p_ConstPtr", "ConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DetectorSet = {"_p_DetectorSet", "DetectorSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DictPtr = {"_p_DictPtr", "DictPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DoubleArray = {"_p_DoubleArray", "DoubleArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EigenVector = {"_p_EigenVector", "EigenVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Element = {"_p_Element", "Element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ellipticity = {"_p_Ellipticity", "Ellipticity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ErrKey = {"_p_ErrKey", "ErrKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ErrValue = {"_p_ErrValue", "ErrValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exposure = {"_p_Exposure", "Exposure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Extent = {"_p_Extent", "Extent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilePtr = {"_p_FilePtr", "FilePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilePtrArray = {"_p_FilePtrArray", "FilePtrArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FootprintList = {"_p_FootprintList", "FootprintList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Function1Ptr = {"_p_Function1Ptr", "Function1Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Function2Ptr = {"_p_Function2Ptr", "Function2Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Image = {"_p_Image", "Image *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImageConstPtr = {"_p_ImageConstPtr", "ImageConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImageList = {"_p_ImageList", "ImageList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImagePtr = {"_p_ImagePtr", "ImagePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImageT = {"_p_ImageT", "ImageT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntArray = {"_p_IntArray", "IntArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntT = {"_p_IntT", "IntT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InternalPixelT = {"_p_InternalPixelT", "InternalPixelT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Iterator = {"_p_Iterator", "Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Jacobian = {"_p_Jacobian", "Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KernelFunction = {"_p_KernelFunction", "KernelFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KernelFunctionPtr = {"_p_KernelFunctionPtr", "KernelFunctionPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KeyTuple = {"_p_KeyTuple", "KeyTuple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_List = {"_p_List", "List *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mask = {"_p_Mask", "Mask *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPixel = {"_p_MaskPixel", "MaskPixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPlaneDict = {"_p_MaskPlaneDict", "MaskPlaneDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPtr = {"_p_MaskPtr", "MaskPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskedImageT = {"_p_MaskedImageT", "MaskedImageT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeasKey = {"_p_MeasKey", "MeasKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeasValue = {"_p_MeasValue", "MeasValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NullSpatialFunction = {"_p_NullSpatialFunction", "NullSpatialFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OutPixelT = {"_p_OutPixelT", "OutPixelT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterVector = {"_p_ParameterVector", "ParameterVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakList = {"_p_PeakList", "PeakList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pixel = {"_p_Pixel", "Pixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PixelConstReference = {"_p_PixelConstReference", "PixelConstReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PixelReference = {"_p_PixelReference", "PixelReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PixelT = {"_p_PixelT", "PixelT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Point = {"_p_Point", "Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Point2D = {"_p_Point2D", "Point2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointD = {"_p_PointD", "PointD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Policy = {"_p_Policy", "Policy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolicyPtrArray = {"_p_PolicyPtrArray", "PolicyPtrArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProductDerivativeMatrix = {"_p_ProductDerivativeMatrix", "ProductDerivativeMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PsfCandidateList = {"_p_PsfCandidateList", "PsfCandidateList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PsfCandidateT = {"_p_PsfCandidateT", "PsfCandidateT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptr = {"_p_Ptr", "Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PtrList = {"_p_PtrList", "PtrList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quadrupole = {"_p_Quadrupole", "Quadrupole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Radius = {"_p_Radius", "Radius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Record = {"_p_Record", "Record *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Shapelet = {"_p_Shapelet", "Shapelet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ShapeletCovariance = {"_p_ShapeletCovariance", "ShapeletCovariance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ShapeletVector = {"_p_ShapeletVector", "ShapeletVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SinglePixel = {"_p_SinglePixel", "SinglePixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Source = {"_p_Source", "Source *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceCatalog = {"_p_SourceCatalog", "SourceCatalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceRecord = {"_p_SourceRecord", "SourceRecord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceTable = {"_p_SourceTable", "SourceTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpanList = {"_p_SpanList", "SpanList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpatialCellSet = {"_p_SpatialCellSet", "SpatialCellSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpatialFunction = {"_p_SpatialFunction", "SpatialFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpatialFunctionPtr = {"_p_SpatialFunctionPtr", "SpatialFunctionPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamPtr = {"_p_StreamPtr", "StreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringArray = {"_p_StringArray", "StringArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Table = {"_p_Table", "Table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransformDerivativeMatrix = {"_p_TransformDerivativeMatrix", "TransformDerivativeMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Value = {"_p_Value", "Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Variance = {"_p_Variance", "Variance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VariancePtr = {"_p_VariancePtr", "VariancePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t = {"_p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t", "VectorT< lsst::afw::table::SourceRecord,lsst::afw::table::SourceTable > *|lsst::afw::table::SourceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Wcs = {"_p_Wcs", "Wcs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_afw__geom__ellipses__Axes = {"_p_afw__geom__ellipses__Axes", "afw::geom::ellipses::Axes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_afw__geom__ellipses__Ellipse = {"_p_afw__geom__ellipses__Ellipse", "afw::geom::ellipses::Ellipse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_afw__image__ExposureT_PixelT_t = {"_p_afw__image__ExposureT_PixelT_t", "afw::image::Exposure< PixelT > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_afw__table__SourceRecord = {"_p_afw__table__SourceRecord", "afw::table::SourceRecord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argument_type = {"_p_argument_type", "argument_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_base = {"_p_base", "base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_Eigen__MatrixXd_const_t = {"_p_boost__shared_ptrT_Eigen__MatrixXd_const_t", "boost::shared_ptr< Eigen::MatrixXd const > *|boost::shared_ptr< lsst::meas::algorithms::Shapelet::ShapeletCovariance const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_afw__image__Wcs_const_t = {"_p_boost__shared_ptrT_afw__image__Wcs_const_t", "boost::shared_ptr< afw::image::Wcs const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t", "boost::shared_ptr< lsst::afw::cameraGeom::Amp > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t", "boost::shared_ptr< lsst::afw::cameraGeom::Camera > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t", "boost::shared_ptr< lsst::afw::cameraGeom::Ccd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t", "boost::shared_ptr< lsst::afw::cameraGeom::DetectorMosaic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t", "boost::shared_ptr< lsst::afw::cameraGeom::DetectorXYTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t", "boost::shared_ptr< lsst::afw::cameraGeom::Detector > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t", "boost::shared_ptr< lsst::afw::cameraGeom::Distortion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t", "boost::shared_ptr< lsst::afw::cameraGeom::ElectronicParams > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t", "boost::shared_ptr< lsst::afw::cameraGeom::NullDistortion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t", "boost::shared_ptr< lsst::afw::cameraGeom::RadialPolyDistortion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t", "boost::shared_ptr< lsst::afw::cameraGeom::Raft > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__Coord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__Coord_t", "boost::shared_ptr< lsst::afw::coord::Coord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t", "boost::shared_ptr< lsst::afw::coord::EclipticCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t", "boost::shared_ptr< lsst::afw::coord::Fk5Coord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t", "boost::shared_ptr< lsst::afw::coord::GalacticCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t", "boost::shared_ptr< lsst::afw::coord::IcrsCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t", "boost::shared_ptr< lsst::afw::coord::TopocentricCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t = {"_p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t", "boost::shared_ptr< lsst::afw::detection::FootprintSet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t", "boost::shared_ptr< lsst::afw::detection::Footprint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::detection::HeavyFootprint< float,unsigned short,float > > *|boost::shared_ptr< lsst::afw::detection::HeavyFootprint< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::detection::HeavyFootprint< int,unsigned short,float > > *|boost::shared_ptr< lsst::afw::detection::HeavyFootprint< int,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Peak_t", "boost::shared_ptr< lsst::afw::detection::Peak > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Psf_t", "boost::shared_ptr< lsst::afw::detection::Psf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t", "boost::shared_ptr< lsst::afw::geom::AffineTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t", "boost::shared_ptr< lsst::afw::geom::DetectorXYTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t", "boost::shared_ptr< lsst::afw::geom::IdentityXYTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t", "boost::shared_ptr< lsst::afw::geom::InvertedXYTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t", "boost::shared_ptr< lsst::afw::geom::LinearTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t", "boost::shared_ptr< lsst::afw::geom::RadialXYTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__Span_t = {"_p_boost__shared_ptrT_lsst__afw__geom__Span_t", "boost::shared_ptr< lsst::afw::geom::Span > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t", "boost::shared_ptr< lsst::afw::geom::XYTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t", "boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::DeterminantRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::LogDeterminantRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::LogTraceRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::TraceRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::DeterminantRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogDeterminantRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogTraceRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::TraceRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::DeterminantRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::LogDeterminantRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::LogTraceRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::TraceRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t = {"_p_boost__shared_ptrT_lsst__afw__image__Calib_t", "boost::shared_ptr< lsst::afw::image::Calib > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t = {"_p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t", "boost::shared_ptr< lsst::afw::image::CoaddInputs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned short > > *|boost::shared_ptr< lsst::afw::image::DecoratedImage< boost::uint16_t > > *|boost::shared_ptr< lsst::afw::image::DecoratedImage< uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned long > > *|boost::shared_ptr< lsst::afw::image::DecoratedImage< boost::uint64_t > > *|boost::shared_ptr< lsst::afw::image::DecoratedImage< uint64_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t = {"_p_boost__shared_ptrT_lsst__afw__image__DefectBase_t", "boost::shared_ptr< lsst::afw::image::DefectBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t", "boost::shared_ptr< lsst::afw::image::ExposureInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< double,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< float,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< int,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< int,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< unsigned short,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< uint16_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *|boost::shared_ptr< lsst::afw::image::Exposure< boost::uint16_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< unsigned long,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< uint64_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *|boost::shared_ptr< lsst::afw::image::Exposure< boost::uint64_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< unsigned short > > *|boost::shared_ptr< lsst::afw::image::ImageBase< boost::uint16_t > > *|boost::shared_ptr< lsst::afw::image::ImageBase< uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< unsigned long > > *|boost::shared_ptr< lsst::afw::image::ImageBase< boost::uint64_t > > *|boost::shared_ptr< lsst::afw::image::ImageBase< uint64_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t", "boost::shared_ptr< lsst::afw::image::ImageSlice< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t", "boost::shared_ptr< lsst::afw::image::ImageSlice< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t", "boost::shared_ptr< lsst::afw::image::Image< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t", "boost::shared_ptr< lsst::afw::image::Image< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t", "boost::shared_ptr< lsst::afw::image::Image< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::Image< unsigned short > > *|boost::shared_ptr< lsst::afw::image::Image< boost::uint16_t > > *|boost::shared_ptr< lsst::afw::image::Image< uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t", "boost::shared_ptr< lsst::afw::image::Image< unsigned long > > *|boost::shared_ptr< lsst::afw::image::Image< uint64_t > > *|boost::shared_ptr< lsst::afw::image::Image< boost::uint64_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::Mask< unsigned short > > *|boost::shared_ptr< lsst::afw::image::Mask< uint16_t > > *|boost::shared_ptr< lsst::afw::image::Mask< boost::uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< double,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< float,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< int,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< int,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< unsigned short,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< boost::uint16_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< uint16_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t = {"_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t", "boost::shared_ptr< lsst::afw::image::TanWcs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t = {"_p_boost__shared_ptrT_lsst__afw__image__Wcs_t", "boost::shared_ptr< lsst::afw::image::Wcs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t = {"_p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t", "boost::shared_ptr< lsst::afw::image::XYTransformFromWcsPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t", "boost::shared_ptr< lsst::afw::math::AnalyticKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t", "boost::shared_ptr< lsst::afw::math::Approximate< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t = {"_p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t", "boost::shared_ptr< lsst::afw::math::BackgroundMI > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Background_t = {"_p_boost__shared_ptrT_lsst__afw__math__Background_t", "boost::shared_ptr< lsst::afw::math::Background > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::BasePolynomialFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t", "boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t = {"_p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t", "boost::shared_ptr< lsst::afw::math::CandidateVisitor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t", "boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t", "boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t", "boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t", "boost::shared_ptr< lsst::afw::math::Chebyshev1Function2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t", "boost::shared_ptr< lsst::afw::math::Covariogram< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t", "boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t", "boost::shared_ptr< lsst::afw::math::FixedKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t", "boost::shared_ptr< lsst::afw::math::Function1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t", "boost::shared_ptr< lsst::afw::math::Function1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t", "boost::shared_ptr< lsst::afw::math::Function2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t", "boost::shared_ptr< lsst::afw::math::Function2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t", "boost::shared_ptr< lsst::afw::math::Function< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t", "boost::shared_ptr< lsst::afw::math::Function< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Interpolate_t = {"_p_boost__shared_ptrT_lsst__afw__math__Interpolate_t", "boost::shared_ptr< lsst::afw::math::Interpolate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__Kernel_t", "boost::shared_ptr< lsst::afw::math::Kernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t", "boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t", "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t", "boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t", "boost::shared_ptr< lsst::afw::math::NeuralNetCovariogram< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t", "boost::shared_ptr< lsst::afw::math::SeparableKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t", "boost::shared_ptr< lsst::afw::math::SpatialCellCandidate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellMaskedImageCandidate< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellMaskedImageCandidate< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t", "lsst::meas::algorithms::ShapeletInterpolation::SpatialCellSet::Ptr *|boost::shared_ptr< lsst::afw::math::SpatialCellSet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t", "boost::shared_ptr< lsst::afw::math::SpatialCell > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t", "boost::shared_ptr< lsst::afw::math::SquaredExpCovariogram< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t = {"_p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t", "boost::shared_ptr< lsst::afw::math::StatisticsControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t = {"_p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t", "boost::shared_ptr< lsst::afw::math::WarpingControl const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t = {"_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t", "boost::shared_ptr< lsst::afw::table::BaseRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__BaseTable_t = {"_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t", "boost::shared_ptr< lsst::afw::table::BaseTable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t = {"_p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t", "boost::shared_ptr< lsst::afw::table::ExposureRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t = {"_p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t", "boost::shared_ptr< lsst::afw::table::ExposureTable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__IdFactory_t = {"_p_boost__shared_ptrT_lsst__afw__table__IdFactory_t", "boost::shared_ptr< lsst::afw::table::IdFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t = {"_p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t", "boost::shared_ptr< lsst::afw::table::ReferenceMatchVector const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t = {"_p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t", "boost::shared_ptr< lsst::afw::table::SimpleRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t = {"_p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t", "boost::shared_ptr< lsst::afw::table::SimpleTable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t = {"_p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t", "boost::shared_ptr< lsst::afw::table::SourceRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t = {"_p_boost__shared_ptrT_lsst__afw__table__SourceTable_t", "boost::shared_ptr< lsst::afw::table::SourceTable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Footprint > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::Calib > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::TanWcs > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::image::Wcs > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::DeltaFunctionKernel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::FixedKernel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Function1< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Function1< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Function2< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Function2< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Function< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Function< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::LinearCombinationKernel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::afw::math::SeparableKernel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t", "boost::shared_ptr< lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t = {"_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t", "boost::shared_ptr< lsst::afw::table::io::Persistable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__Citizen_t = {"_p_boost__shared_ptrT_lsst__daf__base__Citizen_t", "boost::shared_ptr< lsst::daf::base::Citizen > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__Persistable_t = {"_p_boost__shared_ptrT_lsst__daf__base__Persistable_t", "boost::shared_ptr< lsst::daf::base::Persistable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t = {"_p_boost__shared_ptrT_lsst__daf__base__PropertyList_t", "boost::shared_ptr< lsst::daf::base::PropertyList > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t = {"_p_boost__shared_ptrT_lsst__daf__base__PropertySet_t", "boost::shared_ptr< lsst::daf::base::PropertySet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t", "boost::shared_ptr< lsst::daf::persistence::DbStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t", "boost::shared_ptr< lsst::daf::persistence::DbTsvStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t", "boost::shared_ptr< lsst::daf::persistence::LogicalLocation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t", "boost::shared_ptr< lsst::daf::persistence::Persistence > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t", "boost::shared_ptr< lsst::daf::persistence::Storage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t", "boost::shared_ptr< lsst::meas::algorithms::AlgorithmControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t", "boost::shared_ptr< lsst::meas::algorithms::Algorithm > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::ApertureFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t", "boost::shared_ptr< lsst::meas::algorithms::CentroidAlgorithm > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t", "boost::shared_ptr< lsst::meas::algorithms::CentroidControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t", "boost::shared_ptr< lsst::meas::algorithms::ClassificationControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t", "boost::shared_ptr< lsst::meas::algorithms::CoaddPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t", "boost::shared_ptr< lsst::meas::algorithms::CorrectFluxesControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t", "boost::shared_ptr< lsst::meas::algorithms::Defect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t", "boost::shared_ptr< lsst::meas::algorithms::DoubleGaussianPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::EllipticalApertureFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t", "boost::shared_ptr< lsst::meas::algorithms::FluxAlgorithm > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::FluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t", "boost::shared_ptr< lsst::meas::algorithms::GaussianCentroidControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::GaussianFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t", "boost::shared_ptr< lsst::meas::algorithms::ImagePsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t", "boost::shared_ptr< lsst::meas::algorithms::KernelPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t", "boost::shared_ptr< lsst::meas::algorithms::LocalShapeletKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t", "boost::shared_ptr< lsst::meas::algorithms::NaiveCentroidControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::NaiveFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t", "boost::shared_ptr< lsst::meas::algorithms::PcaPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::PeakLikelihoodFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t", "boost::shared_ptr< lsst::meas::algorithms::PixelFlagControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t", "boost::shared_ptr< lsst::meas::algorithms::PsfCandidate< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::PsfFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t", "boost::shared_ptr< lsst::meas::algorithms::RecordCentroidControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t", "boost::shared_ptr< lsst::meas::algorithms::SdssCentroidControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t", "boost::shared_ptr< lsst::meas::algorithms::SdssShapeControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t", "boost::shared_ptr< lsst::meas::algorithms::ShapeAlgorithm > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t", "boost::shared_ptr< lsst::meas::algorithms::ShapeControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t", "boost::shared_ptr< lsst::meas::algorithms::ShapeletInterpolation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t", "boost::shared_ptr< lsst::meas::algorithms::ShapeletKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t", "boost::shared_ptr< lsst::meas::algorithms::ShapeletPsfCandidate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t", "boost::shared_ptr< lsst::meas::algorithms::Shapelet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t", "boost::shared_ptr< lsst::meas::algorithms::SincFluxControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t", "boost::shared_ptr< lsst::meas::algorithms::SingleGaussianPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t", "boost::shared_ptr< lsst::meas::algorithms::SkyCoordControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t = {"_p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t", "boost::shared_ptr< lsst::meas::algorithms::WarpedPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t", "boost::shared_ptr< lsst::pex::logging::BriefFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t = {"_p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t", "boost::shared_ptr< lsst::pex::logging::FileDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t", "boost::shared_ptr< lsst::pex::logging::IndentedFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t = {"_p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t", "boost::shared_ptr< lsst::pex::logging::LogDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t", "boost::shared_ptr< lsst::pex::logging::LogFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t", "boost::shared_ptr< lsst::pex::logging::NetLoggerFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t = {"_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t", "boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t = {"_p_boost__shared_ptrT_lsst__pex__policy__Definition_t", "boost::shared_ptr< lsst::pex::policy::Definition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t = {"_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t", "boost::shared_ptr< lsst::pex::policy::Dictionary > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t", "boost::shared_ptr< lsst::pex::policy::PolicyDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t", "boost::shared_ptr< lsst::pex::policy::PolicyFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t", "boost::shared_ptr< lsst::pex::policy::PolicySource > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t", "boost::shared_ptr< lsst::pex::policy::PolicyStreamDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t", "boost::shared_ptr< lsst::pex::policy::PolicyStringDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t", "boost::shared_ptr< lsst::pex::policy::PolicyString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t = {"_p_boost__shared_ptrT_lsst__pex__policy__Policy_t", "boost::shared_ptr< lsst::pex::policy::Policy > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t = {"_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t", "boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t = {"_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t", "boost::shared_ptr< std::vector< boost::shared_ptr< lsst::afw::detection::Footprint > > > *|boost::shared_ptr< std::vector< boost::shared_ptr< lsst::afw::detection::Footprint >,std::allocator< boost::shared_ptr< lsst::afw::detection::Footprint > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t = {"_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t", "boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr > > *|boost::shared_ptr< std::vector< lsst::meas::algorithms::Defect::Ptr,std::allocator< lsst::meas::algorithms::Defect::Ptr > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t = {"_p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t", "boost::shared_ptr< std::vector< lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList > > *|boost::shared_ptr< std::vector< lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList,std::allocator< lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_x_iterator = {"_p_const_x_iterator", "const_x_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_xy_locator = {"_p_const_xy_locator", "const_xy_locator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_y_iterator = {"_p_const_y_iterator", "const_y_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_fast_iterator = {"_p_fast_iterator", "fast_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|lsst::afw::math::WeightPixel *|lsst::afw::image::VariancePixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_image_category = {"_p_image_category", "image_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int_least32_t *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kernel_fill_factor = {"_p_kernel_fill_factor", "kernel_fill_factor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "intptr_t *|int_least64_t *|int_fast32_t *|int_fast64_t *|int64_t *|long *|lsst::afw::table::RecordId *|int_fast16_t *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__coord__Coord = {"_p_lsst__afw__coord__Coord", "lsst::afw::coord::Coord *|lsst::afw::table::Coord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__coord__GalacticCoord = {"_p_lsst__afw__coord__GalacticCoord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__coord__EclipticCoord = {"_p_lsst__afw__coord__EclipticCoord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__coord__TopocentricCoord = {"_p_lsst__afw__coord__TopocentricCoord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__coord__Fk5Coord = {"_p_lsst__afw__coord__Fk5Coord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__coord__IcrsCoord = {"_p_lsst__afw__coord__IcrsCoord", "lsst::afw::coord::IcrsCoord *|lsst::afw::table::IcrsCoord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__detection__Footprint = {"_p_lsst__afw__detection__Footprint", "lsst::afw::detection::Footprint *|lsst::afw::table::Footprint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t = {"_p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t = {"_p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__detection__Psf = {"_p_lsst__afw__detection__Psf", "lsst::afw::detection::Psf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__fits__FitsError = {"_p_lsst__afw__fits__FitsError", "lsst::afw::fits::FitsError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__fits__FitsTypeError = {"_p_lsst__afw__fits__FitsTypeError", "lsst::afw::fits::FitsTypeError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__fits__MemFileManager = {"_p_lsst__afw__fits__MemFileManager", "lsst::afw::fits::MemFileManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__Angle = {"_p_lsst__afw__geom__Angle", "lsst::afw::geom::Angle *|lsst::afw::table::Angle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__Box2D = {"_p_lsst__afw__geom__Box2D", "lsst::afw::geom::Box2D *|lsst::afw::geom::BoxD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__Box2I = {"_p_lsst__afw__geom__Box2I", "lsst::afw::geom::Box2I *|lsst::afw::geom::BoxI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__CoordinateExprT_2_t = {"_p_lsst__afw__geom__CoordinateExprT_2_t", "lsst::afw::geom::CoordinateExpr< 2 > *|lsst::afw::geom::CoordinateExpr2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__CoordinateExprT_3_t = {"_p_lsst__afw__geom__CoordinateExprT_3_t", "lsst::afw::geom::CoordinateExpr3 *|lsst::afw::geom::CoordinateExpr< 3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_double_2_t = {"_p_lsst__afw__geom__ExtentT_double_2_t", "lsst::afw::geom::Extent2D *|lsst::afw::geom::Extent< double,2 > *|lsst::afw::geom::ExtentD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_double_3_t = {"_p_lsst__afw__geom__ExtentT_double_3_t", "lsst::afw::geom::Extent< double,3 > *|lsst::afw::geom::Extent3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_int_2_t = {"_p_lsst__afw__geom__ExtentT_int_2_t", "lsst::afw::geom::ExtentI *|lsst::afw::geom::Extent2I *|lsst::afw::geom::Extent< int,2 > *|lsst::meas::algorithms::LocalShapeletKernel::Extent *|lsst::meas::algorithms::ShapeletKernel::Extent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_int_3_t = {"_p_lsst__afw__geom__ExtentT_int_3_t", "lsst::afw::geom::Extent< int,3 > *|lsst::afw::geom::Extent3I *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_double_2_t = {"_p_lsst__afw__geom__PointT_double_2_t", "lsst::afw::geom::Point2D *|lsst::afw::geom::Point< double,2 > *|lsst::meas::algorithms::ShapeletKernel::Point *|lsst::meas::algorithms::ShapeletInterpolation::PointD *|lsst::afw::geom::PointD *|lsst::meas::algorithms::Shapelet::PointD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_double_3_t = {"_p_lsst__afw__geom__PointT_double_3_t", "lsst::afw::geom::Point< double,3 > *|lsst::afw::geom::Point3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_int_2_t = {"_p_lsst__afw__geom__PointT_int_2_t", "lsst::afw::geom::PointI *|lsst::afw::geom::Point2I *|lsst::afw::geom::Point< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_int_3_t = {"_p_lsst__afw__geom__PointT_int_3_t", "lsst::afw::geom::Point< int,3 > *|lsst::afw::geom::Point3I *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__Span = {"_p_lsst__afw__geom__Span", "lsst::afw::geom::Span *|lsst::afw::detection::Span *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::DeterminantRadius > *|lsst::afw::geom::ellipses::SeparableConformalShearDeterminantRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::LogDeterminantRadius > *|lsst::afw::geom::ellipses::SeparableConformalShearLogDeterminantRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::LogTraceRadius > *|lsst::afw::geom::ellipses::SeparableConformalShearLogTraceRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ConformalShear,lsst::afw::geom::ellipses::TraceRadius > *|lsst::afw::geom::ellipses::SeparableConformalShearTraceRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::DeterminantRadius > *|lsst::afw::geom::ellipses::SeparableDistortionDeterminantRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogDeterminantRadius > *|lsst::afw::geom::ellipses::SeparableDistortionLogDeterminantRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogTraceRadius > *|lsst::afw::geom::ellipses::SeparableDistortionLogTraceRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::TraceRadius > *|lsst::afw::geom::ellipses::SeparableDistortionTraceRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::DeterminantRadius > *|lsst::afw::geom::ellipses::SeparableReducedShearDeterminantRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::LogDeterminantRadius > *|lsst::afw::geom::ellipses::SeparableReducedShearLogDeterminantRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::LogTraceRadius > *|lsst::afw::geom::ellipses::SeparableReducedShearLogTraceRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::ReducedShear,lsst::afw::geom::ellipses::TraceRadius > *|lsst::afw::geom::ellipses::SeparableReducedShearTraceRadius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__image__DefectBase = {"_p_lsst__afw__image__DefectBase", "lsst::afw::image::DefectBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__math__AnalyticKernel = {"_p_lsst__afw__math__AnalyticKernel", "lsst::afw::math::AnalyticKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Kernel = {"_p_lsst__afw__math__Kernel", "lsst::afw::math::Kernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__math__FixedKernel = {"_p_lsst__afw__math__FixedKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__DeltaFunctionKernel = {"_p_lsst__afw__math__DeltaFunctionKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__LinearCombinationKernel = {"_p_lsst__afw__math__LinearCombinationKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SeparableKernel = {"_p_lsst__afw__math__SeparableKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__LanczosWarpingKernel = {"_p_lsst__afw__math__LanczosWarpingKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__BilinearWarpingKernel = {"_p_lsst__afw__math__BilinearWarpingKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__NearestWarpingKernel = {"_p_lsst__afw__math__NearestWarpingKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SpatialCellCandidate = {"_p_lsst__afw__math__SpatialCellCandidate", "lsst::afw::math::SpatialCellCandidate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t = {"_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SpatialCellImageCandidateT_float_t = {"_p_lsst__afw__math__SpatialCellImageCandidateT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SpatialCellImageCandidateT_double_t = {"_p_lsst__afw__math__SpatialCellImageCandidateT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t = {"_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t", "lsst::afw::math::SpatialCellMaskedImageCandidate< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SpatialCellSet = {"_p_lsst__afw__math__SpatialCellSet", "lsst::afw::math::SpatialCellSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t = {"_p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t", "lsst::afw::table::BaseCatalog *|lsst::afw::table::CatalogT< lsst::afw::table::BaseRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t = {"_p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t", "lsst::afw::table::ExposureCatalogT< lsst::afw::table::ExposureRecord > *|lsst::afw::table::ExposureCatalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t = {"_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t", "lsst::afw::table::KeyTuple< lsst::afw::table::Centroid > *|lsst::meas::algorithms::CentroidAlgorithm::KeyTuple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t = {"_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t", "lsst::afw::table::KeyTuple< lsst::afw::table::Flux > *|lsst::meas::algorithms::FluxAlgorithm::KeyTuple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t = {"_p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t", "lsst::afw::table::KeyTuple< lsst::afw::table::Shape > *|lsst::meas::algorithms::ShapeAlgorithm::KeyTuple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__Schema = {"_p_lsst__afw__table__Schema", "lsst::afw::table::Schema *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t = {"_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t", "lsst::afw::table::SimpleCatalog *|lsst::afw::table::SortedCatalogT< lsst::afw::table::SimpleRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t = {"_p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t", "lsst::afw::table::SourceCatalog *|lsst::afw::table::SortedCatalogT< lsst::afw::table::SourceRecord > *|lsst::meas::algorithms::SizeMagnitudeStarSelector::SourceCatalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t = {"_p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t", "lsst::afw::table::SourceColumnView *|lsst::afw::table::SourceColumnViewT< lsst::afw::table::SourceRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__Persistable = {"_p_lsst__afw__table__io__Persistable", "lsst::afw::table::io::Persistable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__image__Wcs = {"_p_lsst__afw__image__Wcs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__CoaddInputs = {"_p_lsst__afw__image__CoaddInputs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__LanczosFunction1T_double_t = {"_p_lsst__afw__math__LanczosFunction1T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__LanczosFunction2T_double_t = {"_p_lsst__afw__math__LanczosFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__NullFunction1T_double_t = {"_p_lsst__afw__math__NullFunction1T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__NullFunction2T_double_t = {"_p_lsst__afw__math__NullFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__PolynomialFunction1T_double_t = {"_p_lsst__afw__math__PolynomialFunction1T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__PolynomialFunction2T_double_t = {"_p_lsst__afw__math__PolynomialFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__FunctionT_double_t = {"_p_lsst__afw__math__FunctionT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Function1T_double_t = {"_p_lsst__afw__math__Function1T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__GaussianFunction2T_double_t = {"_p_lsst__afw__math__GaussianFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__GaussianFunction1T_double_t = {"_p_lsst__afw__math__GaussianFunction1T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Chebyshev1Function2T_double_t = {"_p_lsst__afw__math__Chebyshev1Function2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Chebyshev1Function1T_double_t = {"_p_lsst__afw__math__Chebyshev1Function1T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Function2T_double_t = {"_p_lsst__afw__math__Function2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__TanWcs = {"_p_lsst__afw__image__TanWcs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__IntegerDeltaFunction2T_double_t = {"_p_lsst__afw__math__IntegerDeltaFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__BasePolynomialFunction2T_double_t = {"_p_lsst__afw__math__BasePolynomialFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__DoubleGaussianFunction2T_double_t = {"_p_lsst__afw__math__DoubleGaussianFunction2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__NullFunction2T_float_t = {"_p_lsst__afw__math__NullFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__NullFunction1T_float_t = {"_p_lsst__afw__math__NullFunction1T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__LanczosFunction2T_float_t = {"_p_lsst__afw__math__LanczosFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__LanczosFunction1T_float_t = {"_p_lsst__afw__math__LanczosFunction1T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__IntegerDeltaFunction2T_float_t = {"_p_lsst__afw__math__IntegerDeltaFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__GaussianFunction2T_float_t = {"_p_lsst__afw__math__GaussianFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__GaussianFunction1T_float_t = {"_p_lsst__afw__math__GaussianFunction1T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Chebyshev1Function2T_float_t = {"_p_lsst__afw__math__Chebyshev1Function2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Chebyshev1Function1T_float_t = {"_p_lsst__afw__math__Chebyshev1Function1T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Function2T_float_t = {"_p_lsst__afw__math__Function2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Function1T_float_t = {"_p_lsst__afw__math__Function1T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__FunctionT_float_t = {"_p_lsst__afw__math__FunctionT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__PolynomialFunction1T_float_t = {"_p_lsst__afw__math__PolynomialFunction1T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__PolynomialFunction2T_float_t = {"_p_lsst__afw__math__PolynomialFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__DoubleGaussianFunction2T_float_t = {"_p_lsst__afw__math__DoubleGaussianFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__BasePolynomialFunction2T_float_t = {"_p_lsst__afw__math__BasePolynomialFunction2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__Calib = {"_p_lsst__afw__image__Calib", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t", "lsst::afw::table::io::PersistableFacade< lsst::afw::detection::Psf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t", "lsst::afw::table::io::PersistableFacade< lsst::afw::math::AnalyticKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t", "lsst::afw::table::io::PersistableFacade< lsst::afw::math::Kernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t", "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::DoubleGaussianPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t", "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::ImagePsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t", "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::KernelPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t", "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::PcaPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t = {"_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t", "lsst::afw::table::io::PersistableFacade< lsst::meas::algorithms::SingleGaussianPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__daf__base__Citizen = {"_p_lsst__daf__base__Citizen", "lsst::daf::base::Citizen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t = {"_p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t = {"_p_lsst__afw__image__ExposureT_double_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__Background = {"_p_lsst__afw__math__Background", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__base__PropertySet = {"_p_lsst__daf__base__PropertySet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__Policy = {"_p_lsst__pex__policy__Policy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__base__PropertyList = {"_p_lsst__daf__base__PropertyList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t = {"_p_lsst__afw__image__ExposureT_int_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__Detector = {"_p_lsst__afw__cameraGeom__Detector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t = {"_p_lsst__afw__image__ExposureT_float_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__DecoratedImageT_unsigned_short_t = {"_p_lsst__afw__image__DecoratedImageT_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__XYTransformFromWcsPair = {"_p_lsst__afw__image__XYTransformFromWcsPair", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__detection__FootprintSet = {"_p_lsst__afw__detection__FootprintSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__BackgroundMI = {"_p_lsst__afw__math__BackgroundMI", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__persistence__DbTsvStorage = {"_p_lsst__daf__persistence__DbTsvStorage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__persistence__DbStorage = {"_p_lsst__daf__persistence__DbStorage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__persistence__Storage = {"_p_lsst__daf__persistence__Storage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__DetectorMosaic = {"_p_lsst__afw__cameraGeom__DetectorMosaic", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__persistence__LogicalLocation = {"_p_lsst__daf__persistence__LogicalLocation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__Definition = {"_p_lsst__pex__policy__Definition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__detection__Peak = {"_p_lsst__afw__detection__Peak", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__PolicySource = {"_p_lsst__pex__policy__PolicySource", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t = {"_p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__Dictionary = {"_p_lsst__pex__policy__Dictionary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__PolicyString = {"_p_lsst__pex__policy__PolicyString", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t = {"_p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__PolicyStringDestination = {"_p_lsst__pex__policy__PolicyStringDestination", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__PolicyStreamDestination = {"_p_lsst__pex__policy__PolicyStreamDestination", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__PolicyDestination = {"_p_lsst__pex__policy__PolicyDestination", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__XYTransform = {"_p_lsst__afw__geom__XYTransform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__IdentityXYTransform = {"_p_lsst__afw__geom__IdentityXYTransform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__InvertedXYTransform = {"_p_lsst__afw__geom__InvertedXYTransform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__RadialXYTransform = {"_p_lsst__afw__geom__RadialXYTransform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__DetectorXYTransform = {"_p_lsst__afw__cameraGeom__DetectorXYTransform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__SquaredExpCovariogramT_double_t = {"_p_lsst__afw__math__SquaredExpCovariogramT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__NeuralNetCovariogramT_double_t = {"_p_lsst__afw__math__NeuralNetCovariogramT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__math__CovariogramT_double_t = {"_p_lsst__afw__math__CovariogramT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageBaseT_double_t = {"_p_lsst__afw__image__ImageBaseT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageT_double_t = {"_p_lsst__afw__image__ImageT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__DecoratedImageT_double_t = {"_p_lsst__afw__image__DecoratedImageT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageSliceT_double_t = {"_p_lsst__afw__image__ImageSliceT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__Ccd = {"_p_lsst__afw__cameraGeom__Ccd", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__Raft = {"_p_lsst__afw__cameraGeom__Raft", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__UrnPolicyFile = {"_p_lsst__pex__policy__UrnPolicyFile", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__DefaultPolicyFile = {"_p_lsst__pex__policy__DefaultPolicyFile", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__PolicyFile = {"_p_lsst__pex__policy__PolicyFile", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__DecoratedImageT_float_t = {"_p_lsst__afw__image__DecoratedImageT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageT_float_t = {"_p_lsst__afw__image__ImageT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageBaseT_float_t = {"_p_lsst__afw__image__ImageBaseT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageSliceT_float_t = {"_p_lsst__afw__image__ImageSliceT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t = {"_p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__Camera = {"_p_lsst__afw__cameraGeom__Camera", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageBaseT_unsigned_long_t = {"_p_lsst__afw__image__ImageBaseT_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageT_unsigned_long_t = {"_p_lsst__afw__image__ImageT_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__DecoratedImageT_unsigned_long_t = {"_p_lsst__afw__image__DecoratedImageT_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageT_unsigned_short_t = {"_p_lsst__afw__image__ImageT_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageBaseT_unsigned_short_t = {"_p_lsst__afw__image__ImageBaseT_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__MaskT_unsigned_short_t = {"_p_lsst__afw__image__MaskT_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t = {"_p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__DecoratedImageT_int_t = {"_p_lsst__afw__image__DecoratedImageT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageT_int_t = {"_p_lsst__afw__image__ImageT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ImageBaseT_int_t = {"_p_lsst__afw__image__ImageBaseT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__cameraGeom__Amp = {"_p_lsst__afw__cameraGeom__Amp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t = {"_p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__persistence__Persistence = {"_p_lsst__daf__persistence__Persistence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__base__Persistable = {"_p_lsst__daf__base__Persistable", "lsst::daf::base::Persistable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__Algorithm = {"_p_lsst__meas__algorithms__Algorithm", "lsst::meas::algorithms::Algorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__AlgorithmControl = {"_p_lsst__meas__algorithms__AlgorithmControl", "lsst::meas::algorithms::AlgorithmControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ApertureFluxControl = {"_p_lsst__meas__algorithms__ApertureFluxControl", "lsst::meas::algorithms::ApertureFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__CentroidAlgorithm = {"_p_lsst__meas__algorithms__CentroidAlgorithm", "lsst::meas::algorithms::CentroidAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__CentroidControl = {"_p_lsst__meas__algorithms__CentroidControl", "lsst::meas::algorithms::CentroidControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ClassificationControl = {"_p_lsst__meas__algorithms__ClassificationControl", "lsst::meas::algorithms::ClassificationControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__CoaddPsf = {"_p_lsst__meas__algorithms__CoaddPsf", "lsst::meas::algorithms::CoaddPsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__CorrectFluxesControl = {"_p_lsst__meas__algorithms__CorrectFluxesControl", "lsst::meas::algorithms::CorrectFluxesControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__Defect = {"_p_lsst__meas__algorithms__Defect", "lsst::meas::algorithms::Defect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__DoubleGaussianPsf = {"_p_lsst__meas__algorithms__DoubleGaussianPsf", "lsst::meas::algorithms::DoubleGaussianPsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__EllipticalApertureFluxControl = {"_p_lsst__meas__algorithms__EllipticalApertureFluxControl", "lsst::meas::algorithms::EllipticalApertureFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__FluxAlgorithm = {"_p_lsst__meas__algorithms__FluxAlgorithm", "lsst::meas::algorithms::FluxAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__FluxControl = {"_p_lsst__meas__algorithms__FluxControl", "lsst::meas::algorithms::FluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__GaussianCentroidControl = {"_p_lsst__meas__algorithms__GaussianCentroidControl", "lsst::meas::algorithms::GaussianCentroidControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__GaussianFluxControl = {"_p_lsst__meas__algorithms__GaussianFluxControl", "lsst::meas::algorithms::GaussianFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ImagePsf = {"_p_lsst__meas__algorithms__ImagePsf", "lsst::meas::algorithms::ImagePsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__KernelPsf = {"_p_lsst__meas__algorithms__KernelPsf", "lsst::meas::algorithms::KernelPsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__LocalShapeletKernel = {"_p_lsst__meas__algorithms__LocalShapeletKernel", "lsst::meas::algorithms::LocalShapeletKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__MeasureSources = {"_p_lsst__meas__algorithms__MeasureSources", "lsst::meas::algorithms::MeasureSources *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__MeasureSourcesBuilder = {"_p_lsst__meas__algorithms__MeasureSourcesBuilder", "lsst::meas::algorithms::MeasureSourcesBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__NaiveCentroidControl = {"_p_lsst__meas__algorithms__NaiveCentroidControl", "lsst::meas::algorithms::NaiveCentroidControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__NaiveFluxControl = {"_p_lsst__meas__algorithms__NaiveFluxControl", "lsst::meas::algorithms::NaiveFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__PcaPsf = {"_p_lsst__meas__algorithms__PcaPsf", "lsst::meas::algorithms::PcaPsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__PeakLikelihoodFluxControl = {"_p_lsst__meas__algorithms__PeakLikelihoodFluxControl", "lsst::meas::algorithms::PeakLikelihoodFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__PixelFlagControl = {"_p_lsst__meas__algorithms__PixelFlagControl", "lsst::meas::algorithms::PixelFlagControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__PsfAttributes = {"_p_lsst__meas__algorithms__PsfAttributes", "lsst::meas::algorithms::PsfAttributes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__PsfCandidateT_float_t = {"_p_lsst__meas__algorithms__PsfCandidateT_float_t", "lsst::meas::algorithms::PsfCandidate< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__PsfFluxControl = {"_p_lsst__meas__algorithms__PsfFluxControl", "lsst::meas::algorithms::PsfFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__RecordCentroidControl = {"_p_lsst__meas__algorithms__RecordCentroidControl", "lsst::meas::algorithms::RecordCentroidControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SdssCentroidControl = {"_p_lsst__meas__algorithms__SdssCentroidControl", "lsst::meas::algorithms::SdssCentroidControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SdssShapeControl = {"_p_lsst__meas__algorithms__SdssShapeControl", "lsst::meas::algorithms::SdssShapeControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ShapeAlgorithm = {"_p_lsst__meas__algorithms__ShapeAlgorithm", "lsst::meas::algorithms::ShapeAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ShapeControl = {"_p_lsst__meas__algorithms__ShapeControl", "lsst::meas::algorithms::ShapeControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__Shapelet = {"_p_lsst__meas__algorithms__Shapelet", "lsst::meas::algorithms::Shapelet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ShapeletInterpolation = {"_p_lsst__meas__algorithms__ShapeletInterpolation", "lsst::meas::algorithms::ShapeletInterpolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ShapeletKernel = {"_p_lsst__meas__algorithms__ShapeletKernel", "lsst::meas::algorithms::ShapeletKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__ShapeletPsfCandidate = {"_p_lsst__meas__algorithms__ShapeletPsfCandidate", "lsst::meas::algorithms::ShapeletPsfCandidate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SincFluxControl = {"_p_lsst__meas__algorithms__SincFluxControl", "lsst::meas::algorithms::SincFluxControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SingleGaussianPsf = {"_p_lsst__meas__algorithms__SingleGaussianPsf", "lsst::meas::algorithms::SingleGaussianPsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SizeMagnitudeStarSelector = {"_p_lsst__meas__algorithms__SizeMagnitudeStarSelector", "lsst::meas::algorithms::SizeMagnitudeStarSelector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList = {"_p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList", "lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateT::PtrList *|lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__SkyCoordControl = {"_p_lsst__meas__algorithms__SkyCoordControl", "lsst::meas::algorithms::SkyCoordControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__WarpedPsf = {"_p_lsst__meas__algorithms__WarpedPsf", "lsst::meas::algorithms::WarpedPsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t = {"_p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t", "lsst::meas::algorithms::photometry::SincCoeffs< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t = {"_p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t", "lsst::meas::algorithms::photometry::SincCoeffs< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__meas__algorithms__shapelet__BVec = {"_p_lsst__meas__algorithms__shapelet__BVec", "lsst::meas::algorithms::shapelet::BVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__DomainErrorException = {"_p_lsst__pex__exceptions__DomainErrorException", "lsst::pex::exceptions::DomainErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__DictionaryError = {"_p_lsst__pex__policy__DictionaryError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__TypeError = {"_p_lsst__pex__policy__TypeError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__InvalidParameterException = {"_p_lsst__pex__exceptions__InvalidParameterException", "lsst::pex::exceptions::InvalidParameterException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__IoErrorException = {"_p_lsst__pex__exceptions__IoErrorException", "lsst::pex::exceptions::IoErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__PersistenceError = {"_p_lsst__afw__table__io__PersistenceError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__table__io__MalformedArchiveError = {"_p_lsst__afw__table__io__MalformedArchiveError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__LengthErrorException = {"_p_lsst__pex__exceptions__LengthErrorException", "lsst::pex::exceptions::LengthErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__LogicErrorException = {"_p_lsst__pex__exceptions__LogicErrorException", "lsst::pex::exceptions::LogicErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__ValidationError = {"_p_lsst__pex__policy__ValidationError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__base__TypeMismatchException = {"_p_lsst__daf__base__TypeMismatchException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__MemoryException = {"_p_lsst__pex__exceptions__MemoryException", "lsst::pex::exceptions::MemoryException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__NotFoundException = {"_p_lsst__pex__exceptions__NotFoundException", "lsst::pex::exceptions::NotFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__NameNotFound = {"_p_lsst__pex__policy__NameNotFound", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__OutOfRangeException = {"_p_lsst__pex__exceptions__OutOfRangeException", "lsst::pex::exceptions::OutOfRangeException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__OverflowErrorException = {"_p_lsst__pex__exceptions__OverflowErrorException", "lsst::pex::exceptions::OverflowErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__RangeErrorException = {"_p_lsst__pex__exceptions__RangeErrorException", "lsst::pex::exceptions::RangeErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__RuntimeErrorException = {"_p_lsst__pex__exceptions__RuntimeErrorException", "lsst::pex::exceptions::RuntimeErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__EOFError = {"_p_lsst__pex__policy__EOFError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__UnsupportedSyntax = {"_p_lsst__pex__policy__UnsupportedSyntax", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__BadNameError = {"_p_lsst__pex__policy__BadNameError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__FormatSyntaxError = {"_p_lsst__pex__policy__FormatSyntaxError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__SyntaxError = {"_p_lsst__pex__policy__SyntaxError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__ParserError = {"_p_lsst__pex__policy__ParserError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__TimeoutException = {"_p_lsst__pex__exceptions__TimeoutException", "lsst::pex::exceptions::TimeoutException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__UnderflowErrorException = {"_p_lsst__pex__exceptions__UnderflowErrorException", "lsst::pex::exceptions::UnderflowErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__logging__LogRec = {"_p_lsst__pex__logging__LogRec", "lsst::pex::logging::Rec *|lsst::pex::logging::LogRec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_memId = {"_p_memId", "memId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_result_type = {"_p_result_type", "result_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reverse_iterator = {"_p_reverse_iterator", "reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t = {"_p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t", "std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > *|std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t = {"_p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t", "std::list< boost::shared_ptr< lsst::meas::algorithms::Algorithm const >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Algorithm const > > > *|lsst::meas::algorithms::MeasureSources::AlgorithmList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t", "lsst::meas::algorithms::AlgorithmMap *|std::map< std::string,boost::shared_ptr< lsst::meas::algorithms::Algorithm const >,std::less< std::string >,std::allocator< std::pair< std::string const,boost::shared_ptr< lsst::meas::algorithms::Algorithm const > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t = {"_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t", "std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > *|lsst::afw::image::detail::MaskPlaneDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_double_t = {"_p_std__pairT_bool_double_t", "std::pair< bool,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t = {"_p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t", "std::pair< lsst::afw::math::Kernel::Ptr,std::pair< double,double > > *|std::pair< boost::shared_ptr< lsst::afw::math::Kernel >,std::pair< double,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t", "std::pair< lsst::afw::math::LinearCombinationKernel::Ptr,std::vector< double > > *|std::pair< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double > > *|std::pair< boost::shared_ptr< lsst::afw::math::LinearCombinationKernel >,std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t = {"_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t", "std::pair< std::vector< double >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > *|std::pair< std::vector< double >,lsst::afw::math::KernelList > *|std::pair< std::vector< double,std::allocator< double > >,std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t = {"_p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t", "std::vector< Defect::Ptr > *|std::vector< Defect::Ptr,std::allocator< Defect::Ptr > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t", "lsst::afw::math::KernelList *|std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t", "std::vector< lsst::meas::algorithms::Defect::Ptr > *|std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect > > *|std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t = {"_p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t", "std::vector< lsst::pex::exceptions::Tracepoint,std::allocator< lsst::pex::exceptions::Tracepoint > > *|lsst::pex::exceptions::Traceback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streamoff = {"_p_streamoff", "std::basic_ostream< char >::off_type *|std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streampos = {"_p_streampos", "std::basic_ostream< char >::pos_type *|std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streamsize = {"_p_streamsize", "streamsize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint_least32_t *|uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "uintptr_t *|uint_least64_t *|uint_fast32_t *|uint_fast64_t *|uint64_t *|unsigned long *|uint_fast16_t *|uintmax_t *|lsst::afw::detection::FootprintIdPixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|lsst::afw::image::MaskPixel *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_x_iterator = {"_p_x_iterator", "x_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xy_locator = {"_p_xy_locator", "xy_locator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xy_x_iterator = {"_p_xy_x_iterator", "xy_x_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xy_y_iterator = {"_p_xy_y_iterator", "xy_y_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_y_iterator = {"_p_y_iterator", "y_iterator *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AffineTransform,
  &_swigt__p_AlgorithmList,
  &_swigt__p_AmpSet,
  &_swigt__p_Array,
  &_swigt__p_BoolArray,
  &_swigt__p_Builder,
  &_swigt__p_CandidateList,
  &_swigt__p_Catalog,
  &_swigt__p_CellList,
  &_swigt__p_CoeffT,
  &_swigt__p_ColumnView,
  &_swigt__p_ConstArray,
  &_swigt__p_ConstCatalog,
  &_swigt__p_ConstDictPtr,
  &_swigt__p_ConstPolicyPtrArray,
  &_swigt__p_ConstPtr,
  &_swigt__p_DetectorSet,
  &_swigt__p_DictPtr,
  &_swigt__p_DoubleArray,
  &_swigt__p_EigenVector,
  &_swigt__p_Element,
  &_swigt__p_Ellipticity,
  &_swigt__p_ErrKey,
  &_swigt__p_ErrValue,
  &_swigt__p_Exposure,
  &_swigt__p_Extent,
  &_swigt__p_FilePtr,
  &_swigt__p_FilePtrArray,
  &_swigt__p_FootprintList,
  &_swigt__p_Function1Ptr,
  &_swigt__p_Function2Ptr,
  &_swigt__p_Image,
  &_swigt__p_ImageConstPtr,
  &_swigt__p_ImageList,
  &_swigt__p_ImagePtr,
  &_swigt__p_ImageT,
  &_swigt__p_IntArray,
  &_swigt__p_IntT,
  &_swigt__p_InternalPixelT,
  &_swigt__p_Iterator,
  &_swigt__p_Jacobian,
  &_swigt__p_KernelFunction,
  &_swigt__p_KernelFunctionPtr,
  &_swigt__p_KeyTuple,
  &_swigt__p_List,
  &_swigt__p_Mask,
  &_swigt__p_MaskPixel,
  &_swigt__p_MaskPlaneDict,
  &_swigt__p_MaskPtr,
  &_swigt__p_MaskedImageT,
  &_swigt__p_Matrix,
  &_swigt__p_MeasKey,
  &_swigt__p_MeasValue,
  &_swigt__p_NullSpatialFunction,
  &_swigt__p_OutPixelT,
  &_swigt__p_ParameterVector,
  &_swigt__p_PeakList,
  &_swigt__p_Pixel,
  &_swigt__p_PixelConstReference,
  &_swigt__p_PixelReference,
  &_swigt__p_PixelT,
  &_swigt__p_Point,
  &_swigt__p_Point2D,
  &_swigt__p_PointD,
  &_swigt__p_Policy,
  &_swigt__p_PolicyPtrArray,
  &_swigt__p_ProductDerivativeMatrix,
  &_swigt__p_PsfCandidateList,
  &_swigt__p_PsfCandidateT,
  &_swigt__p_Ptr,
  &_swigt__p_PtrList,
  &_swigt__p_Quadrupole,
  &_swigt__p_Radius,
  &_swigt__p_Record,
  &_swigt__p_Shapelet,
  &_swigt__p_ShapeletCovariance,
  &_swigt__p_ShapeletVector,
  &_swigt__p_SinglePixel,
  &_swigt__p_Source,
  &_swigt__p_SourceCatalog,
  &_swigt__p_SourceRecord,
  &_swigt__p_SourceTable,
  &_swigt__p_SpanList,
  &_swigt__p_SpatialCellSet,
  &_swigt__p_SpatialFunction,
  &_swigt__p_SpatialFunctionPtr,
  &_swigt__p_StreamPtr,
  &_swigt__p_StringArray,
  &_swigt__p_Table,
  &_swigt__p_TransformDerivativeMatrix,
  &_swigt__p_Value,
  &_swigt__p_Variance,
  &_swigt__p_VariancePtr,
  &_swigt__p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t,
  &_swigt__p_Wcs,
  &_swigt__p_afw__geom__ellipses__Axes,
  &_swigt__p_afw__geom__ellipses__Ellipse,
  &_swigt__p_afw__image__ExposureT_PixelT_t,
  &_swigt__p_afw__table__SourceRecord,
  &_swigt__p_allocator_type,
  &_swigt__p_argument_type,
  &_swigt__p_base,
  &_swigt__p_bool,
  &_swigt__p_boost__shared_ptrT_Eigen__MatrixXd_const_t,
  &_swigt__p_boost__shared_ptrT_afw__image__Wcs_const_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__Coord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__Span_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Background_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Interpolate_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__BaseTable_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__IdFactory_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__Citizen_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__Persistable_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t,
  &_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t,
  &_swigt__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t,
  &_swigt__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t,
  &_swigt__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reference,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_const_x_iterator,
  &_swigt__p_const_xy_locator,
  &_swigt__p_const_y_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_fast_iterator,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_image_category,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_iterator,
  &_swigt__p_kernel_fill_factor,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_lsst__afw__cameraGeom__Amp,
  &_swigt__p_lsst__afw__cameraGeom__Camera,
  &_swigt__p_lsst__afw__cameraGeom__Ccd,
  &_swigt__p_lsst__afw__cameraGeom__Detector,
  &_swigt__p_lsst__afw__cameraGeom__DetectorMosaic,
  &_swigt__p_lsst__afw__cameraGeom__DetectorXYTransform,
  &_swigt__p_lsst__afw__cameraGeom__Raft,
  &_swigt__p_lsst__afw__coord__Coord,
  &_swigt__p_lsst__afw__coord__EclipticCoord,
  &_swigt__p_lsst__afw__coord__Fk5Coord,
  &_swigt__p_lsst__afw__coord__GalacticCoord,
  &_swigt__p_lsst__afw__coord__IcrsCoord,
  &_swigt__p_lsst__afw__coord__TopocentricCoord,
  &_swigt__p_lsst__afw__detection__Footprint,
  &_swigt__p_lsst__afw__detection__FootprintSet,
  &_swigt__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t,
  &_swigt__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t,
  &_swigt__p_lsst__afw__detection__Peak,
  &_swigt__p_lsst__afw__detection__Psf,
  &_swigt__p_lsst__afw__fits__FitsError,
  &_swigt__p_lsst__afw__fits__FitsTypeError,
  &_swigt__p_lsst__afw__fits__MemFileManager,
  &_swigt__p_lsst__afw__geom__Angle,
  &_swigt__p_lsst__afw__geom__Box2D,
  &_swigt__p_lsst__afw__geom__Box2I,
  &_swigt__p_lsst__afw__geom__CoordinateExprT_2_t,
  &_swigt__p_lsst__afw__geom__CoordinateExprT_3_t,
  &_swigt__p_lsst__afw__geom__ExtentT_double_2_t,
  &_swigt__p_lsst__afw__geom__ExtentT_double_3_t,
  &_swigt__p_lsst__afw__geom__ExtentT_int_2_t,
  &_swigt__p_lsst__afw__geom__ExtentT_int_3_t,
  &_swigt__p_lsst__afw__geom__IdentityXYTransform,
  &_swigt__p_lsst__afw__geom__InvertedXYTransform,
  &_swigt__p_lsst__afw__geom__PointT_double_2_t,
  &_swigt__p_lsst__afw__geom__PointT_double_3_t,
  &_swigt__p_lsst__afw__geom__PointT_int_2_t,
  &_swigt__p_lsst__afw__geom__PointT_int_3_t,
  &_swigt__p_lsst__afw__geom__RadialXYTransform,
  &_swigt__p_lsst__afw__geom__Span,
  &_swigt__p_lsst__afw__geom__XYTransform,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t,
  &_swigt__p_lsst__afw__image__Calib,
  &_swigt__p_lsst__afw__image__CoaddInputs,
  &_swigt__p_lsst__afw__image__DecoratedImageT_double_t,
  &_swigt__p_lsst__afw__image__DecoratedImageT_float_t,
  &_swigt__p_lsst__afw__image__DecoratedImageT_int_t,
  &_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_long_t,
  &_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_short_t,
  &_swigt__p_lsst__afw__image__DefectBase,
  &_swigt__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__ImageBaseT_double_t,
  &_swigt__p_lsst__afw__image__ImageBaseT_float_t,
  &_swigt__p_lsst__afw__image__ImageBaseT_int_t,
  &_swigt__p_lsst__afw__image__ImageBaseT_unsigned_long_t,
  &_swigt__p_lsst__afw__image__ImageBaseT_unsigned_short_t,
  &_swigt__p_lsst__afw__image__ImageSliceT_double_t,
  &_swigt__p_lsst__afw__image__ImageSliceT_float_t,
  &_swigt__p_lsst__afw__image__ImageT_double_t,
  &_swigt__p_lsst__afw__image__ImageT_float_t,
  &_swigt__p_lsst__afw__image__ImageT_int_t,
  &_swigt__p_lsst__afw__image__ImageT_unsigned_long_t,
  &_swigt__p_lsst__afw__image__ImageT_unsigned_short_t,
  &_swigt__p_lsst__afw__image__MaskT_unsigned_short_t,
  &_swigt__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t,
  &_swigt__p_lsst__afw__image__TanWcs,
  &_swigt__p_lsst__afw__image__Wcs,
  &_swigt__p_lsst__afw__image__XYTransformFromWcsPair,
  &_swigt__p_lsst__afw__math__AnalyticKernel,
  &_swigt__p_lsst__afw__math__Background,
  &_swigt__p_lsst__afw__math__BackgroundMI,
  &_swigt__p_lsst__afw__math__BasePolynomialFunction2T_double_t,
  &_swigt__p_lsst__afw__math__BasePolynomialFunction2T_float_t,
  &_swigt__p_lsst__afw__math__BilinearWarpingKernel,
  &_swigt__p_lsst__afw__math__Chebyshev1Function1T_double_t,
  &_swigt__p_lsst__afw__math__Chebyshev1Function1T_float_t,
  &_swigt__p_lsst__afw__math__Chebyshev1Function2T_double_t,
  &_swigt__p_lsst__afw__math__Chebyshev1Function2T_float_t,
  &_swigt__p_lsst__afw__math__CovariogramT_double_t,
  &_swigt__p_lsst__afw__math__DeltaFunctionKernel,
  &_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_double_t,
  &_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_float_t,
  &_swigt__p_lsst__afw__math__FixedKernel,
  &_swigt__p_lsst__afw__math__Function1T_double_t,
  &_swigt__p_lsst__afw__math__Function1T_float_t,
  &_swigt__p_lsst__afw__math__Function2T_double_t,
  &_swigt__p_lsst__afw__math__Function2T_float_t,
  &_swigt__p_lsst__afw__math__FunctionT_double_t,
  &_swigt__p_lsst__afw__math__FunctionT_float_t,
  &_swigt__p_lsst__afw__math__GaussianFunction1T_double_t,
  &_swigt__p_lsst__afw__math__GaussianFunction1T_float_t,
  &_swigt__p_lsst__afw__math__GaussianFunction2T_double_t,
  &_swigt__p_lsst__afw__math__GaussianFunction2T_float_t,
  &_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_double_t,
  &_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_float_t,
  &_swigt__p_lsst__afw__math__Kernel,
  &_swigt__p_lsst__afw__math__LanczosFunction1T_double_t,
  &_swigt__p_lsst__afw__math__LanczosFunction1T_float_t,
  &_swigt__p_lsst__afw__math__LanczosFunction2T_double_t,
  &_swigt__p_lsst__afw__math__LanczosFunction2T_float_t,
  &_swigt__p_lsst__afw__math__LanczosWarpingKernel,
  &_swigt__p_lsst__afw__math__LinearCombinationKernel,
  &_swigt__p_lsst__afw__math__NearestWarpingKernel,
  &_swigt__p_lsst__afw__math__NeuralNetCovariogramT_double_t,
  &_swigt__p_lsst__afw__math__NullFunction1T_double_t,
  &_swigt__p_lsst__afw__math__NullFunction1T_float_t,
  &_swigt__p_lsst__afw__math__NullFunction2T_double_t,
  &_swigt__p_lsst__afw__math__NullFunction2T_float_t,
  &_swigt__p_lsst__afw__math__PolynomialFunction1T_double_t,
  &_swigt__p_lsst__afw__math__PolynomialFunction1T_float_t,
  &_swigt__p_lsst__afw__math__PolynomialFunction2T_double_t,
  &_swigt__p_lsst__afw__math__PolynomialFunction2T_float_t,
  &_swigt__p_lsst__afw__math__SeparableKernel,
  &_swigt__p_lsst__afw__math__SpatialCellCandidate,
  &_swigt__p_lsst__afw__math__SpatialCellImageCandidateT_double_t,
  &_swigt__p_lsst__afw__math__SpatialCellImageCandidateT_float_t,
  &_swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t,
  &_swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t,
  &_swigt__p_lsst__afw__math__SpatialCellSet,
  &_swigt__p_lsst__afw__math__SquaredExpCovariogramT_double_t,
  &_swigt__p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t,
  &_swigt__p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t,
  &_swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t,
  &_swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t,
  &_swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t,
  &_swigt__p_lsst__afw__table__Schema,
  &_swigt__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t,
  &_swigt__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t,
  &_swigt__p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t,
  &_swigt__p_lsst__afw__table__io__MalformedArchiveError,
  &_swigt__p_lsst__afw__table__io__Persistable,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t,
  &_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t,
  &_swigt__p_lsst__afw__table__io__PersistenceError,
  &_swigt__p_lsst__daf__base__Citizen,
  &_swigt__p_lsst__daf__base__Persistable,
  &_swigt__p_lsst__daf__base__PropertyList,
  &_swigt__p_lsst__daf__base__PropertySet,
  &_swigt__p_lsst__daf__base__TypeMismatchException,
  &_swigt__p_lsst__daf__persistence__DbStorage,
  &_swigt__p_lsst__daf__persistence__DbTsvStorage,
  &_swigt__p_lsst__daf__persistence__LogicalLocation,
  &_swigt__p_lsst__daf__persistence__Persistence,
  &_swigt__p_lsst__daf__persistence__Storage,
  &_swigt__p_lsst__meas__algorithms__Algorithm,
  &_swigt__p_lsst__meas__algorithms__AlgorithmControl,
  &_swigt__p_lsst__meas__algorithms__ApertureFluxControl,
  &_swigt__p_lsst__meas__algorithms__CentroidAlgorithm,
  &_swigt__p_lsst__meas__algorithms__CentroidControl,
  &_swigt__p_lsst__meas__algorithms__ClassificationControl,
  &_swigt__p_lsst__meas__algorithms__CoaddPsf,
  &_swigt__p_lsst__meas__algorithms__CorrectFluxesControl,
  &_swigt__p_lsst__meas__algorithms__Defect,
  &_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf,
  &_swigt__p_lsst__meas__algorithms__EllipticalApertureFluxControl,
  &_swigt__p_lsst__meas__algorithms__FluxAlgorithm,
  &_swigt__p_lsst__meas__algorithms__FluxControl,
  &_swigt__p_lsst__meas__algorithms__GaussianCentroidControl,
  &_swigt__p_lsst__meas__algorithms__GaussianFluxControl,
  &_swigt__p_lsst__meas__algorithms__ImagePsf,
  &_swigt__p_lsst__meas__algorithms__KernelPsf,
  &_swigt__p_lsst__meas__algorithms__LocalShapeletKernel,
  &_swigt__p_lsst__meas__algorithms__MeasureSources,
  &_swigt__p_lsst__meas__algorithms__MeasureSourcesBuilder,
  &_swigt__p_lsst__meas__algorithms__NaiveCentroidControl,
  &_swigt__p_lsst__meas__algorithms__NaiveFluxControl,
  &_swigt__p_lsst__meas__algorithms__PcaPsf,
  &_swigt__p_lsst__meas__algorithms__PeakLikelihoodFluxControl,
  &_swigt__p_lsst__meas__algorithms__PixelFlagControl,
  &_swigt__p_lsst__meas__algorithms__PsfAttributes,
  &_swigt__p_lsst__meas__algorithms__PsfCandidateT_float_t,
  &_swigt__p_lsst__meas__algorithms__PsfFluxControl,
  &_swigt__p_lsst__meas__algorithms__RecordCentroidControl,
  &_swigt__p_lsst__meas__algorithms__SdssCentroidControl,
  &_swigt__p_lsst__meas__algorithms__SdssShapeControl,
  &_swigt__p_lsst__meas__algorithms__ShapeAlgorithm,
  &_swigt__p_lsst__meas__algorithms__ShapeControl,
  &_swigt__p_lsst__meas__algorithms__Shapelet,
  &_swigt__p_lsst__meas__algorithms__ShapeletInterpolation,
  &_swigt__p_lsst__meas__algorithms__ShapeletKernel,
  &_swigt__p_lsst__meas__algorithms__ShapeletPsfCandidate,
  &_swigt__p_lsst__meas__algorithms__SincFluxControl,
  &_swigt__p_lsst__meas__algorithms__SingleGaussianPsf,
  &_swigt__p_lsst__meas__algorithms__SizeMagnitudeStarSelector,
  &_swigt__p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList,
  &_swigt__p_lsst__meas__algorithms__SkyCoordControl,
  &_swigt__p_lsst__meas__algorithms__WarpedPsf,
  &_swigt__p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t,
  &_swigt__p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t,
  &_swigt__p_lsst__meas__algorithms__shapelet__BVec,
  &_swigt__p_lsst__pex__exceptions__DomainErrorException,
  &_swigt__p_lsst__pex__exceptions__InvalidParameterException,
  &_swigt__p_lsst__pex__exceptions__IoErrorException,
  &_swigt__p_lsst__pex__exceptions__LengthErrorException,
  &_swigt__p_lsst__pex__exceptions__LogicErrorException,
  &_swigt__p_lsst__pex__exceptions__MemoryException,
  &_swigt__p_lsst__pex__exceptions__NotFoundException,
  &_swigt__p_lsst__pex__exceptions__OutOfRangeException,
  &_swigt__p_lsst__pex__exceptions__OverflowErrorException,
  &_swigt__p_lsst__pex__exceptions__RangeErrorException,
  &_swigt__p_lsst__pex__exceptions__RuntimeErrorException,
  &_swigt__p_lsst__pex__exceptions__TimeoutException,
  &_swigt__p_lsst__pex__exceptions__UnderflowErrorException,
  &_swigt__p_lsst__pex__logging__LogRec,
  &_swigt__p_lsst__pex__policy__BadNameError,
  &_swigt__p_lsst__pex__policy__DefaultPolicyFile,
  &_swigt__p_lsst__pex__policy__Definition,
  &_swigt__p_lsst__pex__policy__Dictionary,
  &_swigt__p_lsst__pex__policy__DictionaryError,
  &_swigt__p_lsst__pex__policy__EOFError,
  &_swigt__p_lsst__pex__policy__FormatSyntaxError,
  &_swigt__p_lsst__pex__policy__NameNotFound,
  &_swigt__p_lsst__pex__policy__ParserError,
  &_swigt__p_lsst__pex__policy__Policy,
  &_swigt__p_lsst__pex__policy__PolicyDestination,
  &_swigt__p_lsst__pex__policy__PolicyFile,
  &_swigt__p_lsst__pex__policy__PolicySource,
  &_swigt__p_lsst__pex__policy__PolicyStreamDestination,
  &_swigt__p_lsst__pex__policy__PolicyString,
  &_swigt__p_lsst__pex__policy__PolicyStringDestination,
  &_swigt__p_lsst__pex__policy__SyntaxError,
  &_swigt__p_lsst__pex__policy__TypeError,
  &_swigt__p_lsst__pex__policy__UnsupportedSyntax,
  &_swigt__p_lsst__pex__policy__UrnPolicyFile,
  &_swigt__p_lsst__pex__policy__ValidationError,
  &_swigt__p_mapped_type,
  &_swigt__p_memId,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_reference,
  &_swigt__p_result_type,
  &_swigt__p_reverse_iterator,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t,
  &_swigt__p_std__locale,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t,
  &_swigt__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t,
  &_swigt__p_std__pairT_bool_double_t,
  &_swigt__p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t,
  &_swigt__p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t,
  &_swigt__p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t,
  &_swigt__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t,
  &_swigt__p_streamoff,
  &_swigt__p_streampos,
  &_swigt__p_streamsize,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_x_iterator,
  &_swigt__p_xy_locator,
  &_swigt__p_xy_x_iterator,
  &_swigt__p_xy_y_iterator,
  &_swigt__p_y_iterator,
};

static swig_cast_info _swigc__p_AffineTransform[] = {  {&_swigt__p_AffineTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AlgorithmList[] = {  {&_swigt__p_AlgorithmList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AmpSet[] = {  {&_swigt__p_AmpSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Array[] = {  {&_swigt__p_Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoolArray[] = {  {&_swigt__p_BoolArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Builder[] = {  {&_swigt__p_Builder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CandidateList[] = {  {&_swigt__p_CandidateList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Catalog[] = {  {&_swigt__p_Catalog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CellList[] = {  {&_swigt__p_CellList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoeffT[] = {  {&_swigt__p_CoeffT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ColumnView[] = {  {&_swigt__p_ColumnView, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstArray[] = {  {&_swigt__p_ConstArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstCatalog[] = {  {&_swigt__p_ConstCatalog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstDictPtr[] = {  {&_swigt__p_ConstDictPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstPolicyPtrArray[] = {  {&_swigt__p_ConstPolicyPtrArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstPtr[] = {  {&_swigt__p_ConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DetectorSet[] = {  {&_swigt__p_DetectorSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DictPtr[] = {  {&_swigt__p_DictPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DoubleArray[] = {  {&_swigt__p_DoubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EigenVector[] = {  {&_swigt__p_EigenVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Element[] = {  {&_swigt__p_Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ellipticity[] = {  {&_swigt__p_Ellipticity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ErrKey[] = {  {&_swigt__p_ErrKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ErrValue[] = {  {&_swigt__p_ErrValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exposure[] = {  {&_swigt__p_Exposure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Extent[] = {  {&_swigt__p_Extent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilePtr[] = {  {&_swigt__p_FilePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilePtrArray[] = {  {&_swigt__p_FilePtrArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FootprintList[] = {  {&_swigt__p_FootprintList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Function1Ptr[] = {  {&_swigt__p_Function1Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Function2Ptr[] = {  {&_swigt__p_Function2Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Image[] = {  {&_swigt__p_Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageConstPtr[] = {  {&_swigt__p_ImageConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageList[] = {  {&_swigt__p_ImageList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImagePtr[] = {  {&_swigt__p_ImagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageT[] = {  {&_swigt__p_ImageT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntArray[] = {  {&_swigt__p_IntArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntT[] = {  {&_swigt__p_IntT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InternalPixelT[] = {  {&_swigt__p_InternalPixelT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Iterator[] = {  {&_swigt__p_Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Jacobian[] = {  {&_swigt__p_Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KernelFunction[] = {  {&_swigt__p_KernelFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KernelFunctionPtr[] = {  {&_swigt__p_KernelFunctionPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyTuple[] = {  {&_swigt__p_KeyTuple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_List[] = {  {&_swigt__p_List, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mask[] = {  {&_swigt__p_Mask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPixel[] = {  {&_swigt__p_MaskPixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPlaneDict[] = {  {&_swigt__p_MaskPlaneDict, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPtr[] = {  {&_swigt__p_MaskPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskedImageT[] = {  {&_swigt__p_MaskedImageT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeasKey[] = {  {&_swigt__p_MeasKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeasValue[] = {  {&_swigt__p_MeasValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NullSpatialFunction[] = {  {&_swigt__p_NullSpatialFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OutPixelT[] = {  {&_swigt__p_OutPixelT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterVector[] = {  {&_swigt__p_ParameterVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakList[] = {  {&_swigt__p_PeakList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixel[] = {  {&_swigt__p_Pixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PixelConstReference[] = {  {&_swigt__p_PixelConstReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PixelReference[] = {  {&_swigt__p_PixelReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PixelT[] = {  {&_swigt__p_PixelT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Point[] = {  {&_swigt__p_Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Point2D[] = {  {&_swigt__p_Point2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointD[] = {  {&_swigt__p_PointD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Policy[] = {  {&_swigt__p_Policy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolicyPtrArray[] = {  {&_swigt__p_PolicyPtrArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProductDerivativeMatrix[] = {  {&_swigt__p_ProductDerivativeMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PsfCandidateList[] = {  {&_swigt__p_PsfCandidateList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PsfCandidateT[] = {  {&_swigt__p_PsfCandidateT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptr[] = {  {&_swigt__p_Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PtrList[] = {  {&_swigt__p_PtrList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quadrupole[] = {  {&_swigt__p_Quadrupole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Radius[] = {  {&_swigt__p_Radius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Record[] = {  {&_swigt__p_Record, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Shapelet[] = {  {&_swigt__p_Shapelet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShapeletCovariance[] = {  {&_swigt__p_ShapeletCovariance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShapeletVector[] = {  {&_swigt__p_ShapeletVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SinglePixel[] = {  {&_swigt__p_SinglePixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Source[] = {  {&_swigt__p_Source, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceCatalog[] = {  {&_swigt__p_SourceCatalog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceRecord[] = {  {&_swigt__p_SourceRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceTable[] = {  {&_swigt__p_SourceTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpanList[] = {  {&_swigt__p_SpanList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpatialCellSet[] = {  {&_swigt__p_SpatialCellSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpatialFunction[] = {  {&_swigt__p_SpatialFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpatialFunctionPtr[] = {  {&_swigt__p_SpatialFunctionPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamPtr[] = {  {&_swigt__p_StreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringArray[] = {  {&_swigt__p_StringArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Table[] = {  {&_swigt__p_Table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransformDerivativeMatrix[] = {  {&_swigt__p_TransformDerivativeMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Value[] = {  {&_swigt__p_Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Variance[] = {  {&_swigt__p_Variance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VariancePtr[] = {  {&_swigt__p_VariancePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t[] = {  {&_swigt__p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Wcs[] = {  {&_swigt__p_Wcs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_afw__geom__ellipses__Axes[] = {  {&_swigt__p_afw__geom__ellipses__Axes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_afw__geom__ellipses__Ellipse[] = {  {&_swigt__p_afw__geom__ellipses__Ellipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_afw__image__ExposureT_PixelT_t[] = {  {&_swigt__p_afw__image__ExposureT_PixelT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_afw__table__SourceRecord[] = {  {&_swigt__p_afw__table__SourceRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argument_type[] = {  {&_swigt__p_argument_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_base[] = {  {&_swigt__p_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_Eigen__MatrixXd_const_t[] = {  {&_swigt__p_boost__shared_ptrT_Eigen__MatrixXd_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_afw__image__Wcs_const_t[] = {  {&_swigt__p_boost__shared_ptrT_afw__image__Wcs_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_tTo_p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__Coord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t, _p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t, _p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t, _p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t, _p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t, _p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_tTo_p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Peak_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Psf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__Span_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__Span_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t, _p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_tTo_p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__Calib_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, _p_boost__shared_ptrT_lsst__meas__algorithms__Defect_tTo_p_boost__shared_ptrT_lsst__afw__image__DefectBase_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__Wcs_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, _p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Background_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Background_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t, _p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_tTo_p_boost__shared_ptrT_lsst__afw__math__Background_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Interpolate_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Interpolate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Kernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, _p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, _p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, _p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, _p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t, _p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, _p_boost__shared_ptrT_lsst__afw__table__SourceRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t, _p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__BaseTable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t, _p_boost__shared_ptrT_lsst__afw__table__ExposureTable_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__BaseTable_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t, _p_boost__shared_ptrT_lsst__afw__table__SimpleTable_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t, _p_boost__shared_ptrT_lsst__afw__table__SourceTable_tTo_p_boost__shared_ptrT_lsst__afw__table__BaseTable_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__IdFactory_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__IdFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, _p_boost__shared_ptrT_lsst__afw__table__SourceRecord_tTo_p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t, _p_boost__shared_ptrT_lsst__afw__table__SourceTable_tTo_p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, _p_boost__shared_ptrT_lsst__afw__detection__Footprint_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t, _p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t, _p_boost__shared_ptrT_lsst__afw__image__Calib_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, _p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t, _p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, _p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, _p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, _p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, _p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, _p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, _p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t, _p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, _p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, _p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, _p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, _p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, _p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, _p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, _p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t, _p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t, _p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t, _p_boost__shared_ptrT_lsst__afw__image__Calib_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, _p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, _p_boost__shared_ptrT_lsst__afw__detection__Footprint_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t, _p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t, _p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__Citizen_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicySource_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t, _p_boost__shared_ptrT_lsst__daf__base__PropertySet_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, _p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, _p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, _p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, _p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t, _p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t, _p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t, _p_boost__shared_ptrT_lsst__daf__persistence__Storage_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t, _p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t, _p_boost__shared_ptrT_lsst__afw__detection__Peak_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__XYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t, _p_boost__shared_ptrT_lsst__pex__policy__Dictionary_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t, _p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t, _p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Background_t, _p_boost__shared_ptrT_lsst__afw__math__Background_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t, _p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, _p_boost__shared_ptrT_lsst__afw__detection__Footprint_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t, _p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, _p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t, _p_boost__shared_ptrT_lsst__daf__persistence__Persistence_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t, _p_boost__shared_ptrT_lsst__pex__policy__Policy_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t, _p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t, _p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t, _p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, _p_boost__shared_ptrT_lsst__daf__base__PropertyList_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t, _p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t, _p_boost__shared_ptrT_lsst__pex__policy__Definition_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t, _p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyString_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_tTo_p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__Persistable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, _p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyString_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, _p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, _p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, _p_boost__shared_ptrT_lsst__afw__math__FixedKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t, _p_boost__shared_ptrT_lsst__afw__detection__Psf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t, _p_boost__shared_ptrT_lsst__afw__image__Wcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, _p_boost__shared_ptrT_lsst__daf__base__PropertyList_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, _p_boost__shared_ptrT_lsst__afw__image__TanWcs_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t, _p_boost__shared_ptrT_lsst__pex__policy__Policy_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, _p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t, _p_boost__shared_ptrT_lsst__pex__policy__Dictionary_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t, _p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t, _p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t, _p_boost__shared_ptrT_lsst__afw__math__Kernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, _p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, _p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t, _p_boost__shared_ptrT_lsst__daf__base__PropertySet_tTo_p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t, _p_boost__shared_ptrT_lsst__daf__base__PropertyList_tTo_p_boost__shared_ptrT_lsst__daf__base__PropertySet_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t, _p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_tTo_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t, _p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_tTo_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t, _p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_tTo_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, _p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, _p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, _p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t, _p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_tTo_p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t, _p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t, _p_boost__shared_ptrT_lsst__pex__logging__FileDestination_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t, _p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t, _p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t, _p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_tTo_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__Definition_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, _p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyString_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t, _p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_tTo_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__Policy_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t, _p_boost__shared_ptrT_lsst__pex__policy__Dictionary_tTo_p_boost__shared_ptrT_lsst__pex__policy__Policy_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_x_iterator[] = {  {&_swigt__p_const_x_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_xy_locator[] = {  {&_swigt__p_const_xy_locator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_y_iterator[] = {  {&_swigt__p_const_y_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fast_iterator[] = {  {&_swigt__p_fast_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_image_category[] = {  {&_swigt__p_image_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kernel_fill_factor[] = {  {&_swigt__p_kernel_fill_factor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__coord__GalacticCoord[] = {{&_swigt__p_lsst__afw__coord__GalacticCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__coord__EclipticCoord[] = {{&_swigt__p_lsst__afw__coord__EclipticCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__coord__TopocentricCoord[] = {{&_swigt__p_lsst__afw__coord__TopocentricCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__coord__Fk5Coord[] = {{&_swigt__p_lsst__afw__coord__Fk5Coord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__coord__Coord[] = {  {&_swigt__p_lsst__afw__coord__Coord, 0, 0, 0},  {&_swigt__p_lsst__afw__coord__GalacticCoord, _p_lsst__afw__coord__GalacticCoordTo_p_lsst__afw__coord__Coord, 0, 0},  {&_swigt__p_lsst__afw__coord__EclipticCoord, _p_lsst__afw__coord__EclipticCoordTo_p_lsst__afw__coord__Coord, 0, 0},  {&_swigt__p_lsst__afw__coord__TopocentricCoord, _p_lsst__afw__coord__TopocentricCoordTo_p_lsst__afw__coord__Coord, 0, 0},  {&_swigt__p_lsst__afw__coord__Fk5Coord, _p_lsst__afw__coord__Fk5CoordTo_p_lsst__afw__coord__Coord, 0, 0},  {&_swigt__p_lsst__afw__coord__IcrsCoord, _p_lsst__afw__coord__IcrsCoordTo_p_lsst__afw__coord__Coord, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__coord__IcrsCoord[] = {  {&_swigt__p_lsst__afw__coord__IcrsCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__detection__Footprint[] = {  {&_swigt__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t, _p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_tTo_p_lsst__afw__detection__Footprint, 0, 0},  {&_swigt__p_lsst__afw__detection__Footprint, 0, 0, 0},  {&_swigt__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t, _p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_tTo_p_lsst__afw__detection__Footprint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__detection__Psf[] = {  {&_swigt__p_lsst__afw__detection__Psf, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__detection__Psf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__detection__Psf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, _p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__detection__Psf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__detection__Psf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__detection__Psf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__detection__Psf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__detection__Psf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__fits__FitsError[] = {  {&_swigt__p_lsst__afw__fits__FitsError, 0, 0, 0},  {&_swigt__p_lsst__afw__fits__FitsTypeError, _p_lsst__afw__fits__FitsTypeErrorTo_p_lsst__afw__fits__FitsError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__fits__FitsTypeError[] = {  {&_swigt__p_lsst__afw__fits__FitsTypeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__fits__MemFileManager[] = {  {&_swigt__p_lsst__afw__fits__MemFileManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__Angle[] = {  {&_swigt__p_lsst__afw__geom__Angle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__Box2D[] = {  {&_swigt__p_lsst__afw__geom__Box2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__Box2I[] = {  {&_swigt__p_lsst__afw__geom__Box2I, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__CoordinateExprT_2_t[] = {  {&_swigt__p_lsst__afw__geom__CoordinateExprT_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__CoordinateExprT_3_t[] = {  {&_swigt__p_lsst__afw__geom__CoordinateExprT_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_double_2_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_double_3_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_int_2_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_int_3_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_double_2_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_double_3_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_int_2_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_int_3_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__Span[] = {  {&_swigt__p_lsst__afw__geom__Span, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__DefectBase[] = {  {&_swigt__p_lsst__afw__image__DefectBase, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__Defect, _p_lsst__meas__algorithms__DefectTo_p_lsst__afw__image__DefectBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__AnalyticKernel[] = {  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__math__AnalyticKernel, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__math__AnalyticKernel, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__FixedKernel[] = {{&_swigt__p_lsst__afw__math__FixedKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__DeltaFunctionKernel[] = {{&_swigt__p_lsst__afw__math__DeltaFunctionKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__LinearCombinationKernel[] = {{&_swigt__p_lsst__afw__math__LinearCombinationKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SeparableKernel[] = {{&_swigt__p_lsst__afw__math__SeparableKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__LanczosWarpingKernel[] = {{&_swigt__p_lsst__afw__math__LanczosWarpingKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__BilinearWarpingKernel[] = {{&_swigt__p_lsst__afw__math__BilinearWarpingKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__NearestWarpingKernel[] = {{&_swigt__p_lsst__afw__math__NearestWarpingKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Kernel[] = {  {&_swigt__p_lsst__afw__math__FixedKernel, _p_lsst__afw__math__FixedKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__DeltaFunctionKernel, _p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__LinearCombinationKernel, _p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__Kernel, 0, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, _p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__SeparableKernel, _p_lsst__afw__math__SeparableKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosWarpingKernel, _p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__BilinearWarpingKernel, _p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__afw__math__Kernel, 0, 0},  {&_swigt__p_lsst__afw__math__NearestWarpingKernel, _p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__afw__math__Kernel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t[] = {{&_swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SpatialCellImageCandidateT_float_t[] = {{&_swigt__p_lsst__afw__math__SpatialCellImageCandidateT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SpatialCellImageCandidateT_double_t[] = {{&_swigt__p_lsst__afw__math__SpatialCellImageCandidateT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SpatialCellCandidate[] = {  {&_swigt__p_lsst__afw__math__SpatialCellCandidate, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletPsfCandidate, _p_lsst__meas__algorithms__ShapeletPsfCandidateTo_p_lsst__afw__math__SpatialCellCandidate, 0, 0},  {&_swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t, _p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_tTo_p_lsst__afw__math__SpatialCellCandidate, 0, 0},  {&_swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t, _p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_tTo_p_lsst__afw__math__SpatialCellCandidate, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PsfCandidateT_float_t, _p_lsst__meas__algorithms__PsfCandidateT_float_tTo_p_lsst__afw__math__SpatialCellCandidate, 0, 0},  {&_swigt__p_lsst__afw__math__SpatialCellImageCandidateT_float_t, _p_lsst__afw__math__SpatialCellImageCandidateT_float_tTo_p_lsst__afw__math__SpatialCellCandidate, 0, 0},  {&_swigt__p_lsst__afw__math__SpatialCellImageCandidateT_double_t, _p_lsst__afw__math__SpatialCellImageCandidateT_double_tTo_p_lsst__afw__math__SpatialCellCandidate, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t[] = {  {&_swigt__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PsfCandidateT_float_t, _p_lsst__meas__algorithms__PsfCandidateT_float_tTo_p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SpatialCellSet[] = {  {&_swigt__p_lsst__afw__math__SpatialCellSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t[] = {  {&_swigt__p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t[] = {  {&_swigt__p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t[] = {  {&_swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t[] = {  {&_swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t[] = {  {&_swigt__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__Schema[] = {  {&_swigt__p_lsst__afw__table__Schema, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t[] = {  {&_swigt__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t[] = {  {&_swigt__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t[] = {  {&_swigt__p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__Wcs[] = {{&_swigt__p_lsst__afw__image__Wcs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__CoaddInputs[] = {{&_swigt__p_lsst__afw__image__CoaddInputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__LanczosFunction1T_double_t[] = {{&_swigt__p_lsst__afw__math__LanczosFunction1T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__LanczosFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__LanczosFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__NullFunction1T_double_t[] = {{&_swigt__p_lsst__afw__math__NullFunction1T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__NullFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__NullFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__PolynomialFunction1T_double_t[] = {{&_swigt__p_lsst__afw__math__PolynomialFunction1T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__PolynomialFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__PolynomialFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__FunctionT_double_t[] = {{&_swigt__p_lsst__afw__math__FunctionT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Function1T_double_t[] = {{&_swigt__p_lsst__afw__math__Function1T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__GaussianFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__GaussianFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__GaussianFunction1T_double_t[] = {{&_swigt__p_lsst__afw__math__GaussianFunction1T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Chebyshev1Function2T_double_t[] = {{&_swigt__p_lsst__afw__math__Chebyshev1Function2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Chebyshev1Function1T_double_t[] = {{&_swigt__p_lsst__afw__math__Chebyshev1Function1T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Function2T_double_t[] = {{&_swigt__p_lsst__afw__math__Function2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__TanWcs[] = {{&_swigt__p_lsst__afw__image__TanWcs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__IntegerDeltaFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__BasePolynomialFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__BasePolynomialFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__DoubleGaussianFunction2T_double_t[] = {{&_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__NullFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__NullFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__NullFunction1T_float_t[] = {{&_swigt__p_lsst__afw__math__NullFunction1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__LanczosFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__LanczosFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__LanczosFunction1T_float_t[] = {{&_swigt__p_lsst__afw__math__LanczosFunction1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__IntegerDeltaFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__GaussianFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__GaussianFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__GaussianFunction1T_float_t[] = {{&_swigt__p_lsst__afw__math__GaussianFunction1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Chebyshev1Function2T_float_t[] = {{&_swigt__p_lsst__afw__math__Chebyshev1Function2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Chebyshev1Function1T_float_t[] = {{&_swigt__p_lsst__afw__math__Chebyshev1Function1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Function2T_float_t[] = {{&_swigt__p_lsst__afw__math__Function2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Function1T_float_t[] = {{&_swigt__p_lsst__afw__math__Function1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__FunctionT_float_t[] = {{&_swigt__p_lsst__afw__math__FunctionT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__PolynomialFunction1T_float_t[] = {{&_swigt__p_lsst__afw__math__PolynomialFunction1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__PolynomialFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__PolynomialFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__DoubleGaussianFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__BasePolynomialFunction2T_float_t[] = {{&_swigt__p_lsst__afw__math__BasePolynomialFunction2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__Calib[] = {{&_swigt__p_lsst__afw__image__Calib, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__Persistable[] = {  {&_swigt__p_lsst__afw__image__Wcs, _p_lsst__afw__image__WcsTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__CoaddInputs, _p_lsst__afw__image__CoaddInputsTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t, _p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__table__io__Persistable, 0, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction1T_double_t, _p_lsst__afw__math__LanczosFunction1T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction2T_double_t, _p_lsst__afw__math__LanczosFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction1T_double_t, _p_lsst__afw__math__NullFunction1T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction2T_double_t, _p_lsst__afw__math__NullFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction1T_double_t, _p_lsst__afw__math__PolynomialFunction1T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction2T_double_t, _p_lsst__afw__math__PolynomialFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__FunctionT_double_t, _p_lsst__afw__math__FunctionT_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Function1T_double_t, _p_lsst__afw__math__Function1T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction2T_double_t, _p_lsst__afw__math__GaussianFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction1T_double_t, _p_lsst__afw__math__GaussianFunction1T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function2T_double_t, _p_lsst__afw__math__Chebyshev1Function2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function1T_double_t, _p_lsst__afw__math__Chebyshev1Function1T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Function2T_double_t, _p_lsst__afw__math__Function2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, _p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__FixedKernel, _p_lsst__afw__math__FixedKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__DeltaFunctionKernel, _p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LinearCombinationKernel, _p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__TanWcs, _p_lsst__afw__image__TanWcsTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_double_t, _p_lsst__afw__math__IntegerDeltaFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__detection__Psf, _p_lsst__afw__detection__PsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__BasePolynomialFunction2T_double_t, _p_lsst__afw__math__BasePolynomialFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_double_t, _p_lsst__afw__math__DoubleGaussianFunction2T_double_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction2T_float_t, _p_lsst__afw__math__NullFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction1T_float_t, _p_lsst__afw__math__NullFunction1T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction2T_float_t, _p_lsst__afw__math__LanczosFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction1T_float_t, _p_lsst__afw__math__LanczosFunction1T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_float_t, _p_lsst__afw__math__IntegerDeltaFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction2T_float_t, _p_lsst__afw__math__GaussianFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction1T_float_t, _p_lsst__afw__math__GaussianFunction1T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function2T_float_t, _p_lsst__afw__math__Chebyshev1Function2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function1T_float_t, _p_lsst__afw__math__Chebyshev1Function1T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Function2T_float_t, _p_lsst__afw__math__Function2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Function1T_float_t, _p_lsst__afw__math__Function1T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__FunctionT_float_t, _p_lsst__afw__math__FunctionT_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction1T_float_t, _p_lsst__afw__math__PolynomialFunction1T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction2T_float_t, _p_lsst__afw__math__PolynomialFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Kernel, _p_lsst__afw__math__KernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, _p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__SeparableKernel, _p_lsst__afw__math__SeparableKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosWarpingKernel, _p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__BilinearWarpingKernel, _p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__NearestWarpingKernel, _p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t, _p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__detection__Footprint, _p_lsst__afw__detection__FootprintTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_float_t, _p_lsst__afw__math__DoubleGaussianFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__BasePolynomialFunction2T_float_t, _p_lsst__afw__math__BasePolynomialFunction2T_float_tTo_p_lsst__afw__table__io__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__Calib, _p_lsst__afw__image__CalibTo_p_lsst__afw__table__io__Persistable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t[] = {  {&_swigt__p_lsst__afw__detection__Psf, _p_lsst__afw__detection__PsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, _p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t[] = {  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, _p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t[] = {  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0, 0},  {&_swigt__p_lsst__afw__math__FixedKernel, _p_lsst__afw__math__FixedKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__DeltaFunctionKernel, _p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__LinearCombinationKernel, _p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__Kernel, _p_lsst__afw__math__KernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, _p_lsst__afw__math__AnalyticKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__SeparableKernel, _p_lsst__afw__math__SeparableKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosWarpingKernel, _p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__BilinearWarpingKernel, _p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},  {&_swigt__p_lsst__afw__math__NearestWarpingKernel, _p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t[] = {  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t[] = {  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, _p_lsst__meas__algorithms__ImagePsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t[] = {  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t, 0, 0},  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t[] = {  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t, 0, 0},  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t[] = {  {&_swigt__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__Background[] = {{&_swigt__p_lsst__afw__math__Background, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__base__PropertySet[] = {{&_swigt__p_lsst__daf__base__PropertySet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__Policy[] = {{&_swigt__p_lsst__pex__policy__Policy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__base__PropertyList[] = {{&_swigt__p_lsst__daf__base__PropertyList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__Detector[] = {{&_swigt__p_lsst__afw__cameraGeom__Detector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__DecoratedImageT_unsigned_short_t[] = {{&_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__XYTransformFromWcsPair[] = {{&_swigt__p_lsst__afw__image__XYTransformFromWcsPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__detection__FootprintSet[] = {{&_swigt__p_lsst__afw__detection__FootprintSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__BackgroundMI[] = {{&_swigt__p_lsst__afw__math__BackgroundMI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__persistence__DbTsvStorage[] = {{&_swigt__p_lsst__daf__persistence__DbTsvStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__persistence__DbStorage[] = {{&_swigt__p_lsst__daf__persistence__DbStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__persistence__Storage[] = {{&_swigt__p_lsst__daf__persistence__Storage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__DetectorMosaic[] = {{&_swigt__p_lsst__afw__cameraGeom__DetectorMosaic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__persistence__LogicalLocation[] = {{&_swigt__p_lsst__daf__persistence__LogicalLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__Definition[] = {{&_swigt__p_lsst__pex__policy__Definition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__detection__Peak[] = {{&_swigt__p_lsst__afw__detection__Peak, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__PolicySource[] = {{&_swigt__p_lsst__pex__policy__PolicySource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__Dictionary[] = {{&_swigt__p_lsst__pex__policy__Dictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__PolicyString[] = {{&_swigt__p_lsst__pex__policy__PolicyString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__PolicyStringDestination[] = {{&_swigt__p_lsst__pex__policy__PolicyStringDestination, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__PolicyStreamDestination[] = {{&_swigt__p_lsst__pex__policy__PolicyStreamDestination, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__PolicyDestination[] = {{&_swigt__p_lsst__pex__policy__PolicyDestination, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__XYTransform[] = {{&_swigt__p_lsst__afw__geom__XYTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__IdentityXYTransform[] = {{&_swigt__p_lsst__afw__geom__IdentityXYTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__InvertedXYTransform[] = {{&_swigt__p_lsst__afw__geom__InvertedXYTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__RadialXYTransform[] = {{&_swigt__p_lsst__afw__geom__RadialXYTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__DetectorXYTransform[] = {{&_swigt__p_lsst__afw__cameraGeom__DetectorXYTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__SquaredExpCovariogramT_double_t[] = {{&_swigt__p_lsst__afw__math__SquaredExpCovariogramT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__NeuralNetCovariogramT_double_t[] = {{&_swigt__p_lsst__afw__math__NeuralNetCovariogramT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__math__CovariogramT_double_t[] = {{&_swigt__p_lsst__afw__math__CovariogramT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageBaseT_double_t[] = {{&_swigt__p_lsst__afw__image__ImageBaseT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageT_double_t[] = {{&_swigt__p_lsst__afw__image__ImageT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__DecoratedImageT_double_t[] = {{&_swigt__p_lsst__afw__image__DecoratedImageT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageSliceT_double_t[] = {{&_swigt__p_lsst__afw__image__ImageSliceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__Ccd[] = {{&_swigt__p_lsst__afw__cameraGeom__Ccd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__Raft[] = {{&_swigt__p_lsst__afw__cameraGeom__Raft, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__UrnPolicyFile[] = {{&_swigt__p_lsst__pex__policy__UrnPolicyFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__DefaultPolicyFile[] = {{&_swigt__p_lsst__pex__policy__DefaultPolicyFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__PolicyFile[] = {{&_swigt__p_lsst__pex__policy__PolicyFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__DecoratedImageT_float_t[] = {{&_swigt__p_lsst__afw__image__DecoratedImageT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageT_float_t[] = {{&_swigt__p_lsst__afw__image__ImageT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageBaseT_float_t[] = {{&_swigt__p_lsst__afw__image__ImageBaseT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageSliceT_float_t[] = {{&_swigt__p_lsst__afw__image__ImageSliceT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__Camera[] = {{&_swigt__p_lsst__afw__cameraGeom__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageBaseT_unsigned_long_t[] = {{&_swigt__p_lsst__afw__image__ImageBaseT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageT_unsigned_long_t[] = {{&_swigt__p_lsst__afw__image__ImageT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__DecoratedImageT_unsigned_long_t[] = {{&_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageT_unsigned_short_t[] = {{&_swigt__p_lsst__afw__image__ImageT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageBaseT_unsigned_short_t[] = {{&_swigt__p_lsst__afw__image__ImageBaseT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__MaskT_unsigned_short_t[] = {{&_swigt__p_lsst__afw__image__MaskT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__DecoratedImageT_int_t[] = {{&_swigt__p_lsst__afw__image__DecoratedImageT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageT_int_t[] = {{&_swigt__p_lsst__afw__image__ImageT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ImageBaseT_int_t[] = {{&_swigt__p_lsst__afw__image__ImageBaseT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__cameraGeom__Amp[] = {{&_swigt__p_lsst__afw__cameraGeom__Amp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t[] = {{&_swigt__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__persistence__Persistence[] = {{&_swigt__p_lsst__daf__persistence__Persistence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__base__Citizen[] = {  {&_swigt__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_double_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Background, _p_lsst__afw__math__BackgroundTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__base__PropertySet, _p_lsst__daf__base__PropertySetTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__Policy, _p_lsst__pex__policy__PolicyTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__base__PropertyList, _p_lsst__daf__base__PropertyListTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_int_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__base__Citizen, 0, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__Detector, _p_lsst__afw__cameraGeom__DetectorTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_float_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_short_t, _p_lsst__afw__image__DecoratedImageT_unsigned_short_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__XYTransformFromWcsPair, _p_lsst__afw__image__XYTransformFromWcsPairTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t, _p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_double_t, _p_lsst__afw__math__DoubleGaussianFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__BasePolynomialFunction2T_double_t, _p_lsst__afw__math__BasePolynomialFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__detection__Footprint, _p_lsst__afw__detection__FootprintTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__LinearCombinationKernel, _p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__DeltaFunctionKernel, _p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__FixedKernel, _p_lsst__afw__math__FixedKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__TanWcs, _p_lsst__afw__image__TanWcsTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__detection__Psf, _p_lsst__afw__detection__PsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__detection__FootprintSet, _p_lsst__afw__detection__FootprintSetTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__BackgroundMI, _p_lsst__afw__math__BackgroundMITo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__persistence__DbTsvStorage, _p_lsst__daf__persistence__DbTsvStorageTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__persistence__DbStorage, _p_lsst__daf__persistence__DbStorageTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__persistence__Storage, _p_lsst__daf__persistence__StorageTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__DetectorMosaic, _p_lsst__afw__cameraGeom__DetectorMosaicTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__persistence__LogicalLocation, _p_lsst__daf__persistence__LogicalLocationTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__Definition, _p_lsst__pex__policy__DefinitionTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__detection__Peak, _p_lsst__afw__detection__PeakTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicySource, _p_lsst__pex__policy__PolicySourceTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__Dictionary, _p_lsst__pex__policy__DictionaryTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyString, _p_lsst__pex__policy__PolicyStringTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, _p_lsst__meas__algorithms__ImagePsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyStringDestination, _p_lsst__pex__policy__PolicyStringDestinationTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyStreamDestination, _p_lsst__pex__policy__PolicyStreamDestinationTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyDestination, _p_lsst__pex__policy__PolicyDestinationTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__geom__XYTransform, _p_lsst__afw__geom__XYTransformTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__geom__IdentityXYTransform, _p_lsst__afw__geom__IdentityXYTransformTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__geom__InvertedXYTransform, _p_lsst__afw__geom__InvertedXYTransformTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__geom__RadialXYTransform, _p_lsst__afw__geom__RadialXYTransformTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__DetectorXYTransform, _p_lsst__afw__cameraGeom__DetectorXYTransformTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__SquaredExpCovariogramT_double_t, _p_lsst__afw__math__SquaredExpCovariogramT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_double_t, _p_lsst__afw__math__IntegerDeltaFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__NeuralNetCovariogramT_double_t, _p_lsst__afw__math__NeuralNetCovariogramT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__CovariogramT_double_t, _p_lsst__afw__math__CovariogramT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction2T_double_t, _p_lsst__afw__math__PolynomialFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_double_t, _p_lsst__afw__image__ImageBaseT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_double_t, _p_lsst__afw__image__ImageT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_double_t, _p_lsst__afw__image__DecoratedImageT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageSliceT_double_t, _p_lsst__afw__image__ImageSliceT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__FunctionT_double_t, _p_lsst__afw__math__FunctionT_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Function1T_double_t, _p_lsst__afw__math__Function1T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Function2T_double_t, _p_lsst__afw__math__Function2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function1T_double_t, _p_lsst__afw__math__Chebyshev1Function1T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function2T_double_t, _p_lsst__afw__math__Chebyshev1Function2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction1T_double_t, _p_lsst__afw__math__PolynomialFunction1T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction2T_double_t, _p_lsst__afw__math__NullFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction1T_double_t, _p_lsst__afw__math__NullFunction1T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction2T_double_t, _p_lsst__afw__math__LanczosFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction1T_double_t, _p_lsst__afw__math__LanczosFunction1T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction2T_double_t, _p_lsst__afw__math__GaussianFunction2T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction1T_double_t, _p_lsst__afw__math__GaussianFunction1T_double_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__Ccd, _p_lsst__afw__cameraGeom__CcdTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__Raft, _p_lsst__afw__cameraGeom__RaftTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__UrnPolicyFile, _p_lsst__pex__policy__UrnPolicyFileTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__DefaultPolicyFile, _p_lsst__pex__policy__DefaultPolicyFileTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyFile, _p_lsst__pex__policy__PolicyFileTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction2T_float_t, _p_lsst__afw__math__PolynomialFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__PolynomialFunction1T_float_t, _p_lsst__afw__math__PolynomialFunction1T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction2T_float_t, _p_lsst__afw__math__NullFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__NullFunction1T_float_t, _p_lsst__afw__math__NullFunction1T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction2T_float_t, _p_lsst__afw__math__LanczosFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosFunction1T_float_t, _p_lsst__afw__math__LanczosFunction1T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__IntegerDeltaFunction2T_float_t, _p_lsst__afw__math__IntegerDeltaFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction2T_float_t, _p_lsst__afw__math__GaussianFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__GaussianFunction1T_float_t, _p_lsst__afw__math__GaussianFunction1T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function2T_float_t, _p_lsst__afw__math__Chebyshev1Function2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Chebyshev1Function1T_float_t, _p_lsst__afw__math__Chebyshev1Function1T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Function2T_float_t, _p_lsst__afw__math__Function2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Function1T_float_t, _p_lsst__afw__math__Function1T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__FunctionT_float_t, _p_lsst__afw__math__FunctionT_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_float_t, _p_lsst__afw__image__DecoratedImageT_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_float_t, _p_lsst__afw__image__ImageT_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_float_t, _p_lsst__afw__image__ImageBaseT_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageSliceT_float_t, _p_lsst__afw__image__ImageSliceT_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__Camera, _p_lsst__afw__cameraGeom__CameraTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_unsigned_long_t, _p_lsst__afw__image__ImageBaseT_unsigned_long_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_unsigned_long_t, _p_lsst__afw__image__ImageT_unsigned_long_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_long_t, _p_lsst__afw__image__DecoratedImageT_unsigned_long_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_unsigned_short_t, _p_lsst__afw__image__ImageT_unsigned_short_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_unsigned_short_t, _p_lsst__afw__image__ImageBaseT_unsigned_short_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__MaskT_unsigned_short_t, _p_lsst__afw__image__MaskT_unsigned_short_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__Kernel, _p_lsst__afw__math__KernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, _p_lsst__afw__math__AnalyticKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__SeparableKernel, _p_lsst__afw__math__SeparableKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosWarpingKernel, _p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__BilinearWarpingKernel, _p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__NearestWarpingKernel, _p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_int_t, _p_lsst__afw__image__DecoratedImageT_int_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_int_t, _p_lsst__afw__image__ImageT_int_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_int_t, _p_lsst__afw__image__ImageBaseT_int_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__Wcs, _p_lsst__afw__image__WcsTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__cameraGeom__Amp, _p_lsst__afw__cameraGeom__AmpTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__DoubleGaussianFunction2T_float_t, _p_lsst__afw__math__DoubleGaussianFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__math__BasePolynomialFunction2T_float_t, _p_lsst__afw__math__BasePolynomialFunction2T_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__daf__persistence__Persistence, _p_lsst__daf__persistence__PersistenceTo_p_lsst__daf__base__Citizen, 0, 0},  {&_swigt__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t, _p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_tTo_p_lsst__daf__base__Citizen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__base__Persistable[] = {  {&_swigt__p_lsst__afw__image__Wcs, _p_lsst__afw__image__WcsTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyFile, _p_lsst__pex__policy__PolicyFileTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__pex__policy__DefaultPolicyFile, _p_lsst__pex__policy__DefaultPolicyFileTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__pex__policy__UrnPolicyFile, _p_lsst__pex__policy__UrnPolicyFileTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__daf__base__Persistable, 0, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_double_t, _p_lsst__afw__image__DecoratedImageT_double_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageSliceT_double_t, _p_lsst__afw__image__ImageSliceT_double_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_double_t, _p_lsst__afw__image__ImageBaseT_double_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_double_t, _p_lsst__afw__image__ImageT_double_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, _p_lsst__meas__algorithms__ImagePsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_int_t, _p_lsst__afw__image__ImageBaseT_int_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_int_t, _p_lsst__afw__image__ImageT_int_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_int_t, _p_lsst__afw__image__DecoratedImageT_int_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__FixedKernel, _p_lsst__afw__math__FixedKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__DeltaFunctionKernel, _p_lsst__afw__math__DeltaFunctionKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LinearCombinationKernel, _p_lsst__afw__math__LinearCombinationKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, _p_lsst__meas__algorithms__LocalShapeletKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, _p_lsst__meas__algorithms__ShapeletKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__TanWcs, _p_lsst__afw__image__TanWcsTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__detection__Psf, _p_lsst__afw__detection__PsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_short_t, _p_lsst__afw__image__DecoratedImageT_unsigned_short_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_float_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_float_t, _p_lsst__afw__image__ImageT_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_float_t, _p_lsst__afw__image__ImageBaseT_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_float_t, _p_lsst__afw__image__DecoratedImageT_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageSliceT_float_t, _p_lsst__afw__image__ImageSliceT_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__pex__policy__PolicyString, _p_lsst__pex__policy__PolicyStringTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_unsigned_long_t, _p_lsst__afw__image__ImageBaseT_unsigned_long_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_unsigned_long_t, _p_lsst__afw__image__ImageT_unsigned_long_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__Kernel, _p_lsst__afw__math__KernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__AnalyticKernel, _p_lsst__afw__math__AnalyticKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__SeparableKernel, _p_lsst__afw__math__SeparableKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__LanczosWarpingKernel, _p_lsst__afw__math__LanczosWarpingKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__BilinearWarpingKernel, _p_lsst__afw__math__BilinearWarpingKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__math__NearestWarpingKernel, _p_lsst__afw__math__NearestWarpingKernelTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__daf__base__PropertyList, _p_lsst__daf__base__PropertyListTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__MaskT_unsigned_short_t, _p_lsst__afw__image__MaskT_unsigned_short_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageBaseT_unsigned_short_t, _p_lsst__afw__image__ImageBaseT_unsigned_short_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ImageT_unsigned_short_t, _p_lsst__afw__image__ImageT_unsigned_short_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t, _p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_double_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__pex__policy__Policy, _p_lsst__pex__policy__PolicyTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t, _p_lsst__afw__image__ExposureT_int_unsigned_short_float_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__afw__image__DecoratedImageT_unsigned_long_t, _p_lsst__afw__image__DecoratedImageT_unsigned_long_tTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__pex__policy__Dictionary, _p_lsst__pex__policy__DictionaryTo_p_lsst__daf__base__Persistable, 0, 0},  {&_swigt__p_lsst__daf__base__PropertySet, _p_lsst__daf__base__PropertySetTo_p_lsst__daf__base__Persistable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__Algorithm[] = {  {&_swigt__p_lsst__meas__algorithms__Algorithm, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__FluxAlgorithm, _p_lsst__meas__algorithms__FluxAlgorithmTo_p_lsst__meas__algorithms__Algorithm, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CentroidAlgorithm, _p_lsst__meas__algorithms__CentroidAlgorithmTo_p_lsst__meas__algorithms__Algorithm, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeAlgorithm, _p_lsst__meas__algorithms__ShapeAlgorithmTo_p_lsst__meas__algorithms__Algorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__AlgorithmControl[] = {  {&_swigt__p_lsst__meas__algorithms__PeakLikelihoodFluxControl, _p_lsst__meas__algorithms__PeakLikelihoodFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__EllipticalApertureFluxControl, _p_lsst__meas__algorithms__EllipticalApertureFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ClassificationControl, _p_lsst__meas__algorithms__ClassificationControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SdssShapeControl, _p_lsst__meas__algorithms__SdssShapeControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ShapeControl, _p_lsst__meas__algorithms__ShapeControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SdssCentroidControl, _p_lsst__meas__algorithms__SdssCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__NaiveCentroidControl, _p_lsst__meas__algorithms__NaiveCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__GaussianCentroidControl, _p_lsst__meas__algorithms__GaussianCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CentroidControl, _p_lsst__meas__algorithms__CentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SincFluxControl, _p_lsst__meas__algorithms__SincFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PsfFluxControl, _p_lsst__meas__algorithms__PsfFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__NaiveFluxControl, _p_lsst__meas__algorithms__NaiveFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ApertureFluxControl, _p_lsst__meas__algorithms__ApertureFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__AlgorithmControl, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PixelFlagControl, _p_lsst__meas__algorithms__PixelFlagControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__FluxControl, _p_lsst__meas__algorithms__FluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__GaussianFluxControl, _p_lsst__meas__algorithms__GaussianFluxControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SkyCoordControl, _p_lsst__meas__algorithms__SkyCoordControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__RecordCentroidControl, _p_lsst__meas__algorithms__RecordCentroidControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CorrectFluxesControl, _p_lsst__meas__algorithms__CorrectFluxesControlTo_p_lsst__meas__algorithms__AlgorithmControl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ApertureFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__ApertureFluxControl, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__EllipticalApertureFluxControl, _p_lsst__meas__algorithms__EllipticalApertureFluxControlTo_p_lsst__meas__algorithms__ApertureFluxControl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__CentroidAlgorithm[] = {  {&_swigt__p_lsst__meas__algorithms__CentroidAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__CentroidControl[] = {  {&_swigt__p_lsst__meas__algorithms__CentroidControl, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__GaussianCentroidControl, _p_lsst__meas__algorithms__GaussianCentroidControlTo_p_lsst__meas__algorithms__CentroidControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__NaiveCentroidControl, _p_lsst__meas__algorithms__NaiveCentroidControlTo_p_lsst__meas__algorithms__CentroidControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SdssCentroidControl, _p_lsst__meas__algorithms__SdssCentroidControlTo_p_lsst__meas__algorithms__CentroidControl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ClassificationControl[] = {  {&_swigt__p_lsst__meas__algorithms__ClassificationControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__CoaddPsf[] = {  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__CorrectFluxesControl[] = {  {&_swigt__p_lsst__meas__algorithms__CorrectFluxesControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__Defect[] = {  {&_swigt__p_lsst__meas__algorithms__Defect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__DoubleGaussianPsf[] = {  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__EllipticalApertureFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__EllipticalApertureFluxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__FluxAlgorithm[] = {  {&_swigt__p_lsst__meas__algorithms__FluxAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__FluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__PeakLikelihoodFluxControl, _p_lsst__meas__algorithms__PeakLikelihoodFluxControlTo_p_lsst__meas__algorithms__FluxControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__FluxControl, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__NaiveFluxControl, _p_lsst__meas__algorithms__NaiveFluxControlTo_p_lsst__meas__algorithms__FluxControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__PsfFluxControl, _p_lsst__meas__algorithms__PsfFluxControlTo_p_lsst__meas__algorithms__FluxControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SincFluxControl, _p_lsst__meas__algorithms__SincFluxControlTo_p_lsst__meas__algorithms__FluxControl, 0, 0},  {&_swigt__p_lsst__meas__algorithms__GaussianFluxControl, _p_lsst__meas__algorithms__GaussianFluxControlTo_p_lsst__meas__algorithms__FluxControl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__GaussianCentroidControl[] = {  {&_swigt__p_lsst__meas__algorithms__GaussianCentroidControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__GaussianFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__GaussianFluxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ImagePsf[] = {  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__meas__algorithms__ImagePsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, _p_lsst__meas__algorithms__KernelPsfTo_p_lsst__meas__algorithms__ImagePsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__ImagePsf, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__meas__algorithms__ImagePsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__meas__algorithms__ImagePsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, _p_lsst__meas__algorithms__WarpedPsfTo_p_lsst__meas__algorithms__ImagePsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__CoaddPsf, _p_lsst__meas__algorithms__CoaddPsfTo_p_lsst__meas__algorithms__ImagePsf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__KernelPsf[] = {  {&_swigt__p_lsst__meas__algorithms__PcaPsf, _p_lsst__meas__algorithms__PcaPsfTo_p_lsst__meas__algorithms__KernelPsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__KernelPsf, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, _p_lsst__meas__algorithms__SingleGaussianPsfTo_p_lsst__meas__algorithms__KernelPsf, 0, 0},  {&_swigt__p_lsst__meas__algorithms__DoubleGaussianPsf, _p_lsst__meas__algorithms__DoubleGaussianPsfTo_p_lsst__meas__algorithms__KernelPsf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__LocalShapeletKernel[] = {  {&_swigt__p_lsst__meas__algorithms__LocalShapeletKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__MeasureSources[] = {  {&_swigt__p_lsst__meas__algorithms__MeasureSources, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__MeasureSourcesBuilder[] = {  {&_swigt__p_lsst__meas__algorithms__MeasureSourcesBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__NaiveCentroidControl[] = {  {&_swigt__p_lsst__meas__algorithms__NaiveCentroidControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__NaiveFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__NaiveFluxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__PcaPsf[] = {  {&_swigt__p_lsst__meas__algorithms__PcaPsf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__PeakLikelihoodFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__PeakLikelihoodFluxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__PixelFlagControl[] = {  {&_swigt__p_lsst__meas__algorithms__PixelFlagControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__PsfAttributes[] = {  {&_swigt__p_lsst__meas__algorithms__PsfAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__PsfCandidateT_float_t[] = {  {&_swigt__p_lsst__meas__algorithms__PsfCandidateT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__PsfFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__PsfFluxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__RecordCentroidControl[] = {  {&_swigt__p_lsst__meas__algorithms__RecordCentroidControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SdssCentroidControl[] = {  {&_swigt__p_lsst__meas__algorithms__SdssCentroidControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SdssShapeControl[] = {  {&_swigt__p_lsst__meas__algorithms__SdssShapeControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ShapeAlgorithm[] = {  {&_swigt__p_lsst__meas__algorithms__ShapeAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ShapeControl[] = {  {&_swigt__p_lsst__meas__algorithms__ShapeControl, 0, 0, 0},  {&_swigt__p_lsst__meas__algorithms__SdssShapeControl, _p_lsst__meas__algorithms__SdssShapeControlTo_p_lsst__meas__algorithms__ShapeControl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__Shapelet[] = {  {&_swigt__p_lsst__meas__algorithms__Shapelet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ShapeletInterpolation[] = {  {&_swigt__p_lsst__meas__algorithms__ShapeletInterpolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ShapeletKernel[] = {  {&_swigt__p_lsst__meas__algorithms__ShapeletKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__ShapeletPsfCandidate[] = {  {&_swigt__p_lsst__meas__algorithms__ShapeletPsfCandidate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SincFluxControl[] = {  {&_swigt__p_lsst__meas__algorithms__SincFluxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SingleGaussianPsf[] = {  {&_swigt__p_lsst__meas__algorithms__SingleGaussianPsf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SizeMagnitudeStarSelector[] = {  {&_swigt__p_lsst__meas__algorithms__SizeMagnitudeStarSelector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList[] = {  {&_swigt__p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__SkyCoordControl[] = {  {&_swigt__p_lsst__meas__algorithms__SkyCoordControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__WarpedPsf[] = {  {&_swigt__p_lsst__meas__algorithms__WarpedPsf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t[] = {  {&_swigt__p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t[] = {  {&_swigt__p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__meas__algorithms__shapelet__BVec[] = {  {&_swigt__p_lsst__meas__algorithms__shapelet__BVec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__DictionaryError[] = {{&_swigt__p_lsst__pex__policy__DictionaryError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__TypeError[] = {{&_swigt__p_lsst__pex__policy__TypeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__DomainErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__DomainErrorException, 0, 0, 0},  {&_swigt__p_lsst__pex__policy__DictionaryError, _p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__DomainErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__TypeError, _p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__DomainErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__InvalidParameterException[] = {  {&_swigt__p_lsst__pex__exceptions__InvalidParameterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__PersistenceError[] = {{&_swigt__p_lsst__afw__table__io__PersistenceError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__table__io__MalformedArchiveError[] = {{&_swigt__p_lsst__afw__table__io__MalformedArchiveError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__IoErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__IoErrorException, 0, 0, 0},  {&_swigt__p_lsst__afw__table__io__PersistenceError, _p_lsst__afw__table__io__PersistenceErrorTo_p_lsst__pex__exceptions__IoErrorException, 0, 0},  {&_swigt__p_lsst__afw__fits__FitsError, _p_lsst__afw__fits__FitsErrorTo_p_lsst__pex__exceptions__IoErrorException, 0, 0},  {&_swigt__p_lsst__afw__fits__FitsTypeError, _p_lsst__afw__fits__FitsTypeErrorTo_p_lsst__pex__exceptions__IoErrorException, 0, 0},  {&_swigt__p_lsst__afw__table__io__MalformedArchiveError, _p_lsst__afw__table__io__MalformedArchiveErrorTo_p_lsst__pex__exceptions__IoErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__LengthErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__LengthErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__ValidationError[] = {{&_swigt__p_lsst__pex__policy__ValidationError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__base__TypeMismatchException[] = {{&_swigt__p_lsst__daf__base__TypeMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__LogicErrorException[] = {  {&_swigt__p_lsst__pex__policy__ValidationError, _p_lsst__pex__policy__ValidationErrorTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__LogicErrorException, 0, 0, 0},  {&_swigt__p_lsst__pex__exceptions__DomainErrorException, _p_lsst__pex__exceptions__DomainErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__LengthErrorException, _p_lsst__pex__exceptions__LengthErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__OutOfRangeException, _p_lsst__pex__exceptions__OutOfRangeExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__daf__base__TypeMismatchException, _p_lsst__daf__base__TypeMismatchExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__DictionaryError, _p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__TypeError, _p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__InvalidParameterException, _p_lsst__pex__exceptions__InvalidParameterExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__MemoryException[] = {  {&_swigt__p_lsst__pex__exceptions__MemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__NameNotFound[] = {{&_swigt__p_lsst__pex__policy__NameNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__NotFoundException[] = {  {&_swigt__p_lsst__pex__exceptions__NotFoundException, 0, 0, 0},  {&_swigt__p_lsst__pex__policy__NameNotFound, _p_lsst__pex__policy__NameNotFoundTo_p_lsst__pex__exceptions__NotFoundException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__OutOfRangeException[] = {  {&_swigt__p_lsst__pex__exceptions__OutOfRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__OverflowErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__OverflowErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__RangeErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__RangeErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__EOFError[] = {{&_swigt__p_lsst__pex__policy__EOFError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__UnsupportedSyntax[] = {{&_swigt__p_lsst__pex__policy__UnsupportedSyntax, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__BadNameError[] = {{&_swigt__p_lsst__pex__policy__BadNameError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__FormatSyntaxError[] = {{&_swigt__p_lsst__pex__policy__FormatSyntaxError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__SyntaxError[] = {{&_swigt__p_lsst__pex__policy__SyntaxError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__ParserError[] = {{&_swigt__p_lsst__pex__policy__ParserError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__RuntimeErrorException[] = {  {&_swigt__p_lsst__afw__fits__FitsTypeError, _p_lsst__afw__fits__FitsTypeErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__afw__table__io__MalformedArchiveError, _p_lsst__afw__table__io__MalformedArchiveErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__EOFError, _p_lsst__pex__policy__EOFErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__UnsupportedSyntax, _p_lsst__pex__policy__UnsupportedSyntaxTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__BadNameError, _p_lsst__pex__policy__BadNameErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__afw__table__io__PersistenceError, _p_lsst__afw__table__io__PersistenceErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__TimeoutException, _p_lsst__pex__exceptions__TimeoutExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__IoErrorException, _p_lsst__pex__exceptions__IoErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__MemoryException, _p_lsst__pex__exceptions__MemoryExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__UnderflowErrorException, _p_lsst__pex__exceptions__UnderflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__OverflowErrorException, _p_lsst__pex__exceptions__OverflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__RangeErrorException, _p_lsst__pex__exceptions__RangeErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__RuntimeErrorException, 0, 0, 0},  {&_swigt__p_lsst__pex__policy__FormatSyntaxError, _p_lsst__pex__policy__FormatSyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__SyntaxError, _p_lsst__pex__policy__SyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__afw__fits__FitsError, _p_lsst__afw__fits__FitsErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__ParserError, _p_lsst__pex__policy__ParserErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__TimeoutException[] = {  {&_swigt__p_lsst__pex__exceptions__TimeoutException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__UnderflowErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__UnderflowErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__logging__LogRec[] = {  {&_swigt__p_lsst__pex__logging__LogRec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_memId[] = {  {&_swigt__p_memId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_result_type[] = {  {&_swigt__p_result_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reverse_iterator[] = {  {&_swigt__p_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t[] = {  {&_swigt__p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_double_t[] = {  {&_swigt__p_std__pairT_bool_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t[] = {  {&_swigt__p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t[] = {  {&_swigt__p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t[] = {  {&_swigt__p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t[] = {  {&_swigt__p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t[] = {  {&_swigt__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamoff[] = {  {&_swigt__p_streamoff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streampos[] = {  {&_swigt__p_streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamsize[] = {  {&_swigt__p_streamsize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_x_iterator[] = {  {&_swigt__p_x_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xy_locator[] = {  {&_swigt__p_xy_locator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xy_x_iterator[] = {  {&_swigt__p_xy_x_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xy_y_iterator[] = {  {&_swigt__p_xy_y_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_y_iterator[] = {  {&_swigt__p_y_iterator, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AffineTransform,
  _swigc__p_AlgorithmList,
  _swigc__p_AmpSet,
  _swigc__p_Array,
  _swigc__p_BoolArray,
  _swigc__p_Builder,
  _swigc__p_CandidateList,
  _swigc__p_Catalog,
  _swigc__p_CellList,
  _swigc__p_CoeffT,
  _swigc__p_ColumnView,
  _swigc__p_ConstArray,
  _swigc__p_ConstCatalog,
  _swigc__p_ConstDictPtr,
  _swigc__p_ConstPolicyPtrArray,
  _swigc__p_ConstPtr,
  _swigc__p_DetectorSet,
  _swigc__p_DictPtr,
  _swigc__p_DoubleArray,
  _swigc__p_EigenVector,
  _swigc__p_Element,
  _swigc__p_Ellipticity,
  _swigc__p_ErrKey,
  _swigc__p_ErrValue,
  _swigc__p_Exposure,
  _swigc__p_Extent,
  _swigc__p_FilePtr,
  _swigc__p_FilePtrArray,
  _swigc__p_FootprintList,
  _swigc__p_Function1Ptr,
  _swigc__p_Function2Ptr,
  _swigc__p_Image,
  _swigc__p_ImageConstPtr,
  _swigc__p_ImageList,
  _swigc__p_ImagePtr,
  _swigc__p_ImageT,
  _swigc__p_IntArray,
  _swigc__p_IntT,
  _swigc__p_InternalPixelT,
  _swigc__p_Iterator,
  _swigc__p_Jacobian,
  _swigc__p_KernelFunction,
  _swigc__p_KernelFunctionPtr,
  _swigc__p_KeyTuple,
  _swigc__p_List,
  _swigc__p_Mask,
  _swigc__p_MaskPixel,
  _swigc__p_MaskPlaneDict,
  _swigc__p_MaskPtr,
  _swigc__p_MaskedImageT,
  _swigc__p_Matrix,
  _swigc__p_MeasKey,
  _swigc__p_MeasValue,
  _swigc__p_NullSpatialFunction,
  _swigc__p_OutPixelT,
  _swigc__p_ParameterVector,
  _swigc__p_PeakList,
  _swigc__p_Pixel,
  _swigc__p_PixelConstReference,
  _swigc__p_PixelReference,
  _swigc__p_PixelT,
  _swigc__p_Point,
  _swigc__p_Point2D,
  _swigc__p_PointD,
  _swigc__p_Policy,
  _swigc__p_PolicyPtrArray,
  _swigc__p_ProductDerivativeMatrix,
  _swigc__p_PsfCandidateList,
  _swigc__p_PsfCandidateT,
  _swigc__p_Ptr,
  _swigc__p_PtrList,
  _swigc__p_Quadrupole,
  _swigc__p_Radius,
  _swigc__p_Record,
  _swigc__p_Shapelet,
  _swigc__p_ShapeletCovariance,
  _swigc__p_ShapeletVector,
  _swigc__p_SinglePixel,
  _swigc__p_Source,
  _swigc__p_SourceCatalog,
  _swigc__p_SourceRecord,
  _swigc__p_SourceTable,
  _swigc__p_SpanList,
  _swigc__p_SpatialCellSet,
  _swigc__p_SpatialFunction,
  _swigc__p_SpatialFunctionPtr,
  _swigc__p_StreamPtr,
  _swigc__p_StringArray,
  _swigc__p_Table,
  _swigc__p_TransformDerivativeMatrix,
  _swigc__p_Value,
  _swigc__p_Variance,
  _swigc__p_VariancePtr,
  _swigc__p_VectorTT_lsst__afw__table__SourceRecord_lsst__afw__table__SourceTable_t,
  _swigc__p_Wcs,
  _swigc__p_afw__geom__ellipses__Axes,
  _swigc__p_afw__geom__ellipses__Ellipse,
  _swigc__p_afw__image__ExposureT_PixelT_t,
  _swigc__p_afw__table__SourceRecord,
  _swigc__p_allocator_type,
  _swigc__p_argument_type,
  _swigc__p_base,
  _swigc__p_bool,
  _swigc__p_boost__shared_ptrT_Eigen__MatrixXd_const_t,
  _swigc__p_boost__shared_ptrT_afw__image__Wcs_const_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorXYTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Distortion_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__NullDistortion_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__RadialPolyDistortion_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__Coord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSet_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__HeavyFootprintT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Peak_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Psf_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__DetectorXYTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__IdentityXYTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__InvertedXYTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__RadialXYTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__Span_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__XYTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__Calib_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__CoaddInputs_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_uint64_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureInfo_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_uint64_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_uint64_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_uint64_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskT_uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__Wcs_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__XYTransformFromWcsPair_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__ApproximateT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__BackgroundMI_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Background_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__BasePolynomialFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__CandidateVisitor_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__CovariogramT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Interpolate_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Kernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NeuralNetCovariogramT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellSet_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SquaredExpCovariogramT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__StatisticsControl_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__WarpingControl_const_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__BaseRecord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__BaseTable_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__ExposureRecord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__ExposureTable_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__IdFactory_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__ReferenceMatchVector_const_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__SimpleRecord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__SimpleTable_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__SourceRecord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__SourceTable_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Footprint_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Calib_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__TanWcs_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__image__Wcs_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__DeltaFunctionKernel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FixedKernel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_double_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function1T_float_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_double_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Function2T_float_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_double_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__FunctionT_float_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__LinearCombinationKernel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__SeparableKernel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__table__io__Persistable_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__Citizen_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__Persistable_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__PropertyList_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__AlgorithmControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ApertureFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidAlgorithm_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CentroidControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ClassificationControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CoaddPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__CorrectFluxesControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__Defect_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__DoubleGaussianPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__EllipticalApertureFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__FluxAlgorithm_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__FluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianCentroidControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__GaussianFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ImagePsf_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__KernelPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__LocalShapeletKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveCentroidControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__NaiveFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PcaPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PeakLikelihoodFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PixelFlagControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PsfCandidateT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__PsfFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__RecordCentroidControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SdssCentroidControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SdssShapeControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeAlgorithm_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletInterpolation_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__ShapeletPsfCandidate_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__Shapelet_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SincFluxControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SingleGaussianPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__SkyCoordControl_t,
  _swigc__p_boost__shared_ptrT_lsst__meas__algorithms__WarpedPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__Definition_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__Policy_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t,
  _swigc__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Footprint_t_t_t_t,
  _swigc__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__Defect__Ptr_std__allocatorT_lsst__meas__algorithms__Defect__Ptr_t_t_t,
  _swigc__p_boost__shared_ptrT_std__vectorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_std__allocatorT_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateList_t_t_t,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_const_iterator,
  _swigc__p_const_reference,
  _swigc__p_const_reverse_iterator,
  _swigc__p_const_x_iterator,
  _swigc__p_const_xy_locator,
  _swigc__p_const_y_iterator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_fast_iterator,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_image_category,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_iterator,
  _swigc__p_kernel_fill_factor,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_lsst__afw__cameraGeom__Amp,
  _swigc__p_lsst__afw__cameraGeom__Camera,
  _swigc__p_lsst__afw__cameraGeom__Ccd,
  _swigc__p_lsst__afw__cameraGeom__Detector,
  _swigc__p_lsst__afw__cameraGeom__DetectorMosaic,
  _swigc__p_lsst__afw__cameraGeom__DetectorXYTransform,
  _swigc__p_lsst__afw__cameraGeom__Raft,
  _swigc__p_lsst__afw__coord__Coord,
  _swigc__p_lsst__afw__coord__EclipticCoord,
  _swigc__p_lsst__afw__coord__Fk5Coord,
  _swigc__p_lsst__afw__coord__GalacticCoord,
  _swigc__p_lsst__afw__coord__IcrsCoord,
  _swigc__p_lsst__afw__coord__TopocentricCoord,
  _swigc__p_lsst__afw__detection__Footprint,
  _swigc__p_lsst__afw__detection__FootprintSet,
  _swigc__p_lsst__afw__detection__HeavyFootprintT_float_unsigned_short_float_t,
  _swigc__p_lsst__afw__detection__HeavyFootprintT_int_unsigned_short_float_t,
  _swigc__p_lsst__afw__detection__Peak,
  _swigc__p_lsst__afw__detection__Psf,
  _swigc__p_lsst__afw__fits__FitsError,
  _swigc__p_lsst__afw__fits__FitsTypeError,
  _swigc__p_lsst__afw__fits__MemFileManager,
  _swigc__p_lsst__afw__geom__Angle,
  _swigc__p_lsst__afw__geom__Box2D,
  _swigc__p_lsst__afw__geom__Box2I,
  _swigc__p_lsst__afw__geom__CoordinateExprT_2_t,
  _swigc__p_lsst__afw__geom__CoordinateExprT_3_t,
  _swigc__p_lsst__afw__geom__ExtentT_double_2_t,
  _swigc__p_lsst__afw__geom__ExtentT_double_3_t,
  _swigc__p_lsst__afw__geom__ExtentT_int_2_t,
  _swigc__p_lsst__afw__geom__ExtentT_int_3_t,
  _swigc__p_lsst__afw__geom__IdentityXYTransform,
  _swigc__p_lsst__afw__geom__InvertedXYTransform,
  _swigc__p_lsst__afw__geom__PointT_double_2_t,
  _swigc__p_lsst__afw__geom__PointT_double_3_t,
  _swigc__p_lsst__afw__geom__PointT_int_2_t,
  _swigc__p_lsst__afw__geom__PointT_int_3_t,
  _swigc__p_lsst__afw__geom__RadialXYTransform,
  _swigc__p_lsst__afw__geom__Span,
  _swigc__p_lsst__afw__geom__XYTransform,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__DeterminantRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__LogTraceRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ConformalShear_lsst__afw__geom__ellipses__TraceRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__DeterminantRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogDeterminantRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogTraceRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__TraceRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__DeterminantRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogDeterminantRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__LogTraceRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__ReducedShear_lsst__afw__geom__ellipses__TraceRadius_t,
  _swigc__p_lsst__afw__image__Calib,
  _swigc__p_lsst__afw__image__CoaddInputs,
  _swigc__p_lsst__afw__image__DecoratedImageT_double_t,
  _swigc__p_lsst__afw__image__DecoratedImageT_float_t,
  _swigc__p_lsst__afw__image__DecoratedImageT_int_t,
  _swigc__p_lsst__afw__image__DecoratedImageT_unsigned_long_t,
  _swigc__p_lsst__afw__image__DecoratedImageT_unsigned_short_t,
  _swigc__p_lsst__afw__image__DefectBase,
  _swigc__p_lsst__afw__image__ExposureT_double_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__ExposureT_float_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__ExposureT_int_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__ExposureT_unsigned_long_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__ExposureT_unsigned_short_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__ImageBaseT_double_t,
  _swigc__p_lsst__afw__image__ImageBaseT_float_t,
  _swigc__p_lsst__afw__image__ImageBaseT_int_t,
  _swigc__p_lsst__afw__image__ImageBaseT_unsigned_long_t,
  _swigc__p_lsst__afw__image__ImageBaseT_unsigned_short_t,
  _swigc__p_lsst__afw__image__ImageSliceT_double_t,
  _swigc__p_lsst__afw__image__ImageSliceT_float_t,
  _swigc__p_lsst__afw__image__ImageT_double_t,
  _swigc__p_lsst__afw__image__ImageT_float_t,
  _swigc__p_lsst__afw__image__ImageT_int_t,
  _swigc__p_lsst__afw__image__ImageT_unsigned_long_t,
  _swigc__p_lsst__afw__image__ImageT_unsigned_short_t,
  _swigc__p_lsst__afw__image__MaskT_unsigned_short_t,
  _swigc__p_lsst__afw__image__MaskedImageT_double_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__MaskedImageT_float_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__MaskedImageT_int_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__MaskedImageT_unsigned_short_unsigned_short_float_t,
  _swigc__p_lsst__afw__image__TanWcs,
  _swigc__p_lsst__afw__image__Wcs,
  _swigc__p_lsst__afw__image__XYTransformFromWcsPair,
  _swigc__p_lsst__afw__math__AnalyticKernel,
  _swigc__p_lsst__afw__math__Background,
  _swigc__p_lsst__afw__math__BackgroundMI,
  _swigc__p_lsst__afw__math__BasePolynomialFunction2T_double_t,
  _swigc__p_lsst__afw__math__BasePolynomialFunction2T_float_t,
  _swigc__p_lsst__afw__math__BilinearWarpingKernel,
  _swigc__p_lsst__afw__math__Chebyshev1Function1T_double_t,
  _swigc__p_lsst__afw__math__Chebyshev1Function1T_float_t,
  _swigc__p_lsst__afw__math__Chebyshev1Function2T_double_t,
  _swigc__p_lsst__afw__math__Chebyshev1Function2T_float_t,
  _swigc__p_lsst__afw__math__CovariogramT_double_t,
  _swigc__p_lsst__afw__math__DeltaFunctionKernel,
  _swigc__p_lsst__afw__math__DoubleGaussianFunction2T_double_t,
  _swigc__p_lsst__afw__math__DoubleGaussianFunction2T_float_t,
  _swigc__p_lsst__afw__math__FixedKernel,
  _swigc__p_lsst__afw__math__Function1T_double_t,
  _swigc__p_lsst__afw__math__Function1T_float_t,
  _swigc__p_lsst__afw__math__Function2T_double_t,
  _swigc__p_lsst__afw__math__Function2T_float_t,
  _swigc__p_lsst__afw__math__FunctionT_double_t,
  _swigc__p_lsst__afw__math__FunctionT_float_t,
  _swigc__p_lsst__afw__math__GaussianFunction1T_double_t,
  _swigc__p_lsst__afw__math__GaussianFunction1T_float_t,
  _swigc__p_lsst__afw__math__GaussianFunction2T_double_t,
  _swigc__p_lsst__afw__math__GaussianFunction2T_float_t,
  _swigc__p_lsst__afw__math__IntegerDeltaFunction2T_double_t,
  _swigc__p_lsst__afw__math__IntegerDeltaFunction2T_float_t,
  _swigc__p_lsst__afw__math__Kernel,
  _swigc__p_lsst__afw__math__LanczosFunction1T_double_t,
  _swigc__p_lsst__afw__math__LanczosFunction1T_float_t,
  _swigc__p_lsst__afw__math__LanczosFunction2T_double_t,
  _swigc__p_lsst__afw__math__LanczosFunction2T_float_t,
  _swigc__p_lsst__afw__math__LanczosWarpingKernel,
  _swigc__p_lsst__afw__math__LinearCombinationKernel,
  _swigc__p_lsst__afw__math__NearestWarpingKernel,
  _swigc__p_lsst__afw__math__NeuralNetCovariogramT_double_t,
  _swigc__p_lsst__afw__math__NullFunction1T_double_t,
  _swigc__p_lsst__afw__math__NullFunction1T_float_t,
  _swigc__p_lsst__afw__math__NullFunction2T_double_t,
  _swigc__p_lsst__afw__math__NullFunction2T_float_t,
  _swigc__p_lsst__afw__math__PolynomialFunction1T_double_t,
  _swigc__p_lsst__afw__math__PolynomialFunction1T_float_t,
  _swigc__p_lsst__afw__math__PolynomialFunction2T_double_t,
  _swigc__p_lsst__afw__math__PolynomialFunction2T_float_t,
  _swigc__p_lsst__afw__math__SeparableKernel,
  _swigc__p_lsst__afw__math__SpatialCellCandidate,
  _swigc__p_lsst__afw__math__SpatialCellImageCandidateT_double_t,
  _swigc__p_lsst__afw__math__SpatialCellImageCandidateT_float_t,
  _swigc__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_double_t,
  _swigc__p_lsst__afw__math__SpatialCellMaskedImageCandidateT_float_t,
  _swigc__p_lsst__afw__math__SpatialCellSet,
  _swigc__p_lsst__afw__math__SquaredExpCovariogramT_double_t,
  _swigc__p_lsst__afw__table__CatalogTT_lsst__afw__table__BaseRecord_t,
  _swigc__p_lsst__afw__table__ExposureCatalogTT_lsst__afw__table__ExposureRecord_t,
  _swigc__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Centroid_t,
  _swigc__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Flux_t,
  _swigc__p_lsst__afw__table__KeyTupleT_lsst__afw__table__Shape_t,
  _swigc__p_lsst__afw__table__Schema,
  _swigc__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SimpleRecord_t,
  _swigc__p_lsst__afw__table__SortedCatalogTT_lsst__afw__table__SourceRecord_t,
  _swigc__p_lsst__afw__table__SourceColumnViewTT_lsst__afw__table__SourceRecord_t,
  _swigc__p_lsst__afw__table__io__MalformedArchiveError,
  _swigc__p_lsst__afw__table__io__Persistable,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__detection__Psf_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__AnalyticKernel_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__afw__math__Kernel_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__DoubleGaussianPsf_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__ImagePsf_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__KernelPsf_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__PcaPsf_t,
  _swigc__p_lsst__afw__table__io__PersistableFacadeT_lsst__meas__algorithms__SingleGaussianPsf_t,
  _swigc__p_lsst__afw__table__io__PersistenceError,
  _swigc__p_lsst__daf__base__Citizen,
  _swigc__p_lsst__daf__base__Persistable,
  _swigc__p_lsst__daf__base__PropertyList,
  _swigc__p_lsst__daf__base__PropertySet,
  _swigc__p_lsst__daf__base__TypeMismatchException,
  _swigc__p_lsst__daf__persistence__DbStorage,
  _swigc__p_lsst__daf__persistence__DbTsvStorage,
  _swigc__p_lsst__daf__persistence__LogicalLocation,
  _swigc__p_lsst__daf__persistence__Persistence,
  _swigc__p_lsst__daf__persistence__Storage,
  _swigc__p_lsst__meas__algorithms__Algorithm,
  _swigc__p_lsst__meas__algorithms__AlgorithmControl,
  _swigc__p_lsst__meas__algorithms__ApertureFluxControl,
  _swigc__p_lsst__meas__algorithms__CentroidAlgorithm,
  _swigc__p_lsst__meas__algorithms__CentroidControl,
  _swigc__p_lsst__meas__algorithms__ClassificationControl,
  _swigc__p_lsst__meas__algorithms__CoaddPsf,
  _swigc__p_lsst__meas__algorithms__CorrectFluxesControl,
  _swigc__p_lsst__meas__algorithms__Defect,
  _swigc__p_lsst__meas__algorithms__DoubleGaussianPsf,
  _swigc__p_lsst__meas__algorithms__EllipticalApertureFluxControl,
  _swigc__p_lsst__meas__algorithms__FluxAlgorithm,
  _swigc__p_lsst__meas__algorithms__FluxControl,
  _swigc__p_lsst__meas__algorithms__GaussianCentroidControl,
  _swigc__p_lsst__meas__algorithms__GaussianFluxControl,
  _swigc__p_lsst__meas__algorithms__ImagePsf,
  _swigc__p_lsst__meas__algorithms__KernelPsf,
  _swigc__p_lsst__meas__algorithms__LocalShapeletKernel,
  _swigc__p_lsst__meas__algorithms__MeasureSources,
  _swigc__p_lsst__meas__algorithms__MeasureSourcesBuilder,
  _swigc__p_lsst__meas__algorithms__NaiveCentroidControl,
  _swigc__p_lsst__meas__algorithms__NaiveFluxControl,
  _swigc__p_lsst__meas__algorithms__PcaPsf,
  _swigc__p_lsst__meas__algorithms__PeakLikelihoodFluxControl,
  _swigc__p_lsst__meas__algorithms__PixelFlagControl,
  _swigc__p_lsst__meas__algorithms__PsfAttributes,
  _swigc__p_lsst__meas__algorithms__PsfCandidateT_float_t,
  _swigc__p_lsst__meas__algorithms__PsfFluxControl,
  _swigc__p_lsst__meas__algorithms__RecordCentroidControl,
  _swigc__p_lsst__meas__algorithms__SdssCentroidControl,
  _swigc__p_lsst__meas__algorithms__SdssShapeControl,
  _swigc__p_lsst__meas__algorithms__ShapeAlgorithm,
  _swigc__p_lsst__meas__algorithms__ShapeControl,
  _swigc__p_lsst__meas__algorithms__Shapelet,
  _swigc__p_lsst__meas__algorithms__ShapeletInterpolation,
  _swigc__p_lsst__meas__algorithms__ShapeletKernel,
  _swigc__p_lsst__meas__algorithms__ShapeletPsfCandidate,
  _swigc__p_lsst__meas__algorithms__SincFluxControl,
  _swigc__p_lsst__meas__algorithms__SingleGaussianPsf,
  _swigc__p_lsst__meas__algorithms__SizeMagnitudeStarSelector,
  _swigc__p_lsst__meas__algorithms__SizeMagnitudeStarSelector__PsfCandidateT__PtrList,
  _swigc__p_lsst__meas__algorithms__SkyCoordControl,
  _swigc__p_lsst__meas__algorithms__WarpedPsf,
  _swigc__p_lsst__meas__algorithms__photometry__SincCoeffsT_double_t,
  _swigc__p_lsst__meas__algorithms__photometry__SincCoeffsT_float_t,
  _swigc__p_lsst__meas__algorithms__shapelet__BVec,
  _swigc__p_lsst__pex__exceptions__DomainErrorException,
  _swigc__p_lsst__pex__exceptions__InvalidParameterException,
  _swigc__p_lsst__pex__exceptions__IoErrorException,
  _swigc__p_lsst__pex__exceptions__LengthErrorException,
  _swigc__p_lsst__pex__exceptions__LogicErrorException,
  _swigc__p_lsst__pex__exceptions__MemoryException,
  _swigc__p_lsst__pex__exceptions__NotFoundException,
  _swigc__p_lsst__pex__exceptions__OutOfRangeException,
  _swigc__p_lsst__pex__exceptions__OverflowErrorException,
  _swigc__p_lsst__pex__exceptions__RangeErrorException,
  _swigc__p_lsst__pex__exceptions__RuntimeErrorException,
  _swigc__p_lsst__pex__exceptions__TimeoutException,
  _swigc__p_lsst__pex__exceptions__UnderflowErrorException,
  _swigc__p_lsst__pex__logging__LogRec,
  _swigc__p_lsst__pex__policy__BadNameError,
  _swigc__p_lsst__pex__policy__DefaultPolicyFile,
  _swigc__p_lsst__pex__policy__Definition,
  _swigc__p_lsst__pex__policy__Dictionary,
  _swigc__p_lsst__pex__policy__DictionaryError,
  _swigc__p_lsst__pex__policy__EOFError,
  _swigc__p_lsst__pex__policy__FormatSyntaxError,
  _swigc__p_lsst__pex__policy__NameNotFound,
  _swigc__p_lsst__pex__policy__ParserError,
  _swigc__p_lsst__pex__policy__Policy,
  _swigc__p_lsst__pex__policy__PolicyDestination,
  _swigc__p_lsst__pex__policy__PolicyFile,
  _swigc__p_lsst__pex__policy__PolicySource,
  _swigc__p_lsst__pex__policy__PolicyStreamDestination,
  _swigc__p_lsst__pex__policy__PolicyString,
  _swigc__p_lsst__pex__policy__PolicyStringDestination,
  _swigc__p_lsst__pex__policy__SyntaxError,
  _swigc__p_lsst__pex__policy__TypeError,
  _swigc__p_lsst__pex__policy__UnsupportedSyntax,
  _swigc__p_lsst__pex__policy__UrnPolicyFile,
  _swigc__p_lsst__pex__policy__ValidationError,
  _swigc__p_mapped_type,
  _swigc__p_memId,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_reference,
  _swigc__p_result_type,
  _swigc__p_reverse_iterator,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__listT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t,
  _swigc__p_std__locale,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_boost__shared_ptrT_lsst__meas__algorithms__Algorithm_const_t_t_t_t,
  _swigc__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t,
  _swigc__p_std__pairT_bool_double_t,
  _swigc__p_std__pairT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__pairT_double_double_t_t,
  _swigc__p_std__pairT_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t_t,
  _swigc__p_std__vectorT_Defect__Ptr_std__allocatorT_Defect__Ptr_t_t,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_std__allocatorT_boost__shared_ptrT_lsst__meas__algorithms__Defect_t_t_t,
  _swigc__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t,
  _swigc__p_streamoff,
  _swigc__p_streampos,
  _swigc__p_streamsize,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_x_iterator,
  _swigc__p_xy_locator,
  _swigc__p_xy_x_iterator,
  _swigc__p_xy_y_iterator,
  _swigc__p_y_iterator,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_boolalpha",Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_dec",Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_fixed",Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_hex",Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_internal",Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_left",Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_oct",Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_right",Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_scientific",Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showbase",Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpoint",Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpos",Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_skipws",Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_unitbuf",Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_uppercase",Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_adjustfield",Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_basefield",Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_floatfield",Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_badbit",Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_eofbit",Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_failbit",Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_goodbit",Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_app",Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ate",Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_binary",Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ios_base_in",Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_out",Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_trunc",Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_beg",Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_cur",Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_end",Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cin",Swig_var_cin_get, Swig_var_cin_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cout",Swig_var_cout_get, Swig_var_cout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cerr",Swig_var_cerr_get, Swig_var_cerr_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"clog",Swig_var_clog_get, Swig_var_clog_set);
  
  
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "LSST_BASE_BASE_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "PsfAttributes_ADAPTIVE_MOMENT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::PsfAttributes::ADAPTIVE_MOMENT)));
  SWIG_Python_SetConstant(d, "PsfAttributes_FIRST_MOMENT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::PsfAttributes::FIRST_MOMENT)));
  SWIG_Python_SetConstant(d, "PsfAttributes_SECOND_MOMENT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::PsfAttributes::SECOND_MOMENT)));
  SWIG_Python_SetConstant(d, "PsfAttributes_NOISE_EQUIVALENT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::PsfAttributes::NOISE_EQUIVALENT)));
  SWIG_Python_SetConstant(d, "PsfAttributes_BICKERTON",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::PsfAttributes::BICKERTON)));
  SWIG_Python_SetConstant(d, "LSST_MEAS_ALGORITHMS_PHOTOMETRY_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"lpc_1_c1",Swig_var_lpc_1_c1_get, Swig_var_lpc_1_c1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lpc_1_c2",Swig_var_lpc_1_c2_get, Swig_var_lpc_1_c2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lpc_1s2_c1",Swig_var_lpc_1s2_c1_get, Swig_var_lpc_1s2_c1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lpc_1s2_c2",Swig_var_lpc_1s2_c2_get, Swig_var_lpc_1s2_c2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"min2GaussianBias",Swig_var_min2GaussianBias_get, Swig_var_min2GaussianBias_set);
  SWIG_Python_SetConstant(d, "Defect_LEFT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::LEFT)));
  SWIG_Python_SetConstant(d, "Defect_NEAR_LEFT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::NEAR_LEFT)));
  SWIG_Python_SetConstant(d, "Defect_WIDE_LEFT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::WIDE_LEFT)));
  SWIG_Python_SetConstant(d, "Defect_MIDDLE",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::MIDDLE)));
  SWIG_Python_SetConstant(d, "Defect_WIDE_NEAR_LEFT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::WIDE_NEAR_LEFT)));
  SWIG_Python_SetConstant(d, "Defect_WIDE",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::WIDE)));
  SWIG_Python_SetConstant(d, "Defect_WIDE_NEAR_RIGHT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::WIDE_NEAR_RIGHT)));
  SWIG_Python_SetConstant(d, "Defect_NEAR_RIGHT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::NEAR_RIGHT)));
  SWIG_Python_SetConstant(d, "Defect_WIDE_RIGHT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::WIDE_RIGHT)));
  SWIG_Python_SetConstant(d, "Defect_RIGHT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::RIGHT)));
  SWIG_Python_SetConstant(d, "Defect_WIDE_DEFECT",SWIG_From_int(static_cast< int >(lsst::meas::algorithms::Defect::WIDE_DEFECT)));
  
  import_array();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

