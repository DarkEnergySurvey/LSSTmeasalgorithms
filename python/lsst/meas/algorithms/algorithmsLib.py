# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""

Python bindings for meas/algorithms module

"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_algorithmsLib', [dirname(__file__)])
        except ImportError:
            import _algorithmsLib
            return _algorithmsLib
        if fp is not None:
            try:
                _mod = imp.load_module('_algorithmsLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _algorithmsLib = swig_import_helper()
    del swig_import_helper
else:
    import _algorithmsLib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _algorithmsLib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _algorithmsLib.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _algorithmsLib.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _algorithmsLib.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _algorithmsLib.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _algorithmsLib.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _algorithmsLib.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _algorithmsLib.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _algorithmsLib.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _algorithmsLib.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _algorithmsLib.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _algorithmsLib.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _algorithmsLib.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _algorithmsLib.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _algorithmsLib.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _algorithmsLib.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _algorithmsLib.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _algorithmsLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    """Proxy of C++ std::ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _algorithmsLib.ios_base_erase_event
    imbue_event = _algorithmsLib.ios_base_imbue_event
    copyfmt_event = _algorithmsLib.ios_base_copyfmt_event
    def register_callback(self, *args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _algorithmsLib.ios_base_register_callback(self, *args)

    def flags(self, *args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _algorithmsLib.ios_base_flags(self, *args)

    def setf(self, *args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _algorithmsLib.ios_base_setf(self, *args)

    def unsetf(self, *args):
        """unsetf(self, fmtflags __mask)"""
        return _algorithmsLib.ios_base_unsetf(self, *args)

    def precision(self, *args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _algorithmsLib.ios_base_precision(self, *args)

    def width(self, *args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _algorithmsLib.ios_base_width(self, *args)

    def sync_with_stdio(__sync = True):
        """
        sync_with_stdio(bool __sync = True) -> bool
        sync_with_stdio() -> bool
        """
        return _algorithmsLib.ios_base_sync_with_stdio(__sync)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _algorithmsLib.ios_base_imbue(self, *args)

    def getloc(self):
        """getloc(self) -> locale"""
        return _algorithmsLib.ios_base_getloc(self)

    def xalloc():
        """xalloc() -> int"""
        return _algorithmsLib.ios_base_xalloc()

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(self, *args):
        """iword(self, int __ix) -> long"""
        return _algorithmsLib.ios_base_iword(self, *args)

    def pword(self, *args):
        """pword(self, int __ix) -> void"""
        return _algorithmsLib.ios_base_pword(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _algorithmsLib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _algorithmsLib.cvar
ios_base.boolalpha = _algorithmsLib.cvar.ios_base_boolalpha
ios_base.dec = _algorithmsLib.cvar.ios_base_dec
ios_base.fixed = _algorithmsLib.cvar.ios_base_fixed
ios_base.hex = _algorithmsLib.cvar.ios_base_hex
ios_base.internal = _algorithmsLib.cvar.ios_base_internal
ios_base.left = _algorithmsLib.cvar.ios_base_left
ios_base.oct = _algorithmsLib.cvar.ios_base_oct
ios_base.right = _algorithmsLib.cvar.ios_base_right
ios_base.scientific = _algorithmsLib.cvar.ios_base_scientific
ios_base.showbase = _algorithmsLib.cvar.ios_base_showbase
ios_base.showpoint = _algorithmsLib.cvar.ios_base_showpoint
ios_base.showpos = _algorithmsLib.cvar.ios_base_showpos
ios_base.skipws = _algorithmsLib.cvar.ios_base_skipws
ios_base.unitbuf = _algorithmsLib.cvar.ios_base_unitbuf
ios_base.uppercase = _algorithmsLib.cvar.ios_base_uppercase
ios_base.adjustfield = _algorithmsLib.cvar.ios_base_adjustfield
ios_base.basefield = _algorithmsLib.cvar.ios_base_basefield
ios_base.floatfield = _algorithmsLib.cvar.ios_base_floatfield
ios_base.badbit = _algorithmsLib.cvar.ios_base_badbit
ios_base.eofbit = _algorithmsLib.cvar.ios_base_eofbit
ios_base.failbit = _algorithmsLib.cvar.ios_base_failbit
ios_base.goodbit = _algorithmsLib.cvar.ios_base_goodbit
ios_base.app = _algorithmsLib.cvar.ios_base_app
ios_base.ate = _algorithmsLib.cvar.ios_base_ate
ios_base.binary = _algorithmsLib.cvar.ios_base_binary
ios_base.ios_base_in = _algorithmsLib.cvar.ios_base_ios_base_in
ios_base.out = _algorithmsLib.cvar.ios_base_out
ios_base.trunc = _algorithmsLib.cvar.ios_base_trunc
ios_base.beg = _algorithmsLib.cvar.ios_base_beg
ios_base.cur = _algorithmsLib.cvar.ios_base_cur
ios_base.end = _algorithmsLib.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  """
    sync_with_stdio(bool __sync = True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _algorithmsLib.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
  """ios_base_xalloc() -> int"""
  return _algorithmsLib.ios_base_xalloc()

class ios(ios_base):
    """Proxy of C++ std::basic_ios<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self):
        """rdstate(self) -> iostate"""
        return _algorithmsLib.ios_rdstate(self)

    def clear(self, *args):
        """
        clear(self, iostate __state = goodbit)
        clear(self)
        """
        return _algorithmsLib.ios_clear(self, *args)

    def setstate(self, *args):
        """setstate(self, iostate __state)"""
        return _algorithmsLib.ios_setstate(self, *args)

    def good(self):
        """good(self) -> bool"""
        return _algorithmsLib.ios_good(self)

    def eof(self):
        """eof(self) -> bool"""
        return _algorithmsLib.ios_eof(self)

    def fail(self):
        """fail(self) -> bool"""
        return _algorithmsLib.ios_fail(self)

    def bad(self):
        """bad(self) -> bool"""
        return _algorithmsLib.ios_bad(self)

    def exceptions(self, *args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _algorithmsLib.ios_exceptions(self, *args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _algorithmsLib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _algorithmsLib.ios_tie(self, *args)

    def rdbuf(self, *args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _algorithmsLib.ios_rdbuf(self, *args)

    def copyfmt(self, *args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _algorithmsLib.ios_copyfmt(self, *args)

    def fill(self, *args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _algorithmsLib.ios_fill(self, *args)

    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _algorithmsLib.ios_imbue(self, *args)

    def narrow(self, *args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _algorithmsLib.ios_narrow(self, *args)

    def widen(self, *args):
        """widen(self, char __c) -> char_type"""
        return _algorithmsLib.ios_widen(self, *args)

ios_swigregister = _algorithmsLib.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ std::basic_ostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _algorithmsLib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _algorithmsLib.ostream___lshift__(self, *args)

    def put(self, *args):
        """put(self, char_type __c) -> ostream"""
        return _algorithmsLib.ostream_put(self, *args)

    def write(self, *args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _algorithmsLib.ostream_write(self, *args)

    def flush(self):
        """flush(self) -> ostream"""
        return _algorithmsLib.ostream_flush(self)

    def tellp(self):
        """tellp(self) -> pos_type"""
        return _algorithmsLib.ostream_tellp(self)

    def seekp(self, *args):
        """
        seekp(self, pos_type arg0) -> ostream
        seekp(self, off_type arg0, seekdir arg1) -> ostream
        """
        return _algorithmsLib.ostream_seekp(self, *args)

ostream_swigregister = _algorithmsLib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ std::basic_istream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _algorithmsLib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _algorithmsLib.istream___rshift__(self, *args)

    def gcount(self):
        """gcount(self) -> streamsize"""
        return _algorithmsLib.istream_gcount(self)

    def get(self, *args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _algorithmsLib.istream_get(self, *args)

    def getline(self, *args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _algorithmsLib.istream_getline(self, *args)

    def ignore(self, *args):
        """
        ignore(self, streamsize __n = 1, int_type __delim = std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n = 1) -> istream
        ignore(self) -> istream
        """
        return _algorithmsLib.istream_ignore(self, *args)

    def peek(self):
        """peek(self) -> int_type"""
        return _algorithmsLib.istream_peek(self)

    def read(self, *args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _algorithmsLib.istream_read(self, *args)

    def readsome(self, *args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _algorithmsLib.istream_readsome(self, *args)

    def putback(self, *args):
        """putback(self, char_type __c) -> istream"""
        return _algorithmsLib.istream_putback(self, *args)

    def unget(self):
        """unget(self) -> istream"""
        return _algorithmsLib.istream_unget(self)

    def sync(self):
        """sync(self) -> int"""
        return _algorithmsLib.istream_sync(self)

    def tellg(self):
        """tellg(self) -> pos_type"""
        return _algorithmsLib.istream_tellg(self)

    def seekg(self, *args):
        """
        seekg(self, pos_type arg0) -> istream
        seekg(self, off_type arg0, seekdir arg1) -> istream
        """
        return _algorithmsLib.istream_seekg(self, *args)

istream_swigregister = _algorithmsLib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ std::basic_iostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _algorithmsLib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _algorithmsLib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _algorithmsLib.endl_cb_ptr

def endl(*args):
  """endl(ostream arg0) -> ostream"""
  return _algorithmsLib.endl(*args)
endl = _algorithmsLib.endl
ends_cb_ptr = _algorithmsLib.ends_cb_ptr

def ends(*args):
  """ends(ostream arg0) -> ostream"""
  return _algorithmsLib.ends(*args)
ends = _algorithmsLib.ends
flush_cb_ptr = _algorithmsLib.flush_cb_ptr

def flush(*args):
  """flush(ostream arg0) -> ostream"""
  return _algorithmsLib.flush(*args)
flush = _algorithmsLib.flush
SHARED_PTR_DISOWN = _algorithmsLib.SHARED_PTR_DISOWN
LSST_BASE_BASE_H = _algorithmsLib.LSST_BASE_BASE_H
import lsst.pex.exceptions

import lsst.afw.geom.geomLib
import lsst.daf.base.baseLib
import lsst.pex.exceptions.exceptionsLib
import lsst.afw.geom.ellipses.ellipsesLib
import lsst.afw.image.imageLib
import lsst.pex.policy.policyLib
import lsst.daf.persistence.persistenceLib
import lsst.pex.logging.loggingLib
import lsst.afw.coord.coordLib
import lsst.afw.fits.fitsLib
import lsst.afw.table.io.ioLib
import lsst.afw.cameraGeom.cameraGeomLib
import lsst.afw.detection.detectionLib
import lsst.afw.math.mathLib
class PsfAttributes(_object):
    """Proxy of C++ lsst::meas::algorithms::PsfAttributes class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PsfAttributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsfAttributes, name)
    __repr__ = _swig_repr
    ADAPTIVE_MOMENT = _algorithmsLib.PsfAttributes_ADAPTIVE_MOMENT
    FIRST_MOMENT = _algorithmsLib.PsfAttributes_FIRST_MOMENT
    SECOND_MOMENT = _algorithmsLib.PsfAttributes_SECOND_MOMENT
    NOISE_EQUIVALENT = _algorithmsLib.PsfAttributes_NOISE_EQUIVALENT
    BICKERTON = _algorithmsLib.PsfAttributes_BICKERTON
    def __init__(self, *args): 
        """
        __init__(self, __dummy_212__ psf, int iX, int iY) -> PsfAttributes
        __init__(self, __dummy_212__ psf, Point2I cen) -> PsfAttributes
        """
        this = _algorithmsLib.new_PsfAttributes(*args)
        try: self.this.append(this)
        except: self.this = this
    def computeGaussianWidth(self, *args):
        """
        computeGaussianWidth(self, Method how = ADAPTIVE_MOMENT) -> double
        computeGaussianWidth(self) -> double
        """
        return _algorithmsLib.PsfAttributes_computeGaussianWidth(self, *args)

    def computeEffectiveArea(self):
        """computeEffectiveArea(self) -> double"""
        return _algorithmsLib.PsfAttributes_computeEffectiveArea(self)

    __swig_destroy__ = _algorithmsLib.delete_PsfAttributes
    __del__ = lambda self : None;
PsfAttributes_swigregister = _algorithmsLib.PsfAttributes_swigregister
PsfAttributes_swigregister(PsfAttributes)

class PsfCandidateF(lsst.afw.math.mathLib.SpatialCellMaskedImageCandidateF):
    """Proxy of C++ lsst::meas::algorithms::PsfCandidate<(float)> class"""
    __swig_setmethods__ = {}
    for _s in [lsst.afw.math.mathLib.SpatialCellMaskedImageCandidateF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PsfCandidateF, name, value)
    __swig_getmethods__ = {}
    for _s in [lsst.afw.math.mathLib.SpatialCellMaskedImageCandidateF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsfCandidateF, name)
    __repr__ = _swig_repr
    def getXCenter(self):
        """getXCenter(self) -> float"""
        return _algorithmsLib.PsfCandidateF_getXCenter(self)

    def getYCenter(self):
        """getYCenter(self) -> float"""
        return _algorithmsLib.PsfCandidateF_getYCenter(self)

    def __init__(self, *args): 
        """
        __init__(self, __dummy_437__ source, __dummy_208__ parentExposure) -> PsfCandidateF
        __init__(self, __dummy_437__ source, __dummy_208__ parentExposure, 
            double xCenter, double yCenter) -> PsfCandidateF
        """
        this = _algorithmsLib.new_PsfCandidateF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_PsfCandidateF
    __del__ = lambda self : None;
    def getCandidateRating(self):
        """getCandidateRating(self) -> double"""
        return _algorithmsLib.PsfCandidateF_getCandidateRating(self)

    def getSource(self):
        """getSource(self) -> __dummy_437__"""
        return _algorithmsLib.PsfCandidateF_getSource(self)

    def getAmplitude(self):
        """getAmplitude(self) -> double"""
        return _algorithmsLib.PsfCandidateF_getAmplitude(self)

    def setAmplitude(self, *args):
        """setAmplitude(self, double amplitude)"""
        return _algorithmsLib.PsfCandidateF_setAmplitude(self, *args)

    def getVar(self):
        """getVar(self) -> double"""
        return _algorithmsLib.PsfCandidateF_getVar(self)

    def setVar(self, *args):
        """setVar(self, double var)"""
        return _algorithmsLib.PsfCandidateF_setVar(self, *args)

    def getMaskedImage(self, *args):
        """
        getMaskedImage(self) -> __dummy_146__
        getMaskedImage(self, int width, int height) -> __dummy_146__
        """
        return _algorithmsLib.PsfCandidateF_getMaskedImage(self, *args)

    def getOffsetImage(self, *args):
        """getOffsetImage(self, string algorithm, unsigned int buffer) -> __dummy_145__"""
        return _algorithmsLib.PsfCandidateF_getOffsetImage(self, *args)

    def getBorderWidth():
        """getBorderWidth() -> int"""
        return _algorithmsLib.PsfCandidateF_getBorderWidth()

    if _newclass:getBorderWidth = staticmethod(getBorderWidth)
    __swig_getmethods__["getBorderWidth"] = lambda x: getBorderWidth
    def setBorderWidth(*args):
        """setBorderWidth(int border)"""
        return _algorithmsLib.PsfCandidateF_setBorderWidth(*args)

    if _newclass:setBorderWidth = staticmethod(setBorderWidth)
    __swig_getmethods__["setBorderWidth"] = lambda x: setBorderWidth
PsfCandidateF_swigregister = _algorithmsLib.PsfCandidateF_swigregister
PsfCandidateF_swigregister(PsfCandidateF)

def PsfCandidateF_getBorderWidth():
  """PsfCandidateF_getBorderWidth() -> int"""
  return _algorithmsLib.PsfCandidateF_getBorderWidth()

def PsfCandidateF_setBorderWidth(*args):
  """PsfCandidateF_setBorderWidth(int border)"""
  return _algorithmsLib.PsfCandidateF_setBorderWidth(*args)


def makePsfCandidate(*args):
  """makePsfCandidate(__dummy_437__ source, __dummy_207__ image) -> __dummy_441__"""
  return _algorithmsLib.makePsfCandidate(*args)

def cast_PsfCandidateF(*args):
  """cast_PsfCandidateF(__dummy_387__ candidate) -> __dummy_441__"""
  return _algorithmsLib.cast_PsfCandidateF(*args)
class pair_Psf_vector_double(_object):
    """Proxy of C++ std::pair<(lsst::afw::math::LinearCombinationKernel::Ptr,std::vector<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, pair_Psf_vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_Psf_vector_double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pair_Psf_vector_double
        __init__(self, __dummy_361__ first, VectorDouble second) -> pair_Psf_vector_double
        __init__(self, pair_Psf_vector_double p) -> pair_Psf_vector_double
        """
        this = _algorithmsLib.new_pair_Psf_vector_double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _algorithmsLib.pair_Psf_vector_double_first_set
    __swig_getmethods__["first"] = _algorithmsLib.pair_Psf_vector_double_first_get
    if _newclass:first = _swig_property(_algorithmsLib.pair_Psf_vector_double_first_get, _algorithmsLib.pair_Psf_vector_double_first_set)
    __swig_setmethods__["second"] = _algorithmsLib.pair_Psf_vector_double_second_set
    __swig_getmethods__["second"] = _algorithmsLib.pair_Psf_vector_double_second_get
    if _newclass:second = _swig_property(_algorithmsLib.pair_Psf_vector_double_second_get, _algorithmsLib.pair_Psf_vector_double_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _algorithmsLib.delete_pair_Psf_vector_double
    __del__ = lambda self : None;
pair_Psf_vector_double_swigregister = _algorithmsLib.pair_Psf_vector_double_swigregister
pair_Psf_vector_double_swigregister(pair_Psf_vector_double)

class pair_vector_double_KernelList(_object):
    """Proxy of C++ std::pair<(std::vector<(double)>,lsst::afw::math::KernelList)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, pair_vector_double_KernelList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_vector_double_KernelList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pair_vector_double_KernelList
        __init__(self, VectorDouble first, KernelList second) -> pair_vector_double_KernelList
        __init__(self, pair_vector_double_KernelList p) -> pair_vector_double_KernelList
        """
        this = _algorithmsLib.new_pair_vector_double_KernelList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _algorithmsLib.pair_vector_double_KernelList_first_set
    __swig_getmethods__["first"] = _algorithmsLib.pair_vector_double_KernelList_first_get
    if _newclass:first = _swig_property(_algorithmsLib.pair_vector_double_KernelList_first_get, _algorithmsLib.pair_vector_double_KernelList_first_set)
    __swig_setmethods__["second"] = _algorithmsLib.pair_vector_double_KernelList_second_set
    __swig_getmethods__["second"] = _algorithmsLib.pair_vector_double_KernelList_second_get
    if _newclass:second = _swig_property(_algorithmsLib.pair_vector_double_KernelList_second_get, _algorithmsLib.pair_vector_double_KernelList_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _algorithmsLib.delete_pair_vector_double_KernelList
    __del__ = lambda self : None;
pair_vector_double_KernelList_swigregister = _algorithmsLib.pair_vector_double_KernelList_swigregister
pair_vector_double_KernelList_swigregister(pair_vector_double_KernelList)

class pair_bool_double(_object):
    """Proxy of C++ std::pair<(bool,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, pair_bool_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_bool_double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pair_bool_double
        __init__(self, bool first, double second) -> pair_bool_double
        __init__(self, pair_bool_double p) -> pair_bool_double
        """
        this = _algorithmsLib.new_pair_bool_double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _algorithmsLib.pair_bool_double_first_set
    __swig_getmethods__["first"] = _algorithmsLib.pair_bool_double_first_get
    if _newclass:first = _swig_property(_algorithmsLib.pair_bool_double_first_get, _algorithmsLib.pair_bool_double_first_set)
    __swig_setmethods__["second"] = _algorithmsLib.pair_bool_double_second_set
    __swig_getmethods__["second"] = _algorithmsLib.pair_bool_double_second_get
    if _newclass:second = _swig_property(_algorithmsLib.pair_bool_double_second_get, _algorithmsLib.pair_bool_double_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _algorithmsLib.delete_pair_bool_double
    __del__ = lambda self : None;
pair_bool_double_swigregister = _algorithmsLib.pair_bool_double_swigregister
pair_bool_double_swigregister(pair_bool_double)

class pair_Kernel_double_double(_object):
    """Proxy of C++ std::pair<(lsst::afw::math::Kernel::Ptr,std::pair<(double,double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, pair_Kernel_double_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_Kernel_double_double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pair_Kernel_double_double
        __init__(self, __dummy_337__ first, pairDoubleDouble second) -> pair_Kernel_double_double
        __init__(self, pair_Kernel_double_double p) -> pair_Kernel_double_double
        """
        this = _algorithmsLib.new_pair_Kernel_double_double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _algorithmsLib.pair_Kernel_double_double_first_set
    __swig_getmethods__["first"] = _algorithmsLib.pair_Kernel_double_double_first_get
    if _newclass:first = _swig_property(_algorithmsLib.pair_Kernel_double_double_first_get, _algorithmsLib.pair_Kernel_double_double_first_set)
    __swig_setmethods__["second"] = _algorithmsLib.pair_Kernel_double_double_second_set
    __swig_getmethods__["second"] = _algorithmsLib.pair_Kernel_double_double_second_get
    if _newclass:second = _swig_property(_algorithmsLib.pair_Kernel_double_double_second_get, _algorithmsLib.pair_Kernel_double_double_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _algorithmsLib.delete_pair_Kernel_double_double
    __del__ = lambda self : None;
pair_Kernel_double_double_swigregister = _algorithmsLib.pair_Kernel_double_double_swigregister
pair_Kernel_double_double_swigregister(pair_Kernel_double_double)


def fitKernelParamsToImage(*args):
  """
    fitKernelParamsToImage(LinearCombinationKernel kernel, MaskedImageF image, 
        Point2D pos) -> pair_vector_double_KernelList
    """
  return _algorithmsLib.fitKernelParamsToImage(*args)

def fitKernelToImage(*args):
  """
    fitKernelToImage(LinearCombinationKernel kernel, MaskedImageF image, 
        Point2D pos) -> pair_Kernel_double_double
    """
  return _algorithmsLib.fitKernelToImage(*args)
class ImagePsfPersistableFacade(_object):
    """Proxy of C++ lsst::afw::table::io::PersistableFacade<(lsst::meas::algorithms::ImagePsf)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ImagePsfPersistableFacade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImagePsfPersistableFacade, name)
    __repr__ = _swig_repr
    def readFits(*args):
        """
        readFits(string fileName, int hdu = 0) -> __dummy_447__
        readFits(string fileName) -> __dummy_447__
        readFits(MemFileManager manager, int hdu = 0) -> __dummy_447__
        readFits(MemFileManager manager) -> __dummy_447__
        """
        return _algorithmsLib.ImagePsfPersistableFacade_readFits(*args)

    if _newclass:readFits = staticmethod(readFits)
    __swig_getmethods__["readFits"] = lambda x: readFits
    def __init__(self): 
        """__init__(self) -> ImagePsfPersistableFacade"""
        this = _algorithmsLib.new_ImagePsfPersistableFacade()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_ImagePsfPersistableFacade
    __del__ = lambda self : None;
ImagePsfPersistableFacade_swigregister = _algorithmsLib.ImagePsfPersistableFacade_swigregister
ImagePsfPersistableFacade_swigregister(ImagePsfPersistableFacade)

def createKernelFromPsfCandidates(*args):
  """
    createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, 
        int nEigenComponents, int spatialOrder, int ksize, 
        int nStarPerCell = -1, bool constantWeight = True, 
        int border = 3) -> pair_Psf_vector_double
    createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, 
        int nEigenComponents, int spatialOrder, int ksize, 
        int nStarPerCell = -1, bool constantWeight = True) -> pair_Psf_vector_double
    createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, 
        int nEigenComponents, int spatialOrder, int ksize, 
        int nStarPerCell = -1) -> pair_Psf_vector_double
    createKernelFromPsfCandidates(SpatialCellSet psfCells, Extent2I dims, Point2I xy0, 
        int nEigenComponents, int spatialOrder, int ksize) -> pair_Psf_vector_double
    """
  return _algorithmsLib.createKernelFromPsfCandidates(*args)

def fitSpatialKernelFromPsfCandidates(*args):
  """
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, int nStarPerCell = -1, 
        double tolerance = 1e-5, double _lambda = 0.0) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, int nStarPerCell = -1, 
        double tolerance = 1e-5) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, int nStarPerCell = -1) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit, 
        int nStarPerCell = -1, double tolerance = 1e-5, 
        double _lambda = 0.0) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit, 
        int nStarPerCell = -1, double tolerance = 1e-5) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit, 
        int nStarPerCell = -1) -> pair_bool_double
    fitSpatialKernelFromPsfCandidates(Kernel kernel, SpatialCellSet psfCells, bool doNonLinearFit) -> pair_bool_double
    """
  return _algorithmsLib.fitSpatialKernelFromPsfCandidates(*args)

def countPsfCandidates(*args):
  """
    countPsfCandidates(SpatialCellSet psfCells, int nStarPerCell = -1) -> int
    countPsfCandidates(SpatialCellSet psfCells) -> int
    """
  return _algorithmsLib.countPsfCandidates(*args)

def subtractPsf(*args):
  """
    subtractPsf(Psf psf, MaskedImageF data, double x, double y, double psfFlux = std::numeric_limits< double >::quiet_NaN()) -> double
    subtractPsf(Psf psf, MaskedImageF data, double x, double y) -> double
    """
  return _algorithmsLib.subtractPsf(*args)

def ImagePsfPersistableFacade_readFits(*args):
  """
    readFits(string fileName, int hdu = 0) -> __dummy_447__
    readFits(string fileName) -> __dummy_447__
    readFits(MemFileManager manager, int hdu = 0) -> __dummy_447__
    ImagePsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_447__
    """
  return _algorithmsLib.ImagePsfPersistableFacade_readFits(*args)

class KernelPsfPersistableFacade(_object):
    """Proxy of C++ lsst::afw::table::io::PersistableFacade<(lsst::meas::algorithms::KernelPsf)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, KernelPsfPersistableFacade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KernelPsfPersistableFacade, name)
    __repr__ = _swig_repr
    def readFits(*args):
        """
        readFits(string fileName, int hdu = 0) -> __dummy_453__
        readFits(string fileName) -> __dummy_453__
        readFits(MemFileManager manager, int hdu = 0) -> __dummy_453__
        readFits(MemFileManager manager) -> __dummy_453__
        """
        return _algorithmsLib.KernelPsfPersistableFacade_readFits(*args)

    if _newclass:readFits = staticmethod(readFits)
    __swig_getmethods__["readFits"] = lambda x: readFits
    def __init__(self): 
        """__init__(self) -> KernelPsfPersistableFacade"""
        this = _algorithmsLib.new_KernelPsfPersistableFacade()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_KernelPsfPersistableFacade
    __del__ = lambda self : None;
KernelPsfPersistableFacade_swigregister = _algorithmsLib.KernelPsfPersistableFacade_swigregister
KernelPsfPersistableFacade_swigregister(KernelPsfPersistableFacade)

def KernelPsfPersistableFacade_readFits(*args):
  """
    readFits(string fileName, int hdu = 0) -> __dummy_453__
    readFits(string fileName) -> __dummy_453__
    readFits(MemFileManager manager, int hdu = 0) -> __dummy_453__
    KernelPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_453__
    """
  return _algorithmsLib.KernelPsfPersistableFacade_readFits(*args)

class SingleGaussianPsfPersistableFacade(_object):
    """Proxy of C++ lsst::afw::table::io::PersistableFacade<(lsst::meas::algorithms::SingleGaussianPsf)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SingleGaussianPsfPersistableFacade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleGaussianPsfPersistableFacade, name)
    __repr__ = _swig_repr
    def readFits(*args):
        """
        readFits(string fileName, int hdu = 0) -> __dummy_459__
        readFits(string fileName) -> __dummy_459__
        readFits(MemFileManager manager, int hdu = 0) -> __dummy_459__
        readFits(MemFileManager manager) -> __dummy_459__
        """
        return _algorithmsLib.SingleGaussianPsfPersistableFacade_readFits(*args)

    if _newclass:readFits = staticmethod(readFits)
    __swig_getmethods__["readFits"] = lambda x: readFits
    def __init__(self): 
        """__init__(self) -> SingleGaussianPsfPersistableFacade"""
        this = _algorithmsLib.new_SingleGaussianPsfPersistableFacade()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_SingleGaussianPsfPersistableFacade
    __del__ = lambda self : None;
SingleGaussianPsfPersistableFacade_swigregister = _algorithmsLib.SingleGaussianPsfPersistableFacade_swigregister
SingleGaussianPsfPersistableFacade_swigregister(SingleGaussianPsfPersistableFacade)

def SingleGaussianPsfPersistableFacade_readFits(*args):
  """
    readFits(string fileName, int hdu = 0) -> __dummy_459__
    readFits(string fileName) -> __dummy_459__
    readFits(MemFileManager manager, int hdu = 0) -> __dummy_459__
    SingleGaussianPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_459__
    """
  return _algorithmsLib.SingleGaussianPsfPersistableFacade_readFits(*args)

class DoubleGaussianPsfPersistableFacade(_object):
    """Proxy of C++ lsst::afw::table::io::PersistableFacade<(lsst::meas::algorithms::DoubleGaussianPsf)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DoubleGaussianPsfPersistableFacade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleGaussianPsfPersistableFacade, name)
    __repr__ = _swig_repr
    def readFits(*args):
        """
        readFits(string fileName, int hdu = 0) -> __dummy_465__
        readFits(string fileName) -> __dummy_465__
        readFits(MemFileManager manager, int hdu = 0) -> __dummy_465__
        readFits(MemFileManager manager) -> __dummy_465__
        """
        return _algorithmsLib.DoubleGaussianPsfPersistableFacade_readFits(*args)

    if _newclass:readFits = staticmethod(readFits)
    __swig_getmethods__["readFits"] = lambda x: readFits
    def __init__(self): 
        """__init__(self) -> DoubleGaussianPsfPersistableFacade"""
        this = _algorithmsLib.new_DoubleGaussianPsfPersistableFacade()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_DoubleGaussianPsfPersistableFacade
    __del__ = lambda self : None;
DoubleGaussianPsfPersistableFacade_swigregister = _algorithmsLib.DoubleGaussianPsfPersistableFacade_swigregister
DoubleGaussianPsfPersistableFacade_swigregister(DoubleGaussianPsfPersistableFacade)

def DoubleGaussianPsfPersistableFacade_readFits(*args):
  """
    readFits(string fileName, int hdu = 0) -> __dummy_465__
    readFits(string fileName) -> __dummy_465__
    readFits(MemFileManager manager, int hdu = 0) -> __dummy_465__
    DoubleGaussianPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_465__
    """
  return _algorithmsLib.DoubleGaussianPsfPersistableFacade_readFits(*args)

class PcaPsfPersistableFacade(_object):
    """Proxy of C++ lsst::afw::table::io::PersistableFacade<(lsst::meas::algorithms::PcaPsf)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PcaPsfPersistableFacade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PcaPsfPersistableFacade, name)
    __repr__ = _swig_repr
    def readFits(*args):
        """
        readFits(string fileName, int hdu = 0) -> __dummy_471__
        readFits(string fileName) -> __dummy_471__
        readFits(MemFileManager manager, int hdu = 0) -> __dummy_471__
        readFits(MemFileManager manager) -> __dummy_471__
        """
        return _algorithmsLib.PcaPsfPersistableFacade_readFits(*args)

    if _newclass:readFits = staticmethod(readFits)
    __swig_getmethods__["readFits"] = lambda x: readFits
    def __init__(self): 
        """__init__(self) -> PcaPsfPersistableFacade"""
        this = _algorithmsLib.new_PcaPsfPersistableFacade()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_PcaPsfPersistableFacade
    __del__ = lambda self : None;
PcaPsfPersistableFacade_swigregister = _algorithmsLib.PcaPsfPersistableFacade_swigregister
PcaPsfPersistableFacade_swigregister(PcaPsfPersistableFacade)

def PcaPsfPersistableFacade_readFits(*args):
  """
    readFits(string fileName, int hdu = 0) -> __dummy_471__
    readFits(string fileName) -> __dummy_471__
    readFits(MemFileManager manager, int hdu = 0) -> __dummy_471__
    PcaPsfPersistableFacade_readFits(MemFileManager manager) -> __dummy_471__
    """
  return _algorithmsLib.PcaPsfPersistableFacade_readFits(*args)

class ImagePsf(ImagePsfPersistableFacade,lsst.afw.detection.detectionLib.Psf):
    """Proxy of C++ lsst::meas::algorithms::ImagePsf class"""
    __swig_setmethods__ = {}
    for _s in [ImagePsfPersistableFacade,lsst.afw.detection.detectionLib.Psf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ImagePsf, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagePsfPersistableFacade,lsst.afw.detection.detectionLib.Psf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImagePsf, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def swigConvert(*args):
        """swigConvert(__dummy_1__ ptr) -> __dummy_447__"""
        return _algorithmsLib.ImagePsf_swigConvert(*args)

    if _newclass:swigConvert = staticmethod(swigConvert)
    __swig_getmethods__["swigConvert"] = lambda x: swigConvert
    __swig_destroy__ = _algorithmsLib.delete_ImagePsf
    __del__ = lambda self : None;
ImagePsf_swigregister = _algorithmsLib.ImagePsf_swigregister
ImagePsf_swigregister(ImagePsf)

def ImagePsf_swigConvert(*args):
  """ImagePsf_swigConvert(__dummy_1__ ptr) -> __dummy_447__"""
  return _algorithmsLib.ImagePsf_swigConvert(*args)

class KernelPsf(KernelPsfPersistableFacade,ImagePsf):
    """Proxy of C++ lsst::meas::algorithms::KernelPsf class"""
    __swig_setmethods__ = {}
    for _s in [KernelPsfPersistableFacade,ImagePsf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, KernelPsf, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelPsfPersistableFacade,ImagePsf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Kernel kernel, Point2D averagePosition = lsst::afw::geom::Point2D()) -> KernelPsf
        __init__(self, Kernel kernel) -> KernelPsf
        """
        this = _algorithmsLib.new_KernelPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    def getKernel(self):
        """getKernel(self) -> __dummy_338__"""
        return _algorithmsLib.KernelPsf_getKernel(self)

    def getAveragePosition(self):
        """getAveragePosition(self) -> Point2D"""
        return _algorithmsLib.KernelPsf_getAveragePosition(self)

    def clone(self):
        """clone(self) -> __dummy_211__"""
        return _algorithmsLib.KernelPsf_clone(self)

    def isPersistable(self):
        """isPersistable(self) -> bool"""
        return _algorithmsLib.KernelPsf_isPersistable(self)

    def swigConvert(*args):
        """swigConvert(__dummy_1__ ptr) -> __dummy_453__"""
        return _algorithmsLib.KernelPsf_swigConvert(*args)

    if _newclass:swigConvert = staticmethod(swigConvert)
    __swig_getmethods__["swigConvert"] = lambda x: swigConvert
    __swig_destroy__ = _algorithmsLib.delete_KernelPsf
    __del__ = lambda self : None;
KernelPsf_swigregister = _algorithmsLib.KernelPsf_swigregister
KernelPsf_swigregister(KernelPsf)

def KernelPsf_swigConvert(*args):
  """KernelPsf_swigConvert(__dummy_1__ ptr) -> __dummy_453__"""
  return _algorithmsLib.KernelPsf_swigConvert(*args)

class SingleGaussianPsf(SingleGaussianPsfPersistableFacade,KernelPsf):
    """Proxy of C++ lsst::meas::algorithms::SingleGaussianPsf class"""
    __swig_setmethods__ = {}
    for _s in [SingleGaussianPsfPersistableFacade,KernelPsf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SingleGaussianPsf, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleGaussianPsfPersistableFacade,KernelPsf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingleGaussianPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int width, int height, double sigma) -> SingleGaussianPsf"""
        this = _algorithmsLib.new_SingleGaussianPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_211__"""
        return _algorithmsLib.SingleGaussianPsf_clone(self)

    def getSigma(self):
        """getSigma(self) -> double"""
        return _algorithmsLib.SingleGaussianPsf_getSigma(self)

    def isPersistable(self):
        """isPersistable(self) -> bool"""
        return _algorithmsLib.SingleGaussianPsf_isPersistable(self)

    def swigConvert(*args):
        """swigConvert(__dummy_1__ ptr) -> __dummy_459__"""
        return _algorithmsLib.SingleGaussianPsf_swigConvert(*args)

    if _newclass:swigConvert = staticmethod(swigConvert)
    __swig_getmethods__["swigConvert"] = lambda x: swigConvert
    __swig_destroy__ = _algorithmsLib.delete_SingleGaussianPsf
    __del__ = lambda self : None;
SingleGaussianPsf_swigregister = _algorithmsLib.SingleGaussianPsf_swigregister
SingleGaussianPsf_swigregister(SingleGaussianPsf)

def SingleGaussianPsf_swigConvert(*args):
  """SingleGaussianPsf_swigConvert(__dummy_1__ ptr) -> __dummy_459__"""
  return _algorithmsLib.SingleGaussianPsf_swigConvert(*args)

class DoubleGaussianPsf(DoubleGaussianPsfPersistableFacade,KernelPsf):
    """Proxy of C++ lsst::meas::algorithms::DoubleGaussianPsf class"""
    __swig_setmethods__ = {}
    for _s in [DoubleGaussianPsfPersistableFacade,KernelPsf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DoubleGaussianPsf, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleGaussianPsfPersistableFacade,KernelPsf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleGaussianPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int width, int height, double sigma1, double sigma2 = 0.0, 
            double b = 0.0) -> DoubleGaussianPsf
        __init__(self, int width, int height, double sigma1, double sigma2 = 0.0) -> DoubleGaussianPsf
        __init__(self, int width, int height, double sigma1) -> DoubleGaussianPsf
        """
        this = _algorithmsLib.new_DoubleGaussianPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_211__"""
        return _algorithmsLib.DoubleGaussianPsf_clone(self)

    def getSigma1(self):
        """getSigma1(self) -> double"""
        return _algorithmsLib.DoubleGaussianPsf_getSigma1(self)

    def getSigma2(self):
        """getSigma2(self) -> double"""
        return _algorithmsLib.DoubleGaussianPsf_getSigma2(self)

    def getB(self):
        """getB(self) -> double"""
        return _algorithmsLib.DoubleGaussianPsf_getB(self)

    def isPersistable(self):
        """isPersistable(self) -> bool"""
        return _algorithmsLib.DoubleGaussianPsf_isPersistable(self)

    def swigConvert(*args):
        """swigConvert(__dummy_1__ ptr) -> __dummy_465__"""
        return _algorithmsLib.DoubleGaussianPsf_swigConvert(*args)

    if _newclass:swigConvert = staticmethod(swigConvert)
    __swig_getmethods__["swigConvert"] = lambda x: swigConvert
    __swig_destroy__ = _algorithmsLib.delete_DoubleGaussianPsf
    __del__ = lambda self : None;
DoubleGaussianPsf_swigregister = _algorithmsLib.DoubleGaussianPsf_swigregister
DoubleGaussianPsf_swigregister(DoubleGaussianPsf)

def DoubleGaussianPsf_swigConvert(*args):
  """DoubleGaussianPsf_swigConvert(__dummy_1__ ptr) -> __dummy_465__"""
  return _algorithmsLib.DoubleGaussianPsf_swigConvert(*args)

class PcaPsf(PcaPsfPersistableFacade,KernelPsf):
    """Proxy of C++ lsst::meas::algorithms::PcaPsf class"""
    __swig_setmethods__ = {}
    for _s in [PcaPsfPersistableFacade,KernelPsf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PcaPsf, name, value)
    __swig_getmethods__ = {}
    for _s in [PcaPsfPersistableFacade,KernelPsf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PcaPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, __dummy_361__ kernel, Point2D averagePosition = lsst::afw::geom::Point2D()) -> PcaPsf
        __init__(self, __dummy_361__ kernel) -> PcaPsf
        """
        this = _algorithmsLib.new_PcaPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_211__"""
        return _algorithmsLib.PcaPsf_clone(self)

    def getKernel(self):
        """getKernel(self) -> __dummy_362__"""
        return _algorithmsLib.PcaPsf_getKernel(self)

    def swigConvert(*args):
        """swigConvert(__dummy_1__ ptr) -> __dummy_471__"""
        return _algorithmsLib.PcaPsf_swigConvert(*args)

    if _newclass:swigConvert = staticmethod(swigConvert)
    __swig_getmethods__["swigConvert"] = lambda x: swigConvert
    __swig_destroy__ = _algorithmsLib.delete_PcaPsf
    __del__ = lambda self : None;
PcaPsf_swigregister = _algorithmsLib.PcaPsf_swigregister
PcaPsf_swigregister(PcaPsf)

def PcaPsf_swigConvert(*args):
  """PcaPsf_swigConvert(__dummy_1__ ptr) -> __dummy_471__"""
  return _algorithmsLib.PcaPsf_swigConvert(*args)

class WarpedPsf(ImagePsf):
    """Proxy of C++ lsst::meas::algorithms::WarpedPsf class"""
    __swig_setmethods__ = {}
    for _s in [ImagePsf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, WarpedPsf, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagePsf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpedPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, __dummy_212__ undistortedPsf, __dummy_16__ distortion, 
            boost::shared_ptr<(q(const).lsst::afw::math::WarpingControl)> control) -> WarpedPsf
        __init__(self, __dummy_212__ undistortedPsf, __dummy_16__ distortion, 
            string kernelName = "lanczos3", unsigned int cache = 10000) -> WarpedPsf
        __init__(self, __dummy_212__ undistortedPsf, __dummy_16__ distortion, 
            string kernelName = "lanczos3") -> WarpedPsf
        __init__(self, __dummy_212__ undistortedPsf, __dummy_16__ distortion) -> WarpedPsf
        """
        this = _algorithmsLib.new_WarpedPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAveragePosition(self):
        """getAveragePosition(self) -> Point2D"""
        return _algorithmsLib.WarpedPsf_getAveragePosition(self)

    def clone(self):
        """clone(self) -> __dummy_211__"""
        return _algorithmsLib.WarpedPsf_clone(self)

    __swig_destroy__ = _algorithmsLib.delete_WarpedPsf
    __del__ = lambda self : None;
WarpedPsf_swigregister = _algorithmsLib.WarpedPsf_swigregister
WarpedPsf_swigregister(WarpedPsf)

class CoaddPsf(ImagePsf):
    """Proxy of C++ lsst::meas::algorithms::CoaddPsf class"""
    __swig_setmethods__ = {}
    for _s in [ImagePsf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CoaddPsf, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagePsf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoaddPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self,  catalog, Wcs coaddWcs, string weightFieldName = "weight", 
            string kernelName = "lanczos3", unsigned int cache = 10000) -> CoaddPsf
        __init__(self,  catalog, Wcs coaddWcs, string weightFieldName = "weight", 
            string kernelName = "lanczos3") -> CoaddPsf
        __init__(self,  catalog, Wcs coaddWcs, string weightFieldName = "weight") -> CoaddPsf
        __init__(self,  catalog, Wcs coaddWcs) -> CoaddPsf
        """
        this = _algorithmsLib.new_CoaddPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_211__"""
        return _algorithmsLib.CoaddPsf_clone(self)

    def getAveragePosition(self):
        """getAveragePosition(self) -> Point2D"""
        return _algorithmsLib.CoaddPsf_getAveragePosition(self)

    def getCoaddWcs(self):
        """getCoaddWcs(self) -> __dummy_164__"""
        return _algorithmsLib.CoaddPsf_getCoaddWcs(self)

    def getComponentCount(self):
        """getComponentCount(self) -> int"""
        return _algorithmsLib.CoaddPsf_getComponentCount(self)

    def getPsf(self, *args):
        """getPsf(self, int index) -> __dummy_212__"""
        return _algorithmsLib.CoaddPsf_getPsf(self, *args)

    def getWcs(self, *args):
        """getWcs(self, int index) -> __dummy_164__"""
        return _algorithmsLib.CoaddPsf_getWcs(self, *args)

    def getWeight(self, *args):
        """getWeight(self, int index) -> double"""
        return _algorithmsLib.CoaddPsf_getWeight(self, *args)

    def getId(self, *args):
        """getId(self, int index) -> RecordId"""
        return _algorithmsLib.CoaddPsf_getId(self, *args)

    def getBBox(self, *args):
        """getBBox(self, int index) -> Box2I"""
        return _algorithmsLib.CoaddPsf_getBBox(self, *args)

    def isPersistable(self):
        """isPersistable(self) -> bool"""
        return _algorithmsLib.CoaddPsf_isPersistable(self)

    def swigConvert(*args):
        """swigConvert(__dummy_1__ ptr) -> __dummy_475__"""
        return _algorithmsLib.CoaddPsf_swigConvert(*args)

    if _newclass:swigConvert = staticmethod(swigConvert)
    __swig_getmethods__["swigConvert"] = lambda x: swigConvert
    __swig_destroy__ = _algorithmsLib.delete_CoaddPsf
    __del__ = lambda self : None;
CoaddPsf_swigregister = _algorithmsLib.CoaddPsf_swigregister
CoaddPsf_swigregister(CoaddPsf)

def CoaddPsf_swigConvert(*args):
  """CoaddPsf_swigConvert(__dummy_1__ ptr) -> __dummy_475__"""
  return _algorithmsLib.CoaddPsf_swigConvert(*args)

class Shapelet(_object):
    """Proxy of C++ lsst::meas::algorithms::Shapelet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Shapelet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shapelet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _algorithmsLib.delete_Shapelet
    __del__ = lambda self : None;
    def getOrder(self):
        """getOrder(self) -> int"""
        return _algorithmsLib.Shapelet_getOrder(self)

    def getSigma(self):
        """getSigma(self) -> double"""
        return _algorithmsLib.Shapelet_getSigma(self)

    def size(self):
        """size(self) -> int"""
        return _algorithmsLib.Shapelet_size(self)

    def getValues(self):
        """getValues(self) -> ShapeletVector"""
        return _algorithmsLib.Shapelet_getValues(self)

    def hasCovariance(self):
        """hasCovariance(self) -> bool"""
        return _algorithmsLib.Shapelet_hasCovariance(self)

    def getCovariance(self):
        """getCovariance(self) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::Shapelet::ShapeletCovariance)>"""
        return _algorithmsLib.Shapelet_getCovariance(self)

    def setSigma(self, *args):
        """setSigma(self, double sigma)"""
        return _algorithmsLib.Shapelet_setSigma(self, *args)

    def getPQ(self, *args):
        """getPQ(self, int p, int q) -> std::complex<(double)>"""
        return _algorithmsLib.Shapelet_getPQ(self, *args)

    def evaluateAt(self, *args):
        """
        evaluateAt(self, PointD pos) -> double
        evaluateAt(self, double x, double y) -> double
        """
        return _algorithmsLib.Shapelet_evaluateAt(self, *args)

    def measureFromImage(self, *args):
        """
        measureFromImage(self, Source source, PointD pos, bool isCentroidFixed, bool isSigmaFixed, 
            double aperture, Exposure exposure, 
            MaskPixel okmask = 0) -> bool
        measureFromImage(self, Source source, PointD pos, bool isCentroidFixed, bool isSigmaFixed, 
            double aperture, Exposure exposure) -> bool
        """
        return _algorithmsLib.Shapelet_measureFromImage(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, int order, double sigma) -> Shapelet
        __init__(self, int order, double sigma, ShapeletVector vector) -> Shapelet
        __init__(self, int order, double sigma, ShapeletVector vector, ShapeletCovariance cov) -> Shapelet
        __init__(self, Shapelet rhs) -> Shapelet
        __init__(self, BVec bvec) -> Shapelet
        """
        this = _algorithmsLib.new_Shapelet(*args)
        try: self.this.append(this)
        except: self.this = this
    def viewAsBVec(self, *args):
        """
        viewAsBVec(self) -> BVec
        viewAsBVec(self) -> BVec
        """
        return _algorithmsLib.Shapelet_viewAsBVec(self, *args)

Shapelet_swigregister = _algorithmsLib.Shapelet_swigregister
Shapelet_swigregister(Shapelet)


def getJacobian(*args):
  """getJacobian(Wcs wcs, PointD pos) -> Eigen::Matrix2d"""
  return _algorithmsLib.getJacobian(*args)
class ShapeletInterpolation(_object):
    """Proxy of C++ lsst::meas::algorithms::ShapeletInterpolation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ShapeletInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeletInterpolation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _algorithmsLib.delete_ShapeletInterpolation
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, Policy policy) -> ShapeletInterpolation
        __init__(self, ShapeletInterpolation rhs) -> ShapeletInterpolation
        """
        this = _algorithmsLib.new_ShapeletInterpolation(*args)
        try: self.this.append(this)
        except: self.this = this
    def getOrder(self):
        """getOrder(self) -> int"""
        return _algorithmsLib.ShapeletInterpolation_getOrder(self)

    def getFitOrder(self):
        """getFitOrder(self) -> int"""
        return _algorithmsLib.ShapeletInterpolation_getFitOrder(self)

    def getSigma(self):
        """getSigma(self) -> double"""
        return _algorithmsLib.ShapeletInterpolation_getSigma(self)

    def getSize(self):
        """getSize(self) -> int"""
        return _algorithmsLib.ShapeletInterpolation_getSize(self)

    def getFitSize(self):
        """getFitSize(self) -> int"""
        return _algorithmsLib.ShapeletInterpolation_getFitSize(self)

    def setSigma(self, *args):
        """setSigma(self, double sigma)"""
        return _algorithmsLib.ShapeletInterpolation_setSigma(self, *args)

    def calculate(self, *args):
        """calculate(self, Ptr cellSet, Exposure exposure)"""
        return _algorithmsLib.ShapeletInterpolation_calculate(self, *args)

    def interpolate(self, *args):
        """
        interpolate(self, PointD pos) -> ConstPtr
        interpolate(self, double x, double y) -> ConstPtr
        """
        return _algorithmsLib.ShapeletInterpolation_interpolate(self, *args)

    def interpolateSingleElement(self, *args):
        """
        interpolateSingleElement(self, PointD pos, int i) -> double
        interpolateSingleElement(self, double x, double y, int i) -> double
        """
        return _algorithmsLib.ShapeletInterpolation_interpolateSingleElement(self, *args)

ShapeletInterpolation_swigregister = _algorithmsLib.ShapeletInterpolation_swigregister
ShapeletInterpolation_swigregister(ShapeletInterpolation)

class LocalShapeletKernel(lsst.afw.math.mathLib.AnalyticKernel):
    """Proxy of C++ lsst::meas::algorithms::LocalShapeletKernel class"""
    __swig_setmethods__ = {}
    for _s in [lsst.afw.math.mathLib.AnalyticKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, LocalShapeletKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [lsst.afw.math.mathLib.AnalyticKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalShapeletKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ConstPtr shapelet, ConstPtr wcsPtr, Extent size) -> LocalShapeletKernel
        __init__(self, ConstPtr shapelet, ConstPtr wcsPtr) -> LocalShapeletKernel
        """
        this = _algorithmsLib.new_LocalShapeletKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def computeImage(self, *args):
        """
        computeImage(self, Image image, bool doNormalize, double x = 0.0, double y = 0.0) -> double
        computeImage(self, Image image, bool doNormalize, double x = 0.0) -> double
        computeImage(self, Image image, bool doNormalize) -> double
        """
        return _algorithmsLib.LocalShapeletKernel_computeImage(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_LocalShapeletKernel
    __del__ = lambda self : None;
LocalShapeletKernel_swigregister = _algorithmsLib.LocalShapeletKernel_swigregister
LocalShapeletKernel_swigregister(LocalShapeletKernel)

class ShapeletKernel(lsst.afw.math.mathLib.AnalyticKernel):
    """Proxy of C++ lsst::meas::algorithms::ShapeletKernel class"""
    __swig_setmethods__ = {}
    for _s in [lsst.afw.math.mathLib.AnalyticKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ShapeletKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [lsst.afw.math.mathLib.AnalyticKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeletKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ConstPtr interp, ConstPtr wcsPtr, Extent size) -> ShapeletKernel
        __init__(self, ConstPtr interp, ConstPtr wcsPtr) -> ShapeletKernel
        """
        this = _algorithmsLib.new_ShapeletKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLocalKernel(self, *args):
        """getLocalKernel(self, Point pos) -> ConstPtr"""
        return _algorithmsLib.ShapeletKernel_getLocalKernel(self, *args)

    def computeImage(self, *args):
        """
        computeImage(self, Image image, bool doNormalize, double x = 0.0, double y = 0.0) -> double
        computeImage(self, Image image, bool doNormalize, double x = 0.0) -> double
        computeImage(self, Image image, bool doNormalize) -> double
        """
        return _algorithmsLib.ShapeletKernel_computeImage(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_ShapeletKernel
    __del__ = lambda self : None;
ShapeletKernel_swigregister = _algorithmsLib.ShapeletKernel_swigregister
ShapeletKernel_swigregister(ShapeletKernel)

class ShapeletPsfCandidate(lsst.afw.math.mathLib.SpatialCellCandidate):
    """Proxy of C++ lsst::meas::algorithms::ShapeletPsfCandidate class"""
    __swig_setmethods__ = {}
    for _s in [lsst.afw.math.mathLib.SpatialCellCandidate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ShapeletPsfCandidate, name, value)
    __swig_getmethods__ = {}
    for _s in [lsst.afw.math.mathLib.SpatialCellCandidate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeletPsfCandidate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, double x, double y, double size, boost::shared_ptr<(lsst::meas::algorithms::ShapeletPsfCandidate::Source)> source) -> ShapeletPsfCandidate"""
        this = _algorithmsLib.new_ShapeletPsfCandidate(*args)
        try: self.this.append(this)
        except: self.this = this
    def setShapelet(self, *args):
        """setShapelet(self, ConstPtr shapelet)"""
        return _algorithmsLib.ShapeletPsfCandidate_setShapelet(self, *args)

    def getX(self):
        """getX(self) -> double"""
        return _algorithmsLib.ShapeletPsfCandidate_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _algorithmsLib.ShapeletPsfCandidate_getY(self)

    def getSize(self):
        """getSize(self) -> double"""
        return _algorithmsLib.ShapeletPsfCandidate_getSize(self)

    def getSource(self):
        """getSource(self) -> boost::shared_ptr<(lsst::meas::algorithms::ShapeletPsfCandidate::Source)>"""
        return _algorithmsLib.ShapeletPsfCandidate_getSource(self)

    def getShapelet(self):
        """getShapelet(self) -> ConstPtr"""
        return _algorithmsLib.ShapeletPsfCandidate_getShapelet(self)

    def hasShapelet(self):
        """hasShapelet(self) -> bool"""
        return _algorithmsLib.ShapeletPsfCandidate_hasShapelet(self)

    def getCandidateRating(self):
        """getCandidateRating(self) -> double"""
        return _algorithmsLib.ShapeletPsfCandidate_getCandidateRating(self)

    def setBad(self):
        """setBad(self)"""
        return _algorithmsLib.ShapeletPsfCandidate_setBad(self)

    __swig_destroy__ = _algorithmsLib.delete_ShapeletPsfCandidate
    __del__ = lambda self : None;
ShapeletPsfCandidate_swigregister = _algorithmsLib.ShapeletPsfCandidate_swigregister
ShapeletPsfCandidate_swigregister(ShapeletPsfCandidate)

class SizeMagnitudeStarSelector(_object):
    """Proxy of C++ lsst::meas::algorithms::SizeMagnitudeStarSelector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SizeMagnitudeStarSelector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeMagnitudeStarSelector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Policy policy) -> SizeMagnitudeStarSelector"""
        this = _algorithmsLib.new_SizeMagnitudeStarSelector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_SizeMagnitudeStarSelector
    __del__ = lambda self : None;
    def selectStars(self, *args):
        """
        selectStars(self, Exposure exposure, SourceCatalog sourceList, boost::shared_ptr<(q(const).lsst::afw::table::ReferenceMatchVector)> matches = boost::shared_ptr< afw::table::ReferenceMatchVector const >()) -> PsfCandidateList
        selectStars(self, Exposure exposure, SourceCatalog sourceList) -> PsfCandidateList
        """
        return _algorithmsLib.SizeMagnitudeStarSelector_selectStars(self, *args)

SizeMagnitudeStarSelector_swigregister = _algorithmsLib.SizeMagnitudeStarSelector_swigregister
SizeMagnitudeStarSelector_swigregister(SizeMagnitudeStarSelector)

class Algorithm(_object):
    """Proxy of C++ lsst::meas::algorithms::Algorithm class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Algorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Algorithm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _algorithmsLib.delete_Algorithm
    __del__ = lambda self : None;
    def getControl(self):
        """getControl(self) -> AlgorithmControl"""
        return _algorithmsLib.Algorithm_getControl(self)

Algorithm_swigregister = _algorithmsLib.Algorithm_swigregister
Algorithm_swigregister(Algorithm)

class AlgorithmControl(_object):
    """Proxy of C++ lsst::meas::algorithms::AlgorithmControl class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AlgorithmControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlgorithmControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _algorithmsLib.AlgorithmControl_name_set
    __swig_getmethods__["name"] = _algorithmsLib.AlgorithmControl_name_get
    if _newclass:name = _swig_property(_algorithmsLib.AlgorithmControl_name_get, _algorithmsLib.AlgorithmControl_name_set)
    def _doc_priority():
        """_doc_priority() -> char"""
        return _algorithmsLib.AlgorithmControl__doc_priority()

    if _newclass:_doc_priority = staticmethod(_doc_priority)
    __swig_getmethods__["_doc_priority"] = lambda x: _doc_priority
    def _type_priority():
        """_type_priority() -> char"""
        return _algorithmsLib.AlgorithmControl__type_priority()

    if _newclass:_type_priority = staticmethod(_type_priority)
    __swig_getmethods__["_type_priority"] = lambda x: _type_priority
    __swig_setmethods__["priority"] = _algorithmsLib.AlgorithmControl_priority_set
    __swig_getmethods__["priority"] = _algorithmsLib.AlgorithmControl_priority_get
    if _newclass:priority = _swig_property(_algorithmsLib.AlgorithmControl_priority_get, _algorithmsLib.AlgorithmControl_priority_set)
    def clone(self):
        """clone(self) -> __dummy_491__"""
        return _algorithmsLib.AlgorithmControl_clone(self)

    def makeAlgorithm(self, *args):
        """
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), 
            AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_489__
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_489__
        makeAlgorithm(self, Schema schema) -> __dummy_489__
        """
        return _algorithmsLib.AlgorithmControl_makeAlgorithm(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_AlgorithmControl
    __del__ = lambda self : None;
AlgorithmControl_swigregister = _algorithmsLib.AlgorithmControl_swigregister
AlgorithmControl_swigregister(AlgorithmControl)

def AlgorithmControl__doc_priority():
  """AlgorithmControl__doc_priority() -> char"""
  return _algorithmsLib.AlgorithmControl__doc_priority()

def AlgorithmControl__type_priority():
  """AlgorithmControl__type_priority() -> char"""
  return _algorithmsLib.AlgorithmControl__type_priority()

class FluxAlgorithm(Algorithm):
    """Proxy of C++ lsst::meas::algorithms::FluxAlgorithm class"""
    __swig_setmethods__ = {}
    for _s in [Algorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FluxAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [Algorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FluxAlgorithm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getControl(self):
        """getControl(self) -> FluxControl"""
        return _algorithmsLib.FluxAlgorithm_getControl(self)

    def getKeys(self):
        """getKeys(self) -> KeyTuple"""
        return _algorithmsLib.FluxAlgorithm_getKeys(self)

    __swig_destroy__ = _algorithmsLib.delete_FluxAlgorithm
    __del__ = lambda self : None;
FluxAlgorithm_swigregister = _algorithmsLib.FluxAlgorithm_swigregister
FluxAlgorithm_swigregister(FluxAlgorithm)

class FluxControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::FluxControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FluxControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def clone(self):
        """clone(self) -> __dummy_513__"""
        return _algorithmsLib.FluxControl_clone(self)

    def makeAlgorithm(self, *args):
        """
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), 
            AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_511__
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_511__
        makeAlgorithm(self, Schema schema) -> __dummy_511__
        """
        return _algorithmsLib.FluxControl_makeAlgorithm(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_FluxControl
    __del__ = lambda self : None;
FluxControl_swigregister = _algorithmsLib.FluxControl_swigregister
FluxControl_swigregister(FluxControl)

class ApertureFluxControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::ApertureFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ApertureFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApertureFluxControl, name)
    __repr__ = _swig_repr
    def _doc_radii():
        """_doc_radii() -> char"""
        return _algorithmsLib.ApertureFluxControl__doc_radii()

    if _newclass:_doc_radii = staticmethod(_doc_radii)
    __swig_getmethods__["_doc_radii"] = lambda x: _doc_radii
    def _type_radii():
        """_type_radii() -> char"""
        return _algorithmsLib.ApertureFluxControl__type_radii()

    if _newclass:_type_radii = staticmethod(_type_radii)
    __swig_getmethods__["_type_radii"] = lambda x: _type_radii
    __swig_setmethods__["radii"] = _algorithmsLib.ApertureFluxControl_radii_set
    __swig_getmethods__["radii"] = _algorithmsLib.ApertureFluxControl_radii_get
    if _newclass:radii = _swig_property(_algorithmsLib.ApertureFluxControl_radii_get, _algorithmsLib.ApertureFluxControl_radii_set)
    def __init__(self, name = "flux.aperture", priority = 2.0): 
        """
        __init__(self, string name = "flux.aperture", float priority = 2.0) -> ApertureFluxControl
        __init__(self, string name = "flux.aperture") -> ApertureFluxControl
        __init__(self) -> ApertureFluxControl
        """
        this = _algorithmsLib.new_ApertureFluxControl(name, priority)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_ApertureFluxControl
    __del__ = lambda self : None;
ApertureFluxControl_swigregister = _algorithmsLib.ApertureFluxControl_swigregister
ApertureFluxControl_swigregister(ApertureFluxControl)

def ApertureFluxControl__doc_radii():
  """ApertureFluxControl__doc_radii() -> char"""
  return _algorithmsLib.ApertureFluxControl__doc_radii()

def ApertureFluxControl__type_radii():
  """ApertureFluxControl__type_radii() -> char"""
  return _algorithmsLib.ApertureFluxControl__type_radii()

class EllipticalApertureFluxControl(ApertureFluxControl):
    """Proxy of C++ lsst::meas::algorithms::EllipticalApertureFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [ApertureFluxControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, EllipticalApertureFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [ApertureFluxControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticalApertureFluxControl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> EllipticalApertureFluxControl"""
        this = _algorithmsLib.new_EllipticalApertureFluxControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_EllipticalApertureFluxControl
    __del__ = lambda self : None;
EllipticalApertureFluxControl_swigregister = _algorithmsLib.EllipticalApertureFluxControl_swigregister
EllipticalApertureFluxControl_swigregister(EllipticalApertureFluxControl)

class PeakLikelihoodFluxControl(FluxControl):
    """Proxy of C++ lsst::meas::algorithms::PeakLikelihoodFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [FluxControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PeakLikelihoodFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [FluxControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeakLikelihoodFluxControl, name)
    __repr__ = _swig_repr
    def _doc_warpingKernelName():
        """_doc_warpingKernelName() -> char"""
        return _algorithmsLib.PeakLikelihoodFluxControl__doc_warpingKernelName()

    if _newclass:_doc_warpingKernelName = staticmethod(_doc_warpingKernelName)
    __swig_getmethods__["_doc_warpingKernelName"] = lambda x: _doc_warpingKernelName
    def _type_warpingKernelName():
        """_type_warpingKernelName() -> char"""
        return _algorithmsLib.PeakLikelihoodFluxControl__type_warpingKernelName()

    if _newclass:_type_warpingKernelName = staticmethod(_type_warpingKernelName)
    __swig_getmethods__["_type_warpingKernelName"] = lambda x: _type_warpingKernelName
    __swig_setmethods__["warpingKernelName"] = _algorithmsLib.PeakLikelihoodFluxControl_warpingKernelName_set
    __swig_getmethods__["warpingKernelName"] = _algorithmsLib.PeakLikelihoodFluxControl_warpingKernelName_get
    if _newclass:warpingKernelName = _swig_property(_algorithmsLib.PeakLikelihoodFluxControl_warpingKernelName_get, _algorithmsLib.PeakLikelihoodFluxControl_warpingKernelName_set)
    def __init__(self): 
        """__init__(self) -> PeakLikelihoodFluxControl"""
        this = _algorithmsLib.new_PeakLikelihoodFluxControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_PeakLikelihoodFluxControl
    __del__ = lambda self : None;
PeakLikelihoodFluxControl_swigregister = _algorithmsLib.PeakLikelihoodFluxControl_swigregister
PeakLikelihoodFluxControl_swigregister(PeakLikelihoodFluxControl)

def PeakLikelihoodFluxControl__doc_warpingKernelName():
  """PeakLikelihoodFluxControl__doc_warpingKernelName() -> char"""
  return _algorithmsLib.PeakLikelihoodFluxControl__doc_warpingKernelName()

def PeakLikelihoodFluxControl__type_warpingKernelName():
  """PeakLikelihoodFluxControl__type_warpingKernelName() -> char"""
  return _algorithmsLib.PeakLikelihoodFluxControl__type_warpingKernelName()

class NaiveFluxControl(FluxControl):
    """Proxy of C++ lsst::meas::algorithms::NaiveFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [FluxControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NaiveFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [FluxControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NaiveFluxControl, name)
    __repr__ = _swig_repr
    def _doc_radius():
        """_doc_radius() -> char"""
        return _algorithmsLib.NaiveFluxControl__doc_radius()

    if _newclass:_doc_radius = staticmethod(_doc_radius)
    __swig_getmethods__["_doc_radius"] = lambda x: _doc_radius
    def _type_radius():
        """_type_radius() -> char"""
        return _algorithmsLib.NaiveFluxControl__type_radius()

    if _newclass:_type_radius = staticmethod(_type_radius)
    __swig_getmethods__["_type_radius"] = lambda x: _type_radius
    __swig_setmethods__["radius"] = _algorithmsLib.NaiveFluxControl_radius_set
    __swig_getmethods__["radius"] = _algorithmsLib.NaiveFluxControl_radius_get
    if _newclass:radius = _swig_property(_algorithmsLib.NaiveFluxControl_radius_get, _algorithmsLib.NaiveFluxControl_radius_set)
    def __init__(self): 
        """__init__(self) -> NaiveFluxControl"""
        this = _algorithmsLib.new_NaiveFluxControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_NaiveFluxControl
    __del__ = lambda self : None;
NaiveFluxControl_swigregister = _algorithmsLib.NaiveFluxControl_swigregister
NaiveFluxControl_swigregister(NaiveFluxControl)

def NaiveFluxControl__doc_radius():
  """NaiveFluxControl__doc_radius() -> char"""
  return _algorithmsLib.NaiveFluxControl__doc_radius()

def NaiveFluxControl__type_radius():
  """NaiveFluxControl__type_radius() -> char"""
  return _algorithmsLib.NaiveFluxControl__type_radius()

class PsfFluxControl(FluxControl):
    """Proxy of C++ lsst::meas::algorithms::PsfFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [FluxControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PsfFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [FluxControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsfFluxControl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PsfFluxControl"""
        this = _algorithmsLib.new_PsfFluxControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_PsfFluxControl
    __del__ = lambda self : None;
PsfFluxControl_swigregister = _algorithmsLib.PsfFluxControl_swigregister
PsfFluxControl_swigregister(PsfFluxControl)

class SincFluxControl(FluxControl):
    """Proxy of C++ lsst::meas::algorithms::SincFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [FluxControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SincFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [FluxControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SincFluxControl, name)
    __repr__ = _swig_repr
    def _doc_radius1():
        """_doc_radius1() -> char"""
        return _algorithmsLib.SincFluxControl__doc_radius1()

    if _newclass:_doc_radius1 = staticmethod(_doc_radius1)
    __swig_getmethods__["_doc_radius1"] = lambda x: _doc_radius1
    def _type_radius1():
        """_type_radius1() -> char"""
        return _algorithmsLib.SincFluxControl__type_radius1()

    if _newclass:_type_radius1 = staticmethod(_type_radius1)
    __swig_getmethods__["_type_radius1"] = lambda x: _type_radius1
    __swig_setmethods__["radius1"] = _algorithmsLib.SincFluxControl_radius1_set
    __swig_getmethods__["radius1"] = _algorithmsLib.SincFluxControl_radius1_get
    if _newclass:radius1 = _swig_property(_algorithmsLib.SincFluxControl_radius1_get, _algorithmsLib.SincFluxControl_radius1_set)
    def _doc_radius2():
        """_doc_radius2() -> char"""
        return _algorithmsLib.SincFluxControl__doc_radius2()

    if _newclass:_doc_radius2 = staticmethod(_doc_radius2)
    __swig_getmethods__["_doc_radius2"] = lambda x: _doc_radius2
    def _type_radius2():
        """_type_radius2() -> char"""
        return _algorithmsLib.SincFluxControl__type_radius2()

    if _newclass:_type_radius2 = staticmethod(_type_radius2)
    __swig_getmethods__["_type_radius2"] = lambda x: _type_radius2
    __swig_setmethods__["radius2"] = _algorithmsLib.SincFluxControl_radius2_set
    __swig_getmethods__["radius2"] = _algorithmsLib.SincFluxControl_radius2_get
    if _newclass:radius2 = _swig_property(_algorithmsLib.SincFluxControl_radius2_get, _algorithmsLib.SincFluxControl_radius2_set)
    def _doc_angle():
        """_doc_angle() -> char"""
        return _algorithmsLib.SincFluxControl__doc_angle()

    if _newclass:_doc_angle = staticmethod(_doc_angle)
    __swig_getmethods__["_doc_angle"] = lambda x: _doc_angle
    def _type_angle():
        """_type_angle() -> char"""
        return _algorithmsLib.SincFluxControl__type_angle()

    if _newclass:_type_angle = staticmethod(_type_angle)
    __swig_getmethods__["_type_angle"] = lambda x: _type_angle
    __swig_setmethods__["angle"] = _algorithmsLib.SincFluxControl_angle_set
    __swig_getmethods__["angle"] = _algorithmsLib.SincFluxControl_angle_get
    if _newclass:angle = _swig_property(_algorithmsLib.SincFluxControl_angle_get, _algorithmsLib.SincFluxControl_angle_set)
    def _doc_ellipticity():
        """_doc_ellipticity() -> char"""
        return _algorithmsLib.SincFluxControl__doc_ellipticity()

    if _newclass:_doc_ellipticity = staticmethod(_doc_ellipticity)
    __swig_getmethods__["_doc_ellipticity"] = lambda x: _doc_ellipticity
    def _type_ellipticity():
        """_type_ellipticity() -> char"""
        return _algorithmsLib.SincFluxControl__type_ellipticity()

    if _newclass:_type_ellipticity = staticmethod(_type_ellipticity)
    __swig_getmethods__["_type_ellipticity"] = lambda x: _type_ellipticity
    __swig_setmethods__["ellipticity"] = _algorithmsLib.SincFluxControl_ellipticity_set
    __swig_getmethods__["ellipticity"] = _algorithmsLib.SincFluxControl_ellipticity_get
    if _newclass:ellipticity = _swig_property(_algorithmsLib.SincFluxControl_ellipticity_get, _algorithmsLib.SincFluxControl_ellipticity_set)
    def __init__(self): 
        """__init__(self) -> SincFluxControl"""
        this = _algorithmsLib.new_SincFluxControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_SincFluxControl
    __del__ = lambda self : None;
SincFluxControl_swigregister = _algorithmsLib.SincFluxControl_swigregister
SincFluxControl_swigregister(SincFluxControl)

def SincFluxControl__doc_radius1():
  """SincFluxControl__doc_radius1() -> char"""
  return _algorithmsLib.SincFluxControl__doc_radius1()

def SincFluxControl__type_radius1():
  """SincFluxControl__type_radius1() -> char"""
  return _algorithmsLib.SincFluxControl__type_radius1()

def SincFluxControl__doc_radius2():
  """SincFluxControl__doc_radius2() -> char"""
  return _algorithmsLib.SincFluxControl__doc_radius2()

def SincFluxControl__type_radius2():
  """SincFluxControl__type_radius2() -> char"""
  return _algorithmsLib.SincFluxControl__type_radius2()

def SincFluxControl__doc_angle():
  """SincFluxControl__doc_angle() -> char"""
  return _algorithmsLib.SincFluxControl__doc_angle()

def SincFluxControl__type_angle():
  """SincFluxControl__type_angle() -> char"""
  return _algorithmsLib.SincFluxControl__type_angle()

def SincFluxControl__doc_ellipticity():
  """SincFluxControl__doc_ellipticity() -> char"""
  return _algorithmsLib.SincFluxControl__doc_ellipticity()

def SincFluxControl__type_ellipticity():
  """SincFluxControl__type_ellipticity() -> char"""
  return _algorithmsLib.SincFluxControl__type_ellipticity()

class CentroidAlgorithm(Algorithm):
    """Proxy of C++ lsst::meas::algorithms::CentroidAlgorithm class"""
    __swig_setmethods__ = {}
    for _s in [Algorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CentroidAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [Algorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CentroidAlgorithm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getControl(self):
        """getControl(self) -> CentroidControl"""
        return _algorithmsLib.CentroidAlgorithm_getControl(self)

    def getKeys(self):
        """getKeys(self) -> KeyTuple"""
        return _algorithmsLib.CentroidAlgorithm_getKeys(self)

    __swig_destroy__ = _algorithmsLib.delete_CentroidAlgorithm
    __del__ = lambda self : None;
CentroidAlgorithm_swigregister = _algorithmsLib.CentroidAlgorithm_swigregister
CentroidAlgorithm_swigregister(CentroidAlgorithm)

class CentroidControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::CentroidControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CentroidControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CentroidControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def clone(self):
        """clone(self) -> __dummy_495__"""
        return _algorithmsLib.CentroidControl_clone(self)

    def makeAlgorithm(self, *args):
        """
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), 
            AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_493__
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_493__
        makeAlgorithm(self, Schema schema) -> __dummy_493__
        """
        return _algorithmsLib.CentroidControl_makeAlgorithm(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_CentroidControl
    __del__ = lambda self : None;
CentroidControl_swigregister = _algorithmsLib.CentroidControl_swigregister
CentroidControl_swigregister(CentroidControl)

class GaussianCentroidControl(CentroidControl):
    """Proxy of C++ lsst::meas::algorithms::GaussianCentroidControl class"""
    __swig_setmethods__ = {}
    for _s in [CentroidControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, GaussianCentroidControl, name, value)
    __swig_getmethods__ = {}
    for _s in [CentroidControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianCentroidControl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GaussianCentroidControl"""
        this = _algorithmsLib.new_GaussianCentroidControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_GaussianCentroidControl
    __del__ = lambda self : None;
GaussianCentroidControl_swigregister = _algorithmsLib.GaussianCentroidControl_swigregister
GaussianCentroidControl_swigregister(GaussianCentroidControl)

class NaiveCentroidControl(CentroidControl):
    """Proxy of C++ lsst::meas::algorithms::NaiveCentroidControl class"""
    __swig_setmethods__ = {}
    for _s in [CentroidControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NaiveCentroidControl, name, value)
    __swig_getmethods__ = {}
    for _s in [CentroidControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NaiveCentroidControl, name)
    __repr__ = _swig_repr
    def _doc_background():
        """_doc_background() -> char"""
        return _algorithmsLib.NaiveCentroidControl__doc_background()

    if _newclass:_doc_background = staticmethod(_doc_background)
    __swig_getmethods__["_doc_background"] = lambda x: _doc_background
    def _type_background():
        """_type_background() -> char"""
        return _algorithmsLib.NaiveCentroidControl__type_background()

    if _newclass:_type_background = staticmethod(_type_background)
    __swig_getmethods__["_type_background"] = lambda x: _type_background
    __swig_setmethods__["background"] = _algorithmsLib.NaiveCentroidControl_background_set
    __swig_getmethods__["background"] = _algorithmsLib.NaiveCentroidControl_background_get
    if _newclass:background = _swig_property(_algorithmsLib.NaiveCentroidControl_background_get, _algorithmsLib.NaiveCentroidControl_background_set)
    def __init__(self): 
        """__init__(self) -> NaiveCentroidControl"""
        this = _algorithmsLib.new_NaiveCentroidControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_NaiveCentroidControl
    __del__ = lambda self : None;
NaiveCentroidControl_swigregister = _algorithmsLib.NaiveCentroidControl_swigregister
NaiveCentroidControl_swigregister(NaiveCentroidControl)

def NaiveCentroidControl__doc_background():
  """NaiveCentroidControl__doc_background() -> char"""
  return _algorithmsLib.NaiveCentroidControl__doc_background()

def NaiveCentroidControl__type_background():
  """NaiveCentroidControl__type_background() -> char"""
  return _algorithmsLib.NaiveCentroidControl__type_background()

class SdssCentroidControl(CentroidControl):
    """Proxy of C++ lsst::meas::algorithms::SdssCentroidControl class"""
    __swig_setmethods__ = {}
    for _s in [CentroidControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SdssCentroidControl, name, value)
    __swig_getmethods__ = {}
    for _s in [CentroidControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SdssCentroidControl, name)
    __repr__ = _swig_repr
    def _doc_binmax():
        """_doc_binmax() -> char"""
        return _algorithmsLib.SdssCentroidControl__doc_binmax()

    if _newclass:_doc_binmax = staticmethod(_doc_binmax)
    __swig_getmethods__["_doc_binmax"] = lambda x: _doc_binmax
    def _type_binmax():
        """_type_binmax() -> char"""
        return _algorithmsLib.SdssCentroidControl__type_binmax()

    if _newclass:_type_binmax = staticmethod(_type_binmax)
    __swig_getmethods__["_type_binmax"] = lambda x: _type_binmax
    __swig_setmethods__["binmax"] = _algorithmsLib.SdssCentroidControl_binmax_set
    __swig_getmethods__["binmax"] = _algorithmsLib.SdssCentroidControl_binmax_get
    if _newclass:binmax = _swig_property(_algorithmsLib.SdssCentroidControl_binmax_get, _algorithmsLib.SdssCentroidControl_binmax_set)
    def _doc_peakMin():
        """_doc_peakMin() -> char"""
        return _algorithmsLib.SdssCentroidControl__doc_peakMin()

    if _newclass:_doc_peakMin = staticmethod(_doc_peakMin)
    __swig_getmethods__["_doc_peakMin"] = lambda x: _doc_peakMin
    def _type_peakMin():
        """_type_peakMin() -> char"""
        return _algorithmsLib.SdssCentroidControl__type_peakMin()

    if _newclass:_type_peakMin = staticmethod(_type_peakMin)
    __swig_getmethods__["_type_peakMin"] = lambda x: _type_peakMin
    __swig_setmethods__["peakMin"] = _algorithmsLib.SdssCentroidControl_peakMin_set
    __swig_getmethods__["peakMin"] = _algorithmsLib.SdssCentroidControl_peakMin_get
    if _newclass:peakMin = _swig_property(_algorithmsLib.SdssCentroidControl_peakMin_get, _algorithmsLib.SdssCentroidControl_peakMin_set)
    def _doc_wfac():
        """_doc_wfac() -> char"""
        return _algorithmsLib.SdssCentroidControl__doc_wfac()

    if _newclass:_doc_wfac = staticmethod(_doc_wfac)
    __swig_getmethods__["_doc_wfac"] = lambda x: _doc_wfac
    def _type_wfac():
        """_type_wfac() -> char"""
        return _algorithmsLib.SdssCentroidControl__type_wfac()

    if _newclass:_type_wfac = staticmethod(_type_wfac)
    __swig_getmethods__["_type_wfac"] = lambda x: _type_wfac
    __swig_setmethods__["wfac"] = _algorithmsLib.SdssCentroidControl_wfac_set
    __swig_getmethods__["wfac"] = _algorithmsLib.SdssCentroidControl_wfac_get
    if _newclass:wfac = _swig_property(_algorithmsLib.SdssCentroidControl_wfac_get, _algorithmsLib.SdssCentroidControl_wfac_set)
    def __init__(self): 
        """__init__(self) -> SdssCentroidControl"""
        this = _algorithmsLib.new_SdssCentroidControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_SdssCentroidControl
    __del__ = lambda self : None;
SdssCentroidControl_swigregister = _algorithmsLib.SdssCentroidControl_swigregister
SdssCentroidControl_swigregister(SdssCentroidControl)

def SdssCentroidControl__doc_binmax():
  """SdssCentroidControl__doc_binmax() -> char"""
  return _algorithmsLib.SdssCentroidControl__doc_binmax()

def SdssCentroidControl__type_binmax():
  """SdssCentroidControl__type_binmax() -> char"""
  return _algorithmsLib.SdssCentroidControl__type_binmax()

def SdssCentroidControl__doc_peakMin():
  """SdssCentroidControl__doc_peakMin() -> char"""
  return _algorithmsLib.SdssCentroidControl__doc_peakMin()

def SdssCentroidControl__type_peakMin():
  """SdssCentroidControl__type_peakMin() -> char"""
  return _algorithmsLib.SdssCentroidControl__type_peakMin()

def SdssCentroidControl__doc_wfac():
  """SdssCentroidControl__doc_wfac() -> char"""
  return _algorithmsLib.SdssCentroidControl__doc_wfac()

def SdssCentroidControl__type_wfac():
  """SdssCentroidControl__type_wfac() -> char"""
  return _algorithmsLib.SdssCentroidControl__type_wfac()

class ShapeAlgorithm(Algorithm):
    """Proxy of C++ lsst::meas::algorithms::ShapeAlgorithm class"""
    __swig_setmethods__ = {}
    for _s in [Algorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ShapeAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [Algorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeAlgorithm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getControl(self):
        """getControl(self) -> ShapeControl"""
        return _algorithmsLib.ShapeAlgorithm_getControl(self)

    def getKeys(self):
        """getKeys(self) -> KeyTuple"""
        return _algorithmsLib.ShapeAlgorithm_getKeys(self)

    __swig_destroy__ = _algorithmsLib.delete_ShapeAlgorithm
    __del__ = lambda self : None;
ShapeAlgorithm_swigregister = _algorithmsLib.ShapeAlgorithm_swigregister
ShapeAlgorithm_swigregister(ShapeAlgorithm)

class ShapeControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::ShapeControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ShapeControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def clone(self):
        """clone(self) -> __dummy_507__"""
        return _algorithmsLib.ShapeControl_clone(self)

    def makeAlgorithm(self, *args):
        """
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >(), 
            AlgorithmMap others = lsst::meas::algorithms::AlgorithmMap()) -> __dummy_505__
        makeAlgorithm(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> __dummy_505__
        makeAlgorithm(self, Schema schema) -> __dummy_505__
        """
        return _algorithmsLib.ShapeControl_makeAlgorithm(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_ShapeControl
    __del__ = lambda self : None;
ShapeControl_swigregister = _algorithmsLib.ShapeControl_swigregister
ShapeControl_swigregister(ShapeControl)

class ClassificationControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::ClassificationControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ClassificationControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationControl, name)
    __repr__ = _swig_repr
    def _doc_fluxRatio():
        """_doc_fluxRatio() -> char"""
        return _algorithmsLib.ClassificationControl__doc_fluxRatio()

    if _newclass:_doc_fluxRatio = staticmethod(_doc_fluxRatio)
    __swig_getmethods__["_doc_fluxRatio"] = lambda x: _doc_fluxRatio
    def _type_fluxRatio():
        """_type_fluxRatio() -> char"""
        return _algorithmsLib.ClassificationControl__type_fluxRatio()

    if _newclass:_type_fluxRatio = staticmethod(_type_fluxRatio)
    __swig_getmethods__["_type_fluxRatio"] = lambda x: _type_fluxRatio
    __swig_setmethods__["fluxRatio"] = _algorithmsLib.ClassificationControl_fluxRatio_set
    __swig_getmethods__["fluxRatio"] = _algorithmsLib.ClassificationControl_fluxRatio_get
    if _newclass:fluxRatio = _swig_property(_algorithmsLib.ClassificationControl_fluxRatio_get, _algorithmsLib.ClassificationControl_fluxRatio_set)
    def _doc_modelErrFactor():
        """_doc_modelErrFactor() -> char"""
        return _algorithmsLib.ClassificationControl__doc_modelErrFactor()

    if _newclass:_doc_modelErrFactor = staticmethod(_doc_modelErrFactor)
    __swig_getmethods__["_doc_modelErrFactor"] = lambda x: _doc_modelErrFactor
    def _type_modelErrFactor():
        """_type_modelErrFactor() -> char"""
        return _algorithmsLib.ClassificationControl__type_modelErrFactor()

    if _newclass:_type_modelErrFactor = staticmethod(_type_modelErrFactor)
    __swig_getmethods__["_type_modelErrFactor"] = lambda x: _type_modelErrFactor
    __swig_setmethods__["modelErrFactor"] = _algorithmsLib.ClassificationControl_modelErrFactor_set
    __swig_getmethods__["modelErrFactor"] = _algorithmsLib.ClassificationControl_modelErrFactor_get
    if _newclass:modelErrFactor = _swig_property(_algorithmsLib.ClassificationControl_modelErrFactor_get, _algorithmsLib.ClassificationControl_modelErrFactor_set)
    def _doc_psfErrFactor():
        """_doc_psfErrFactor() -> char"""
        return _algorithmsLib.ClassificationControl__doc_psfErrFactor()

    if _newclass:_doc_psfErrFactor = staticmethod(_doc_psfErrFactor)
    __swig_getmethods__["_doc_psfErrFactor"] = lambda x: _doc_psfErrFactor
    def _type_psfErrFactor():
        """_type_psfErrFactor() -> char"""
        return _algorithmsLib.ClassificationControl__type_psfErrFactor()

    if _newclass:_type_psfErrFactor = staticmethod(_type_psfErrFactor)
    __swig_getmethods__["_type_psfErrFactor"] = lambda x: _type_psfErrFactor
    __swig_setmethods__["psfErrFactor"] = _algorithmsLib.ClassificationControl_psfErrFactor_set
    __swig_getmethods__["psfErrFactor"] = _algorithmsLib.ClassificationControl_psfErrFactor_get
    if _newclass:psfErrFactor = _swig_property(_algorithmsLib.ClassificationControl_psfErrFactor_get, _algorithmsLib.ClassificationControl_psfErrFactor_set)
    def __init__(self): 
        """__init__(self) -> ClassificationControl"""
        this = _algorithmsLib.new_ClassificationControl()
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_531__"""
        return _algorithmsLib.ClassificationControl_clone(self)

    __swig_destroy__ = _algorithmsLib.delete_ClassificationControl
    __del__ = lambda self : None;
ClassificationControl_swigregister = _algorithmsLib.ClassificationControl_swigregister
ClassificationControl_swigregister(ClassificationControl)

def ClassificationControl__doc_fluxRatio():
  """ClassificationControl__doc_fluxRatio() -> char"""
  return _algorithmsLib.ClassificationControl__doc_fluxRatio()

def ClassificationControl__type_fluxRatio():
  """ClassificationControl__type_fluxRatio() -> char"""
  return _algorithmsLib.ClassificationControl__type_fluxRatio()

def ClassificationControl__doc_modelErrFactor():
  """ClassificationControl__doc_modelErrFactor() -> char"""
  return _algorithmsLib.ClassificationControl__doc_modelErrFactor()

def ClassificationControl__type_modelErrFactor():
  """ClassificationControl__type_modelErrFactor() -> char"""
  return _algorithmsLib.ClassificationControl__type_modelErrFactor()

def ClassificationControl__doc_psfErrFactor():
  """ClassificationControl__doc_psfErrFactor() -> char"""
  return _algorithmsLib.ClassificationControl__doc_psfErrFactor()

def ClassificationControl__type_psfErrFactor():
  """ClassificationControl__type_psfErrFactor() -> char"""
  return _algorithmsLib.ClassificationControl__type_psfErrFactor()

class PixelFlagControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::PixelFlagControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PixelFlagControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelFlagControl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PixelFlagControl"""
        this = _algorithmsLib.new_PixelFlagControl()
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_533__"""
        return _algorithmsLib.PixelFlagControl_clone(self)

    __swig_destroy__ = _algorithmsLib.delete_PixelFlagControl
    __del__ = lambda self : None;
PixelFlagControl_swigregister = _algorithmsLib.PixelFlagControl_swigregister
PixelFlagControl_swigregister(PixelFlagControl)

class SkyCoordControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::SkyCoordControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SkyCoordControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SkyCoordControl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SkyCoordControl"""
        this = _algorithmsLib.new_SkyCoordControl()
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_535__"""
        return _algorithmsLib.SkyCoordControl_clone(self)

    __swig_destroy__ = _algorithmsLib.delete_SkyCoordControl
    __del__ = lambda self : None;
SkyCoordControl_swigregister = _algorithmsLib.SkyCoordControl_swigregister
SkyCoordControl_swigregister(SkyCoordControl)

class RecordCentroidControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::RecordCentroidControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RecordCentroidControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordCentroidControl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> RecordCentroidControl"""
        this = _algorithmsLib.new_RecordCentroidControl()
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_503__"""
        return _algorithmsLib.RecordCentroidControl_clone(self)

    __swig_destroy__ = _algorithmsLib.delete_RecordCentroidControl
    __del__ = lambda self : None;
RecordCentroidControl_swigregister = _algorithmsLib.RecordCentroidControl_swigregister
RecordCentroidControl_swigregister(RecordCentroidControl)

class SdssShapeControl(ShapeControl):
    """Proxy of C++ lsst::meas::algorithms::SdssShapeControl class"""
    __swig_setmethods__ = {}
    for _s in [ShapeControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SdssShapeControl, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SdssShapeControl, name)
    __repr__ = _swig_repr
    def _doc_background():
        """_doc_background() -> char"""
        return _algorithmsLib.SdssShapeControl__doc_background()

    if _newclass:_doc_background = staticmethod(_doc_background)
    __swig_getmethods__["_doc_background"] = lambda x: _doc_background
    def _type_background():
        """_type_background() -> char"""
        return _algorithmsLib.SdssShapeControl__type_background()

    if _newclass:_type_background = staticmethod(_type_background)
    __swig_getmethods__["_type_background"] = lambda x: _type_background
    __swig_setmethods__["background"] = _algorithmsLib.SdssShapeControl_background_set
    __swig_getmethods__["background"] = _algorithmsLib.SdssShapeControl_background_get
    if _newclass:background = _swig_property(_algorithmsLib.SdssShapeControl_background_get, _algorithmsLib.SdssShapeControl_background_set)
    def _doc_maxIter():
        """_doc_maxIter() -> char"""
        return _algorithmsLib.SdssShapeControl__doc_maxIter()

    if _newclass:_doc_maxIter = staticmethod(_doc_maxIter)
    __swig_getmethods__["_doc_maxIter"] = lambda x: _doc_maxIter
    def _type_maxIter():
        """_type_maxIter() -> char"""
        return _algorithmsLib.SdssShapeControl__type_maxIter()

    if _newclass:_type_maxIter = staticmethod(_type_maxIter)
    __swig_getmethods__["_type_maxIter"] = lambda x: _type_maxIter
    __swig_setmethods__["maxIter"] = _algorithmsLib.SdssShapeControl_maxIter_set
    __swig_getmethods__["maxIter"] = _algorithmsLib.SdssShapeControl_maxIter_get
    if _newclass:maxIter = _swig_property(_algorithmsLib.SdssShapeControl_maxIter_get, _algorithmsLib.SdssShapeControl_maxIter_set)
    def _doc_tol1():
        """_doc_tol1() -> char"""
        return _algorithmsLib.SdssShapeControl__doc_tol1()

    if _newclass:_doc_tol1 = staticmethod(_doc_tol1)
    __swig_getmethods__["_doc_tol1"] = lambda x: _doc_tol1
    def _type_tol1():
        """_type_tol1() -> char"""
        return _algorithmsLib.SdssShapeControl__type_tol1()

    if _newclass:_type_tol1 = staticmethod(_type_tol1)
    __swig_getmethods__["_type_tol1"] = lambda x: _type_tol1
    __swig_setmethods__["tol1"] = _algorithmsLib.SdssShapeControl_tol1_set
    __swig_getmethods__["tol1"] = _algorithmsLib.SdssShapeControl_tol1_get
    if _newclass:tol1 = _swig_property(_algorithmsLib.SdssShapeControl_tol1_get, _algorithmsLib.SdssShapeControl_tol1_set)
    def _doc_tol2():
        """_doc_tol2() -> char"""
        return _algorithmsLib.SdssShapeControl__doc_tol2()

    if _newclass:_doc_tol2 = staticmethod(_doc_tol2)
    __swig_getmethods__["_doc_tol2"] = lambda x: _doc_tol2
    def _type_tol2():
        """_type_tol2() -> char"""
        return _algorithmsLib.SdssShapeControl__type_tol2()

    if _newclass:_type_tol2 = staticmethod(_type_tol2)
    __swig_getmethods__["_type_tol2"] = lambda x: _type_tol2
    __swig_setmethods__["tol2"] = _algorithmsLib.SdssShapeControl_tol2_set
    __swig_getmethods__["tol2"] = _algorithmsLib.SdssShapeControl_tol2_get
    if _newclass:tol2 = _swig_property(_algorithmsLib.SdssShapeControl_tol2_get, _algorithmsLib.SdssShapeControl_tol2_set)
    def __init__(self): 
        """__init__(self) -> SdssShapeControl"""
        this = _algorithmsLib.new_SdssShapeControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_SdssShapeControl
    __del__ = lambda self : None;
SdssShapeControl_swigregister = _algorithmsLib.SdssShapeControl_swigregister
SdssShapeControl_swigregister(SdssShapeControl)

def SdssShapeControl__doc_background():
  """SdssShapeControl__doc_background() -> char"""
  return _algorithmsLib.SdssShapeControl__doc_background()

def SdssShapeControl__type_background():
  """SdssShapeControl__type_background() -> char"""
  return _algorithmsLib.SdssShapeControl__type_background()

def SdssShapeControl__doc_maxIter():
  """SdssShapeControl__doc_maxIter() -> char"""
  return _algorithmsLib.SdssShapeControl__doc_maxIter()

def SdssShapeControl__type_maxIter():
  """SdssShapeControl__type_maxIter() -> char"""
  return _algorithmsLib.SdssShapeControl__type_maxIter()

def SdssShapeControl__doc_tol1():
  """SdssShapeControl__doc_tol1() -> char"""
  return _algorithmsLib.SdssShapeControl__doc_tol1()

def SdssShapeControl__type_tol1():
  """SdssShapeControl__type_tol1() -> char"""
  return _algorithmsLib.SdssShapeControl__type_tol1()

def SdssShapeControl__doc_tol2():
  """SdssShapeControl__doc_tol2() -> char"""
  return _algorithmsLib.SdssShapeControl__doc_tol2()

def SdssShapeControl__type_tol2():
  """SdssShapeControl__type_tol2() -> char"""
  return _algorithmsLib.SdssShapeControl__type_tol2()

class GaussianFluxControl(FluxControl):
    """Proxy of C++ lsst::meas::algorithms::GaussianFluxControl class"""
    __swig_setmethods__ = {}
    for _s in [FluxControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, GaussianFluxControl, name, value)
    __swig_getmethods__ = {}
    for _s in [FluxControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianFluxControl, name)
    __repr__ = _swig_repr
    def _doc_fixed():
        """_doc_fixed() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_fixed()

    if _newclass:_doc_fixed = staticmethod(_doc_fixed)
    __swig_getmethods__["_doc_fixed"] = lambda x: _doc_fixed
    def _type_fixed():
        """_type_fixed() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_fixed()

    if _newclass:_type_fixed = staticmethod(_type_fixed)
    __swig_getmethods__["_type_fixed"] = lambda x: _type_fixed
    __swig_setmethods__["fixed"] = _algorithmsLib.GaussianFluxControl_fixed_set
    __swig_getmethods__["fixed"] = _algorithmsLib.GaussianFluxControl_fixed_get
    if _newclass:fixed = _swig_property(_algorithmsLib.GaussianFluxControl_fixed_get, _algorithmsLib.GaussianFluxControl_fixed_set)
    def _doc_background():
        """_doc_background() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_background()

    if _newclass:_doc_background = staticmethod(_doc_background)
    __swig_getmethods__["_doc_background"] = lambda x: _doc_background
    def _type_background():
        """_type_background() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_background()

    if _newclass:_type_background = staticmethod(_type_background)
    __swig_getmethods__["_type_background"] = lambda x: _type_background
    __swig_setmethods__["background"] = _algorithmsLib.GaussianFluxControl_background_set
    __swig_getmethods__["background"] = _algorithmsLib.GaussianFluxControl_background_get
    if _newclass:background = _swig_property(_algorithmsLib.GaussianFluxControl_background_get, _algorithmsLib.GaussianFluxControl_background_set)
    def _doc_shiftmax():
        """_doc_shiftmax() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_shiftmax()

    if _newclass:_doc_shiftmax = staticmethod(_doc_shiftmax)
    __swig_getmethods__["_doc_shiftmax"] = lambda x: _doc_shiftmax
    def _type_shiftmax():
        """_type_shiftmax() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_shiftmax()

    if _newclass:_type_shiftmax = staticmethod(_type_shiftmax)
    __swig_getmethods__["_type_shiftmax"] = lambda x: _type_shiftmax
    __swig_setmethods__["shiftmax"] = _algorithmsLib.GaussianFluxControl_shiftmax_set
    __swig_getmethods__["shiftmax"] = _algorithmsLib.GaussianFluxControl_shiftmax_get
    if _newclass:shiftmax = _swig_property(_algorithmsLib.GaussianFluxControl_shiftmax_get, _algorithmsLib.GaussianFluxControl_shiftmax_set)
    def _doc_centroid():
        """_doc_centroid() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_centroid()

    if _newclass:_doc_centroid = staticmethod(_doc_centroid)
    __swig_getmethods__["_doc_centroid"] = lambda x: _doc_centroid
    def _type_centroid():
        """_type_centroid() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_centroid()

    if _newclass:_type_centroid = staticmethod(_type_centroid)
    __swig_getmethods__["_type_centroid"] = lambda x: _type_centroid
    __swig_setmethods__["centroid"] = _algorithmsLib.GaussianFluxControl_centroid_set
    __swig_getmethods__["centroid"] = _algorithmsLib.GaussianFluxControl_centroid_get
    if _newclass:centroid = _swig_property(_algorithmsLib.GaussianFluxControl_centroid_get, _algorithmsLib.GaussianFluxControl_centroid_set)
    def _doc_shape():
        """_doc_shape() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_shape()

    if _newclass:_doc_shape = staticmethod(_doc_shape)
    __swig_getmethods__["_doc_shape"] = lambda x: _doc_shape
    def _type_shape():
        """_type_shape() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_shape()

    if _newclass:_type_shape = staticmethod(_type_shape)
    __swig_getmethods__["_type_shape"] = lambda x: _type_shape
    __swig_setmethods__["shape"] = _algorithmsLib.GaussianFluxControl_shape_set
    __swig_getmethods__["shape"] = _algorithmsLib.GaussianFluxControl_shape_get
    if _newclass:shape = _swig_property(_algorithmsLib.GaussianFluxControl_shape_get, _algorithmsLib.GaussianFluxControl_shape_set)
    def _doc_maxIter():
        """_doc_maxIter() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_maxIter()

    if _newclass:_doc_maxIter = staticmethod(_doc_maxIter)
    __swig_getmethods__["_doc_maxIter"] = lambda x: _doc_maxIter
    def _type_maxIter():
        """_type_maxIter() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_maxIter()

    if _newclass:_type_maxIter = staticmethod(_type_maxIter)
    __swig_getmethods__["_type_maxIter"] = lambda x: _type_maxIter
    __swig_setmethods__["maxIter"] = _algorithmsLib.GaussianFluxControl_maxIter_set
    __swig_getmethods__["maxIter"] = _algorithmsLib.GaussianFluxControl_maxIter_get
    if _newclass:maxIter = _swig_property(_algorithmsLib.GaussianFluxControl_maxIter_get, _algorithmsLib.GaussianFluxControl_maxIter_set)
    def _doc_tol1():
        """_doc_tol1() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_tol1()

    if _newclass:_doc_tol1 = staticmethod(_doc_tol1)
    __swig_getmethods__["_doc_tol1"] = lambda x: _doc_tol1
    def _type_tol1():
        """_type_tol1() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_tol1()

    if _newclass:_type_tol1 = staticmethod(_type_tol1)
    __swig_getmethods__["_type_tol1"] = lambda x: _type_tol1
    __swig_setmethods__["tol1"] = _algorithmsLib.GaussianFluxControl_tol1_set
    __swig_getmethods__["tol1"] = _algorithmsLib.GaussianFluxControl_tol1_get
    if _newclass:tol1 = _swig_property(_algorithmsLib.GaussianFluxControl_tol1_get, _algorithmsLib.GaussianFluxControl_tol1_set)
    def _doc_tol2():
        """_doc_tol2() -> char"""
        return _algorithmsLib.GaussianFluxControl__doc_tol2()

    if _newclass:_doc_tol2 = staticmethod(_doc_tol2)
    __swig_getmethods__["_doc_tol2"] = lambda x: _doc_tol2
    def _type_tol2():
        """_type_tol2() -> char"""
        return _algorithmsLib.GaussianFluxControl__type_tol2()

    if _newclass:_type_tol2 = staticmethod(_type_tol2)
    __swig_getmethods__["_type_tol2"] = lambda x: _type_tol2
    __swig_setmethods__["tol2"] = _algorithmsLib.GaussianFluxControl_tol2_set
    __swig_getmethods__["tol2"] = _algorithmsLib.GaussianFluxControl_tol2_get
    if _newclass:tol2 = _swig_property(_algorithmsLib.GaussianFluxControl_tol2_get, _algorithmsLib.GaussianFluxControl_tol2_set)
    def __init__(self): 
        """__init__(self) -> GaussianFluxControl"""
        this = _algorithmsLib.new_GaussianFluxControl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_GaussianFluxControl
    __del__ = lambda self : None;
GaussianFluxControl_swigregister = _algorithmsLib.GaussianFluxControl_swigregister
GaussianFluxControl_swigregister(GaussianFluxControl)

def GaussianFluxControl__doc_fixed():
  """GaussianFluxControl__doc_fixed() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_fixed()

def GaussianFluxControl__type_fixed():
  """GaussianFluxControl__type_fixed() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_fixed()

def GaussianFluxControl__doc_background():
  """GaussianFluxControl__doc_background() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_background()

def GaussianFluxControl__type_background():
  """GaussianFluxControl__type_background() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_background()

def GaussianFluxControl__doc_shiftmax():
  """GaussianFluxControl__doc_shiftmax() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_shiftmax()

def GaussianFluxControl__type_shiftmax():
  """GaussianFluxControl__type_shiftmax() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_shiftmax()

def GaussianFluxControl__doc_centroid():
  """GaussianFluxControl__doc_centroid() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_centroid()

def GaussianFluxControl__type_centroid():
  """GaussianFluxControl__type_centroid() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_centroid()

def GaussianFluxControl__doc_shape():
  """GaussianFluxControl__doc_shape() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_shape()

def GaussianFluxControl__type_shape():
  """GaussianFluxControl__type_shape() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_shape()

def GaussianFluxControl__doc_maxIter():
  """GaussianFluxControl__doc_maxIter() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_maxIter()

def GaussianFluxControl__type_maxIter():
  """GaussianFluxControl__type_maxIter() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_maxIter()

def GaussianFluxControl__doc_tol1():
  """GaussianFluxControl__doc_tol1() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_tol1()

def GaussianFluxControl__type_tol1():
  """GaussianFluxControl__type_tol1() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_tol1()

def GaussianFluxControl__doc_tol2():
  """GaussianFluxControl__doc_tol2() -> char"""
  return _algorithmsLib.GaussianFluxControl__doc_tol2()

def GaussianFluxControl__type_tol2():
  """GaussianFluxControl__type_tol2() -> char"""
  return _algorithmsLib.GaussianFluxControl__type_tol2()

class CorrectFluxesControl(AlgorithmControl):
    """Proxy of C++ lsst::meas::algorithms::CorrectFluxesControl class"""
    __swig_setmethods__ = {}
    for _s in [AlgorithmControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CorrectFluxesControl, name, value)
    __swig_getmethods__ = {}
    for _s in [AlgorithmControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CorrectFluxesControl, name)
    __repr__ = _swig_repr
    def _doc_doApCorr():
        """_doc_doApCorr() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_doApCorr()

    if _newclass:_doc_doApCorr = staticmethod(_doc_doApCorr)
    __swig_getmethods__["_doc_doApCorr"] = lambda x: _doc_doApCorr
    def _type_doApCorr():
        """_type_doApCorr() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_doApCorr()

    if _newclass:_type_doApCorr = staticmethod(_type_doApCorr)
    __swig_getmethods__["_type_doApCorr"] = lambda x: _type_doApCorr
    __swig_setmethods__["doApCorr"] = _algorithmsLib.CorrectFluxesControl_doApCorr_set
    __swig_getmethods__["doApCorr"] = _algorithmsLib.CorrectFluxesControl_doApCorr_get
    if _newclass:doApCorr = _swig_property(_algorithmsLib.CorrectFluxesControl_doApCorr_get, _algorithmsLib.CorrectFluxesControl_doApCorr_set)
    def _doc_doFlagApCorrFailures():
        """_doc_doFlagApCorrFailures() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_doFlagApCorrFailures()

    if _newclass:_doc_doFlagApCorrFailures = staticmethod(_doc_doFlagApCorrFailures)
    __swig_getmethods__["_doc_doFlagApCorrFailures"] = lambda x: _doc_doFlagApCorrFailures
    def _type_doFlagApCorrFailures():
        """_type_doFlagApCorrFailures() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_doFlagApCorrFailures()

    if _newclass:_type_doFlagApCorrFailures = staticmethod(_type_doFlagApCorrFailures)
    __swig_getmethods__["_type_doFlagApCorrFailures"] = lambda x: _type_doFlagApCorrFailures
    __swig_setmethods__["doFlagApCorrFailures"] = _algorithmsLib.CorrectFluxesControl_doFlagApCorrFailures_set
    __swig_getmethods__["doFlagApCorrFailures"] = _algorithmsLib.CorrectFluxesControl_doFlagApCorrFailures_get
    if _newclass:doFlagApCorrFailures = _swig_property(_algorithmsLib.CorrectFluxesControl_doFlagApCorrFailures_get, _algorithmsLib.CorrectFluxesControl_doFlagApCorrFailures_set)
    def _doc_doTieScaledFluxes():
        """_doc_doTieScaledFluxes() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_doTieScaledFluxes()

    if _newclass:_doc_doTieScaledFluxes = staticmethod(_doc_doTieScaledFluxes)
    __swig_getmethods__["_doc_doTieScaledFluxes"] = lambda x: _doc_doTieScaledFluxes
    def _type_doTieScaledFluxes():
        """_type_doTieScaledFluxes() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_doTieScaledFluxes()

    if _newclass:_type_doTieScaledFluxes = staticmethod(_type_doTieScaledFluxes)
    __swig_getmethods__["_type_doTieScaledFluxes"] = lambda x: _type_doTieScaledFluxes
    __swig_setmethods__["doTieScaledFluxes"] = _algorithmsLib.CorrectFluxesControl_doTieScaledFluxes_set
    __swig_getmethods__["doTieScaledFluxes"] = _algorithmsLib.CorrectFluxesControl_doTieScaledFluxes_get
    if _newclass:doTieScaledFluxes = _swig_property(_algorithmsLib.CorrectFluxesControl_doTieScaledFluxes_get, _algorithmsLib.CorrectFluxesControl_doTieScaledFluxes_set)
    def _doc_doFlagTieFailures():
        """_doc_doFlagTieFailures() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_doFlagTieFailures()

    if _newclass:_doc_doFlagTieFailures = staticmethod(_doc_doFlagTieFailures)
    __swig_getmethods__["_doc_doFlagTieFailures"] = lambda x: _doc_doFlagTieFailures
    def _type_doFlagTieFailures():
        """_type_doFlagTieFailures() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_doFlagTieFailures()

    if _newclass:_type_doFlagTieFailures = staticmethod(_type_doFlagTieFailures)
    __swig_getmethods__["_type_doFlagTieFailures"] = lambda x: _type_doFlagTieFailures
    __swig_setmethods__["doFlagTieFailures"] = _algorithmsLib.CorrectFluxesControl_doFlagTieFailures_set
    __swig_getmethods__["doFlagTieFailures"] = _algorithmsLib.CorrectFluxesControl_doFlagTieFailures_get
    if _newclass:doFlagTieFailures = _swig_property(_algorithmsLib.CorrectFluxesControl_doFlagTieFailures_get, _algorithmsLib.CorrectFluxesControl_doFlagTieFailures_set)
    def _doc_apCorrRadius():
        """_doc_apCorrRadius() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_apCorrRadius()

    if _newclass:_doc_apCorrRadius = staticmethod(_doc_apCorrRadius)
    __swig_getmethods__["_doc_apCorrRadius"] = lambda x: _doc_apCorrRadius
    def _type_apCorrRadius():
        """_type_apCorrRadius() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_apCorrRadius()

    if _newclass:_type_apCorrRadius = staticmethod(_type_apCorrRadius)
    __swig_getmethods__["_type_apCorrRadius"] = lambda x: _type_apCorrRadius
    __swig_setmethods__["apCorrRadius"] = _algorithmsLib.CorrectFluxesControl_apCorrRadius_set
    __swig_getmethods__["apCorrRadius"] = _algorithmsLib.CorrectFluxesControl_apCorrRadius_get
    if _newclass:apCorrRadius = _swig_property(_algorithmsLib.CorrectFluxesControl_apCorrRadius_get, _algorithmsLib.CorrectFluxesControl_apCorrRadius_set)
    def _doc_canonicalFluxName():
        """_doc_canonicalFluxName() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_canonicalFluxName()

    if _newclass:_doc_canonicalFluxName = staticmethod(_doc_canonicalFluxName)
    __swig_getmethods__["_doc_canonicalFluxName"] = lambda x: _doc_canonicalFluxName
    def _type_canonicalFluxName():
        """_type_canonicalFluxName() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_canonicalFluxName()

    if _newclass:_type_canonicalFluxName = staticmethod(_type_canonicalFluxName)
    __swig_getmethods__["_type_canonicalFluxName"] = lambda x: _type_canonicalFluxName
    __swig_setmethods__["canonicalFluxName"] = _algorithmsLib.CorrectFluxesControl_canonicalFluxName_set
    __swig_getmethods__["canonicalFluxName"] = _algorithmsLib.CorrectFluxesControl_canonicalFluxName_get
    if _newclass:canonicalFluxName = _swig_property(_algorithmsLib.CorrectFluxesControl_canonicalFluxName_get, _algorithmsLib.CorrectFluxesControl_canonicalFluxName_set)
    def _doc_canonicalFluxIndex():
        """_doc_canonicalFluxIndex() -> char"""
        return _algorithmsLib.CorrectFluxesControl__doc_canonicalFluxIndex()

    if _newclass:_doc_canonicalFluxIndex = staticmethod(_doc_canonicalFluxIndex)
    __swig_getmethods__["_doc_canonicalFluxIndex"] = lambda x: _doc_canonicalFluxIndex
    def _type_canonicalFluxIndex():
        """_type_canonicalFluxIndex() -> char"""
        return _algorithmsLib.CorrectFluxesControl__type_canonicalFluxIndex()

    if _newclass:_type_canonicalFluxIndex = staticmethod(_type_canonicalFluxIndex)
    __swig_getmethods__["_type_canonicalFluxIndex"] = lambda x: _type_canonicalFluxIndex
    __swig_setmethods__["canonicalFluxIndex"] = _algorithmsLib.CorrectFluxesControl_canonicalFluxIndex_set
    __swig_getmethods__["canonicalFluxIndex"] = _algorithmsLib.CorrectFluxesControl_canonicalFluxIndex_get
    if _newclass:canonicalFluxIndex = _swig_property(_algorithmsLib.CorrectFluxesControl_canonicalFluxIndex_get, _algorithmsLib.CorrectFluxesControl_canonicalFluxIndex_set)
    def __init__(self): 
        """__init__(self) -> CorrectFluxesControl"""
        this = _algorithmsLib.new_CorrectFluxesControl()
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(self) -> __dummy_529__"""
        return _algorithmsLib.CorrectFluxesControl_clone(self)

    __swig_destroy__ = _algorithmsLib.delete_CorrectFluxesControl
    __del__ = lambda self : None;
CorrectFluxesControl_swigregister = _algorithmsLib.CorrectFluxesControl_swigregister
CorrectFluxesControl_swigregister(CorrectFluxesControl)

def CorrectFluxesControl__doc_doApCorr():
  """CorrectFluxesControl__doc_doApCorr() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_doApCorr()

def CorrectFluxesControl__type_doApCorr():
  """CorrectFluxesControl__type_doApCorr() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_doApCorr()

def CorrectFluxesControl__doc_doFlagApCorrFailures():
  """CorrectFluxesControl__doc_doFlagApCorrFailures() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_doFlagApCorrFailures()

def CorrectFluxesControl__type_doFlagApCorrFailures():
  """CorrectFluxesControl__type_doFlagApCorrFailures() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_doFlagApCorrFailures()

def CorrectFluxesControl__doc_doTieScaledFluxes():
  """CorrectFluxesControl__doc_doTieScaledFluxes() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_doTieScaledFluxes()

def CorrectFluxesControl__type_doTieScaledFluxes():
  """CorrectFluxesControl__type_doTieScaledFluxes() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_doTieScaledFluxes()

def CorrectFluxesControl__doc_doFlagTieFailures():
  """CorrectFluxesControl__doc_doFlagTieFailures() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_doFlagTieFailures()

def CorrectFluxesControl__type_doFlagTieFailures():
  """CorrectFluxesControl__type_doFlagTieFailures() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_doFlagTieFailures()

def CorrectFluxesControl__doc_apCorrRadius():
  """CorrectFluxesControl__doc_apCorrRadius() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_apCorrRadius()

def CorrectFluxesControl__type_apCorrRadius():
  """CorrectFluxesControl__type_apCorrRadius() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_apCorrRadius()

def CorrectFluxesControl__doc_canonicalFluxName():
  """CorrectFluxesControl__doc_canonicalFluxName() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_canonicalFluxName()

def CorrectFluxesControl__type_canonicalFluxName():
  """CorrectFluxesControl__type_canonicalFluxName() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_canonicalFluxName()

def CorrectFluxesControl__doc_canonicalFluxIndex():
  """CorrectFluxesControl__doc_canonicalFluxIndex() -> char"""
  return _algorithmsLib.CorrectFluxesControl__doc_canonicalFluxIndex()

def CorrectFluxesControl__type_canonicalFluxIndex():
  """CorrectFluxesControl__type_canonicalFluxIndex() -> char"""
  return _algorithmsLib.CorrectFluxesControl__type_canonicalFluxIndex()

LSST_MEAS_ALGORITHMS_PHOTOMETRY_H = _algorithmsLib.LSST_MEAS_ALGORITHMS_PHOTOMETRY_H
class MeasureSources(_object):
    """Proxy of C++ lsst::meas::algorithms::MeasureSources class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MeasureSources, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasureSources, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getAlgorithms(self):
        """getAlgorithms(self) -> AlgorithmList"""
        val = _algorithmsLib.MeasureSources_getAlgorithms(self)
        val = type(val)(val) 

        return val

    def apply(self, *args):
        """
        apply(self, SourceRecord source, ExposureF exposure, Point2D center, 
            bool refineCenter = True)
        apply(self, SourceRecord source, ExposureF exposure, Point2D center)
        apply(self, SourceRecord source, ExposureF exposure)
        apply(self, SourceRecord source, ExposureF exposure, SourceRecord reference, 
            __dummy_164__ referenceWcs = boost::shared_ptr< lsst::afw::image::Wcs const >())
        apply(self, SourceRecord source, ExposureF exposure, SourceRecord reference)
        apply(self, SourceRecord source, ExposureD exposure, Point2D center, 
            bool refineCenter = True)
        apply(self, SourceRecord source, ExposureD exposure, Point2D center)
        apply(self, SourceRecord source, ExposureD exposure)
        apply(self, SourceRecord source, ExposureD exposure, SourceRecord reference, 
            __dummy_164__ referenceWcs = boost::shared_ptr< lsst::afw::image::Wcs const >())
        apply(self, SourceRecord source, ExposureD exposure, SourceRecord reference)
        """
        return _algorithmsLib.MeasureSources_apply(self, *args)

    def applyWithCoord(self, *args):
        """
        applyWithCoord(self, SourceRecord source, ExposureF exposure)
        applyWithCoord(self, SourceRecord source, ExposureD exposure)
        """
        return _algorithmsLib.MeasureSources_applyWithCoord(self, *args)

    def applyWithPixel(self, *args):
        """
        applyWithPixel(self, SourceRecord source, ExposureF exposure)
        applyWithPixel(self, SourceRecord source, ExposureD exposure)
        """
        return _algorithmsLib.MeasureSources_applyWithPixel(self, *args)

    __swig_destroy__ = _algorithmsLib.delete_MeasureSources
    __del__ = lambda self : None;
MeasureSources_swigregister = _algorithmsLib.MeasureSources_swigregister
MeasureSources_swigregister(MeasureSources)

class MeasureSourcesBuilder(_object):
    """Proxy of C++ lsst::meas::algorithms::MeasureSourcesBuilder class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MeasureSourcesBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasureSourcesBuilder, name)
    __repr__ = _swig_repr
    def addAlgorithm(self, *args):
        """addAlgorithm(self, AlgorithmControl algorithmControl) -> MeasureSourcesBuilder"""
        val = _algorithmsLib.MeasureSourcesBuilder_addAlgorithm(self, *args)
        val = self 

        return val

    def setCentroider(self, *args):
        """setCentroider(self, CentroidControl centroidControl) -> MeasureSourcesBuilder"""
        val = _algorithmsLib.MeasureSourcesBuilder_setCentroider(self, *args)
        val = self 

        return val

    def build(self, *args):
        """
        build(self, Schema schema, __dummy_5__ metadata = boost::shared_ptr< lsst::daf::base::PropertyList >()) -> MeasureSources
        build(self, Schema schema) -> MeasureSources
        """
        return _algorithmsLib.MeasureSourcesBuilder_build(self, *args)

    def __init__(self, prefix = ""): 
        """
        __init__(self, string prefix = "") -> MeasureSourcesBuilder
        __init__(self) -> MeasureSourcesBuilder
        """
        this = _algorithmsLib.new_MeasureSourcesBuilder(prefix)
        try: self.this.append(this)
        except: self.this = this
    def addAlgorithms(self, iterable):
        for item in iterable:
            self.addAlgorithm(item)
        return self

    __swig_destroy__ = _algorithmsLib.delete_MeasureSourcesBuilder
    __del__ = lambda self : None;
MeasureSourcesBuilder_swigregister = _algorithmsLib.MeasureSourcesBuilder_swigregister
MeasureSourcesBuilder_swigregister(MeasureSourcesBuilder)

class Defect(lsst.afw.image.imageLib.DefectBase):
    """Proxy of C++ lsst::meas::algorithms::Defect class"""
    __swig_setmethods__ = {}
    for _s in [lsst.afw.image.imageLib.DefectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Defect, name, value)
    __swig_getmethods__ = {}
    for _s in [lsst.afw.image.imageLib.DefectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Defect, name)
    __repr__ = _swig_repr
    LEFT = _algorithmsLib.Defect_LEFT
    NEAR_LEFT = _algorithmsLib.Defect_NEAR_LEFT
    WIDE_LEFT = _algorithmsLib.Defect_WIDE_LEFT
    MIDDLE = _algorithmsLib.Defect_MIDDLE
    WIDE_NEAR_LEFT = _algorithmsLib.Defect_WIDE_NEAR_LEFT
    WIDE = _algorithmsLib.Defect_WIDE
    WIDE_NEAR_RIGHT = _algorithmsLib.Defect_WIDE_NEAR_RIGHT
    NEAR_RIGHT = _algorithmsLib.Defect_NEAR_RIGHT
    WIDE_RIGHT = _algorithmsLib.Defect_WIDE_RIGHT
    RIGHT = _algorithmsLib.Defect_RIGHT
    WIDE_DEFECT = _algorithmsLib.Defect_WIDE_DEFECT
    def __init__(self, *args): 
        """
        __init__(self, BoxI bbox = lsst::afw::geom::BoxI()) -> Defect
        __init__(self) -> Defect
        """
        this = _algorithmsLib.new_Defect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _algorithmsLib.delete_Defect
    __del__ = lambda self : None;
    def classify(self, *args):
        """classify(self, DefectPosition pos, unsigned int type)"""
        return _algorithmsLib.Defect_classify(self, *args)

    def getType(self):
        """getType(self) -> unsigned int"""
        return _algorithmsLib.Defect_getType(self)

    def getPos(self):
        """getPos(self) -> DefectPosition"""
        return _algorithmsLib.Defect_getPos(self)

Defect_swigregister = _algorithmsLib.Defect_swigregister
Defect_swigregister(Defect)
lpc_1_c1 = cvar.lpc_1_c1
lpc_1_c2 = cvar.lpc_1_c2
lpc_1s2_c1 = cvar.lpc_1s2_c1
lpc_1s2_c2 = cvar.lpc_1s2_c2
min2GaussianBias = cvar.min2GaussianBias

class DefectListT(_object):
    """Proxy of C++ std::vector<(lsst::meas::algorithms::Defect::Ptr)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DefectListT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefectListT, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _algorithmsLib.DefectListT_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _algorithmsLib.DefectListT___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _algorithmsLib.DefectListT___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type"""
        return _algorithmsLib.DefectListT___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type"""
        return _algorithmsLib.DefectListT_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j) -> DefectListT
        """
        return _algorithmsLib.DefectListT___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j, 
            DefectListT v = std::vector< boost::shared_ptr< lsst::meas::algorithms::Defect >,std::allocator< boost::shared_ptr< lsst::meas::algorithms::Defect > > >())
        __setslice__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j)
        """
        return _algorithmsLib.DefectListT___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type j)
        """
        return _algorithmsLib.DefectListT___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _algorithmsLib.DefectListT___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> DefectListT
        __getitem__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type
        """
        return _algorithmsLib.DefectListT___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, DefectListT v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)
        """
        return _algorithmsLib.DefectListT___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)"""
        return _algorithmsLib.DefectListT_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _algorithmsLib.DefectListT_empty(self)

    def size(self):
        """size(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type"""
        return _algorithmsLib.DefectListT_size(self)

    def clear(self):
        """clear(self)"""
        return _algorithmsLib.DefectListT_clear(self)

    def swap(self, *args):
        """swap(self, DefectListT v)"""
        return _algorithmsLib.DefectListT_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::allocator_type"""
        return _algorithmsLib.DefectListT_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator"""
        return _algorithmsLib.DefectListT_begin(self)

    def end(self):
        """end(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator"""
        return _algorithmsLib.DefectListT_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::reverse_iterator"""
        return _algorithmsLib.DefectListT_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::reverse_iterator"""
        return _algorithmsLib.DefectListT_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _algorithmsLib.DefectListT_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator pos) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator
        erase(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator first, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator last) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator
        """
        return _algorithmsLib.DefectListT_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> DefectListT
        __init__(self, DefectListT arg0) -> DefectListT
        __init__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type size) -> DefectListT
        __init__(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type size, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type value) -> DefectListT
        """
        this = _algorithmsLib.new_DefectListT(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)"""
        return _algorithmsLib.DefectListT_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type"""
        return _algorithmsLib.DefectListT_front(self)

    def back(self):
        """back(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type"""
        return _algorithmsLib.DefectListT_back(self)

    def assign(self, *args):
        """
        assign(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type n, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)
        """
        return _algorithmsLib.DefectListT_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type new_size)
        resize(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type new_size, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)
        """
        return _algorithmsLib.DefectListT_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator pos, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator
        insert(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::iterator pos, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type n, 
            std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::value_type x)
        """
        return _algorithmsLib.DefectListT_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type n)"""
        return _algorithmsLib.DefectListT_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(boost::shared_ptr<(lsst::meas::algorithms::Defect)>)>::size_type"""
        return _algorithmsLib.DefectListT_capacity(self)

    __swig_destroy__ = _algorithmsLib.delete_DefectListT
    __del__ = lambda self : None;
DefectListT_swigregister = _algorithmsLib.DefectListT_swigregister
DefectListT_swigregister(DefectListT)

def findCosmicRays(*args):
  """
    findCosmicRays(MaskedImageF image, Psf psf, double bkgd, Policy policy, 
        bool keep = False) -> FootprintList
    findCosmicRays(MaskedImageF image, Psf psf, double bkgd, Policy policy) -> FootprintList
    """
  return _algorithmsLib.findCosmicRays(*args)

def interpolateOverDefects(*args):
  """
    interpolateOverDefects(MaskedImageF image, Psf psf, DefectListT badList, double fallbackValue = std::numeric_limits< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel >::Image::Pixel >::max())
    interpolateOverDefects(MaskedImageF image, Psf psf, DefectListT badList)
    """
  return _algorithmsLib.interpolateOverDefects(*args)

class SincCoeffsF(_object):
    """Proxy of C++ lsst::meas::algorithms::photometry::SincCoeffs<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SincCoeffsF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SincCoeffsF, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def cache(*args):
        """cache(float r1, float r2)"""
        return _algorithmsLib.SincCoeffsF_cache(*args)

    if _newclass:cache = staticmethod(cache)
    __swig_getmethods__["cache"] = lambda x: cache
    def get(*args):
        """
        get(Axes axes, float innerFactor = 0.0) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
        get(Axes axes) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
        """
        return _algorithmsLib.SincCoeffsF_get(*args)

    if _newclass:get = staticmethod(get)
    __swig_getmethods__["get"] = lambda x: get
    def calculate(*args):
        """
        calculate(Axes axes, double innerFactor = 0.0) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
        calculate(Axes axes) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
        """
        return _algorithmsLib.SincCoeffsF_calculate(*args)

    if _newclass:calculate = staticmethod(calculate)
    __swig_getmethods__["calculate"] = lambda x: calculate
    __swig_destroy__ = _algorithmsLib.delete_SincCoeffsF
    __del__ = lambda self : None;
SincCoeffsF_swigregister = _algorithmsLib.SincCoeffsF_swigregister
SincCoeffsF_swigregister(SincCoeffsF)

def SincCoeffsF_cache(*args):
  """SincCoeffsF_cache(float r1, float r2)"""
  return _algorithmsLib.SincCoeffsF_cache(*args)

def SincCoeffsF_get(*args):
  """
    get(Axes axes, float innerFactor = 0.0) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
    SincCoeffsF_get(Axes axes) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
    """
  return _algorithmsLib.SincCoeffsF_get(*args)

def SincCoeffsF_calculate(*args):
  """
    calculate(Axes axes, double innerFactor = 0.0) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
    SincCoeffsF_calculate(Axes axes) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(float)>::CoeffT)>
    """
  return _algorithmsLib.SincCoeffsF_calculate(*args)

class SincCoeffsD(_object):
    """Proxy of C++ lsst::meas::algorithms::photometry::SincCoeffs<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SincCoeffsD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SincCoeffsD, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def cache(*args):
        """cache(float r1, float r2)"""
        return _algorithmsLib.SincCoeffsD_cache(*args)

    if _newclass:cache = staticmethod(cache)
    __swig_getmethods__["cache"] = lambda x: cache
    def get(*args):
        """
        get(Axes axes, float innerFactor = 0.0) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
        get(Axes axes) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
        """
        return _algorithmsLib.SincCoeffsD_get(*args)

    if _newclass:get = staticmethod(get)
    __swig_getmethods__["get"] = lambda x: get
    def calculate(*args):
        """
        calculate(Axes axes, double innerFactor = 0.0) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
        calculate(Axes axes) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
        """
        return _algorithmsLib.SincCoeffsD_calculate(*args)

    if _newclass:calculate = staticmethod(calculate)
    __swig_getmethods__["calculate"] = lambda x: calculate
    __swig_destroy__ = _algorithmsLib.delete_SincCoeffsD
    __del__ = lambda self : None;
SincCoeffsD_swigregister = _algorithmsLib.SincCoeffsD_swigregister
SincCoeffsD_swigregister(SincCoeffsD)

def SincCoeffsD_cache(*args):
  """SincCoeffsD_cache(float r1, float r2)"""
  return _algorithmsLib.SincCoeffsD_cache(*args)

def SincCoeffsD_get(*args):
  """
    get(Axes axes, float innerFactor = 0.0) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
    SincCoeffsD_get(Axes axes) -> boost::shared_ptr<(q(const).lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
    """
  return _algorithmsLib.SincCoeffsD_get(*args)

def SincCoeffsD_calculate(*args):
  """
    calculate(Axes axes, double innerFactor = 0.0) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
    SincCoeffsD_calculate(Axes axes) -> boost::shared_ptr<(lsst::meas::algorithms::photometry::SincCoeffs<(double)>::CoeffT)>
    """
  return _algorithmsLib.SincCoeffsD_calculate(*args)

# This file is compatible with both classic and new-style classes.


def calculateSincApertureFlux(*args):
  """
    calculateSincApertureFlux(MaskedImageF mimage, Ellipse ellipse, double innerFactor = 0.0) -> pairDoubleDouble
    calculateSincApertureFlux(MaskedImageF mimage, Ellipse ellipse) -> pairDoubleDouble
    """
  return _algorithmsLib.calculateSincApertureFlux(*args)

